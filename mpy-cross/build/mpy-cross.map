# Path: build/mpy-cross
# Arch: arm64
# Object files:
[  0] linker synthesized
[  1] build/py/mpstate.o
[  2] build/py/nlr.o
[  3] build/py/nlraarch64.o
[  4] build/py/malloc.o
[  5] build/py/gc.o
[  6] build/py/qstr.o
[  7] build/py/vstr.o
[  8] build/py/mpprint.o
[  9] build/py/unicode.o
[ 10] build/py/mpz.o
[ 11] build/py/reader.o
[ 12] build/py/lexer.o
[ 13] build/py/parse.o
[ 14] build/py/scope.o
[ 15] build/py/compile.o
[ 16] build/py/emitcommon.o
[ 17] build/py/emitbc.o
[ 18] build/py/asmbase.o
[ 19] build/py/asmx64.o
[ 20] build/py/emitnx64.o
[ 21] build/py/asmx86.o
[ 22] build/py/emitnx86.o
[ 23] build/py/asmthumb.o
[ 24] build/py/emitnthumb.o
[ 25] build/py/emitinlinethumb.o
[ 26] build/py/asmarm.o
[ 27] build/py/emitnarm.o
[ 28] build/py/asmxtensa.o
[ 29] build/py/emitnxtensa.o
[ 30] build/py/emitinlinextensa.o
[ 31] build/py/emitnxtensawin.o
[ 32] build/py/formatfloat.o
[ 33] build/py/parsenumbase.o
[ 34] build/py/parsenum.o
[ 35] build/py/emitglue.o
[ 36] build/py/persistentcode.o
[ 37] build/py/runtime.o
[ 38] build/py/nativeglue.o
[ 39] build/py/stackctrl.o
[ 40] build/py/argcheck.o
[ 41] build/py/warning.o
[ 42] build/py/map.o
[ 43] build/py/obj.o
[ 44] build/py/objarray.o
[ 45] build/py/objbool.o
[ 46] build/py/objboundmeth.o
[ 47] build/py/objcomplex.o
[ 48] build/py/objdict.o
[ 49] build/py/objenumerate.o
[ 50] build/py/objexcept.o
[ 51] build/py/objfilter.o
[ 52] build/py/objfloat.o
[ 53] build/py/objfun.o
[ 54] build/py/objgenerator.o
[ 55] build/py/objgetitemiter.o
[ 56] build/py/objint.o
[ 57] build/py/objint_longlong.o
[ 58] build/py/objint_mpz.o
[ 59] build/py/objlist.o
[ 60] build/py/objmap.o
[ 61] build/py/objmodule.o
[ 62] build/py/objobject.o
[ 63] build/py/objpolyiter.o
[ 64] build/py/objproperty.o
[ 65] build/py/objnone.o
[ 66] build/py/objnamedtuple.o
[ 67] build/py/objrange.o
[ 68] build/py/objreversed.o
[ 69] build/py/objset.o
[ 70] build/py/objsingleton.o
[ 71] build/py/objslice.o
[ 72] build/py/objstr.o
[ 73] build/py/objstrunicode.o
[ 74] build/py/objstringio.o
[ 75] build/py/objtuple.o
[ 76] build/py/objtype.o
[ 77] build/py/objzip.o
[ 78] build/py/opmethods.o
[ 79] build/py/sequence.o
[ 80] build/py/stream.o
[ 81] build/py/binary.o
[ 82] build/py/builtinimport.o
[ 83] build/py/builtinevex.o
[ 84] build/py/builtinhelp.o
[ 85] build/py/modarray.o
[ 86] build/py/modbuiltins.o
[ 87] build/py/modcollections.o
[ 88] build/py/modgc.o
[ 89] build/py/modio.o
[ 90] build/py/modmath.o
[ 91] build/py/modcmath.o
[ 92] build/py/modmicropython.o
[ 93] build/py/modstruct.o
[ 94] build/py/modsys.o
[ 95] build/py/moduerrno.o
[ 96] build/py/modthread.o
[ 97] build/py/vm.o
[ 98] build/py/bc.o
[ 99] build/py/showbc.o
[100] build/py/repl.o
[101] build/py/smallint.o
[102] build/py/frozenmod.o
[103] build/main.o
[104] build/gccollect.o
[105] build/shared/runtime/gchelper_generic.o
[106] /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libm.tbd
# Sections:
# Address	Size    	Segment	Section
0x1000024A0	0x00046520	__TEXT	__text
0x1000489C0	0x00000180	__TEXT	__stubs
0x100048B40	0x00001467	__TEXT	__const
0x100049FA7	0x00005198	__TEXT	__cstring
0x10004F140	0x00000EBC	__TEXT	__unwind_info
0x100050000	0x00000118	__DATA_CONST	__got
0x100050118	0x00003010	__DATA_CONST	__const
0x100054000	0x00000008	__DATA	__data
0x100054008	0x00000334	__DATA	__common
0x10005433C	0x00000004	__DATA	__bss
# Symbols:
# Address	Size    	File  Name
0x1000024A0	0x0000001C	[  2] _nlr_push_tail
0x1000024BC	0x00000018	[  2] _nlr_pop
0x1000024D4	0x00000024	[  3] _nlr_push
0x1000024F8	0x00000054	[  3] _nlr_jump
0x10000254C	0x00000034	[  4] _m_malloc
0x100002580	0x00000008	[  4] _m_malloc_maybe
0x100002588	0x00000004	[  4] _m_malloc0
0x10000258C	0x00000034	[  4] _m_realloc
0x1000025C0	0x00000004	[  4] _m_realloc_maybe
0x1000025C4	0x00000004	[  4] _m_free
0x1000025C8	0x00000074	[  5] _gc_init
0x10000263C	0x00000018	[  5] _gc_is_locked
0x100002654	0x000000B0	[  5] _gc_collect_start
0x100002704	0x000000B8	[  5] _gc_collect_root
0x1000027BC	0x00000144	[  5] _gc_mark_subtree
0x100002900	0x00000244	[  5] _gc_collect_end
0x100002B44	0x00000224	[  5] _gc_alloc
0x100002D68	0x000000CC	[  5] _gc_free
0x100002E34	0x000002CC	[  5] _gc_realloc
0x100003100	0x00000038	[  6] _qstr_compute_hash
0x100003138	0x0000001C	[  6] _qstr_init
0x100003154	0x000000E8	[  6] _qstr_find_strn
0x10000323C	0x00000028	[  6] _qstr_from_str
0x100003264	0x000001E4	[  6] _qstr_from_strn
0x100003448	0x00000030	[  6] _qstr_hash
0x100003478	0x00000048	[  6] _find_qstr
0x1000034C0	0x00000030	[  6] _qstr_len
0x1000034F0	0x00000030	[  6] _qstr_str
0x100003520	0x00000048	[  6] _qstr_data
0x100003568	0x00000034	[  7] _vstr_init
0x10000359C	0x00000038	[  7] _vstr_init_len
0x1000035D4	0x00000044	[  7] _vstr_init_print
0x100003618	0x00000054	[  7] _vstr_add_strn
0x10000366C	0x00000030	[  7] _vstr_clear
0x10000369C	0x00000060	[  7] _vstr_extend
0x1000036FC	0x00000064	[  7] _vstr_ensure_extra
0x100003760	0x00000034	[  7] _vstr_add_len
0x100003794	0x00000044	[  7] _vstr_null_terminated_str
0x1000037D8	0x00000038	[  7] _vstr_add_byte
0x100003810	0x0000012C	[  7] _vstr_add_char
0x10000393C	0x00000060	[  7] _vstr_add_str
0x10000399C	0x00000014	[  7] _vstr_cut_tail_bytes
0x1000039B0	0x00000038	[  7] _vstr_printf
0x1000039E8	0x0000004C	[  8] _mp_print_str
0x100003A34	0x0000014C	[  8] _mp_print_strn
0x100003B80	0x0000040C	[  8] _mp_print_mp_int
0x100003F8C	0x00000120	[  8] _mp_print_float
0x1000040AC	0x00000028	[  8] _mp_printf
0x1000040D4	0x00000458	[  8] _mp_vprintf
0x10000452C	0x000001A0	[  8] _mp_print_int
0x1000046CC	0x00000060	[  9] _utf8_get_char
0x10000472C	0x00000014	[  9] _utf8_next_char
0x100004740	0x00000034	[  9] _utf8_ptr_to_index
0x100004774	0x00000038	[  9] _utf8_charlen
0x1000047AC	0x00000024	[  9] _unichar_isspace
0x1000047D0	0x00000024	[  9] _unichar_isalpha
0x1000047F4	0x00000018	[  9] _unichar_isdigit
0x10000480C	0x00000024	[  9] _unichar_isxdigit
0x100004830	0x00000018	[  9] _unichar_isupper
0x100004848	0x00000018	[  9] _unichar_islower
0x100004860	0x00000020	[  9] _unichar_tolower
0x100004880	0x00000020	[  9] _unichar_toupper
0x1000048A0	0x00000018	[  9] _unichar_xdigit_value
0x1000048B8	0x00000088	[  9] _utf8_check
0x100004940	0x0000000C	[ 10] _mpz_init_zero
0x10000494C	0x0000007C	[ 10] _mpz_set_from_int
0x1000049C8	0x00000018	[ 10] _mpz_init_fixed_from_int
0x1000049E0	0x00000018	[ 10] _mpz_deinit
0x1000049F8	0x0000004C	[ 10] _mpz_set
0x100004A44	0x00000060	[ 10] _mpz_need_dig
0x100004AA4	0x00000084	[ 10] _mpz_set_from_ll
0x100004B28	0x00000140	[ 10] _mpz_set_from_float
0x100004C68	0x00000124	[ 10] _mpz_set_from_str
0x100004D8C	0x0000010C	[ 10] _mpz_set_from_bytes
0x100004E98	0x00000084	[ 10] _mpz_cmp
0x100004F1C	0x00000038	[ 10] _mpz_abs_inpl
0x100004F54	0x00000040	[ 10] _mpz_neg_inpl
0x100004F94	0x000000D0	[ 10] _mpz_not_inpl
0x100005064	0x0000007C	[ 10] _mpn_sub
0x1000050E0	0x0000006C	[ 10] _mpn_add
0x10000514C	0x00000118	[ 10] _mpz_shl_inpl
0x100005264	0x00000144	[ 10] _mpz_shr_inpl
0x1000053A8	0x00000070	[ 10] _mpn_shr
0x100005418	0x000000FC	[ 10] _mpz_add_inpl
0x100005514	0x00000104	[ 10] _mpz_sub_inpl
0x100005618	0x00000160	[ 10] _mpz_and_inpl
0x100005778	0x00000154	[ 10] _mpz_or_inpl
0x1000058CC	0x00000148	[ 10] _mpz_xor_inpl
0x100005A14	0x00000160	[ 10] _mpz_mul_inpl
0x100005B74	0x0000008C	[ 10] _mpz_clone
0x100005C00	0x00000030	[ 10] _mpz_free
0x100005C30	0x0000013C	[ 10] _mpz_pow_inpl
0x100005D6C	0x000003A4	[ 10] _mpz_divmod_inpl
0x100006110	0x00000044	[ 10] _mpz_hash
0x100006154	0x0000005C	[ 10] _mpz_as_int_checked
0x1000061B0	0x000000C8	[ 10] _mpz_as_bytes
0x100006278	0x00000050	[ 10] _mpz_as_float
0x1000062C8	0x000001F0	[ 10] _mpz_as_str_inpl
0x1000064B8	0x00000090	[ 11] _mp_reader_new_file_from_fd
0x100006548	0x0000006C	[ 11] _mp_reader_posix_readbyte
0x1000065B4	0x00000030	[ 11] _mp_reader_posix_close
0x1000065E4	0x0000005C	[ 11] _mp_reader_new_file
0x100006640	0x00000A80	[ 12] _mp_lexer_to_next
0x1000070C0	0x000000B0	[ 12] _skip_whitespace
0x100007170	0x00000060	[ 12] _indent_push
0x1000071D0	0x000000A8	[ 12] _is_string_or_bytes
0x100007278	0x00000118	[ 12] _next_char
0x100007390	0x000000D0	[ 12] _mp_lexer_new
0x100007460	0x00000050	[ 12] _mp_lexer_new_from_file
0x1000074B0	0x0000004C	[ 12] _mp_lexer_free
0x1000074FC	0x00000068	[ 13] _mp_parse_node_get_int_maybe
0x100007564	0x00000008	[ 13] _mp_parse_node_is_const_false
0x10000756C	0x0000003C	[ 13] _parse_node_is_const_bool
0x1000075A8	0x00000008	[ 13] _mp_parse_node_is_const_true
0x1000075B0	0x00000044	[ 13] _mp_parse_node_extract_list
0x1000075F4	0x00000754	[ 13] _mp_parse
0x100007D48	0x00000078	[ 13] _push_rule
0x100007DC0	0x00000150	[ 13] _push_result_token
0x100007F10	0x00000034	[ 13] _push_rule_from_arg
0x100007F44	0x00000060	[ 13] _push_result_node
0x100007FA4	0x0000002C	[ 13] _pop_result
0x100007FD0	0x000008A4	[ 13] _push_result_rule
0x100008874	0x00000030	[ 13] _mp_parse_tree_clear
0x1000088A4	0x0000006C	[ 13] _mp_parse_node_is_const
0x100008910	0x0000011C	[ 13] _mp_parse_node_convert_to_obj
0x100008A2C	0x00000068	[ 13] _make_node_const_object_optimised
0x100008A94	0x000000C0	[ 13] _parser_alloc
0x100008B54	0x00000034	[ 13] _peek_rule
0x100008B88	0x00000128	[ 13] _build_tuple_from_stack
0x100008CB0	0x00000008	[ 13] _OUTLINED_FUNCTION_0
0x100008CB8	0x000000A0	[ 14] _scope_new
0x100008D58	0x00000028	[ 14] _scope_free
0x100008D80	0x000000A8	[ 14] _scope_find_or_add_id
0x100008E28	0x0000002C	[ 14] _scope_find
0x100008E54	0x00000038	[ 14] _scope_find_global
0x100008E8C	0x000000DC	[ 14] _scope_check_to_close_over
0x100008F68	0x00000734	[ 15] _mp_compile_to_raw_code
0x10000969C	0x00000474	[ 15] _compile_scope_inline_asm
0x100009B10	0x000004C0	[ 15] _compile_scope
0x100009FD0	0x00000058	[ 15] _compile_syntax_error
0x10000A028	0x000000D0	[ 15] _compile_node
0x10000A0F8	0x00000090	[ 15] _apply_to_single_or_list
0x10000A188	0x00000080	[ 15] _compile_viper_type_annotation
0x10000A208	0x00000034	[ 15] _compile_load_id
0x10000A23C	0x00000184	[ 15] _compile_scope_comp_iter
0x10000A3C0	0x00000030	[ 15] _compile_store_id
0x10000A3F0	0x00000080	[ 15] _compile_generic_all_nodes
0x10000A470	0x000002D0	[ 15] _compile_decorated
0x10000A740	0x00000030	[ 15] _compile_funcdef
0x10000A770	0x0000035C	[ 15] _compile_expr_stmt
0x10000AACC	0x00000064	[ 15] _compile_generic_tuple
0x10000AB30	0x00000014	[ 15] _compile_del_stmt
0x10000AB44	0x00000074	[ 15] _compile_break_cont_stmt
0x10000ABB8	0x000000EC	[ 15] _compile_return_stmt
0x10000ACA4	0x0000002C	[ 15] _compile_yield_stmt
0x10000ACD0	0x0000007C	[ 15] _compile_raise_stmt
0x10000AD4C	0x00000014	[ 15] _compile_import_name
0x10000AD60	0x00000264	[ 15] _compile_import_from
0x10000AFC4	0x000000E0	[ 15] _compile_global_nonlocal_stmt
0x10000B0A4	0x000000BC	[ 15] _compile_assert_stmt
0x10000B160	0x00000388	[ 15] _compile_async_stmt
0x10000B4E8	0x00000190	[ 15] _compile_if_stmt
0x10000B678	0x000000FC	[ 15] _compile_while_stmt
0x10000B774	0x00000248	[ 15] _compile_for_stmt
0x10000B9BC	0x000000EC	[ 15] _compile_try_stmt
0x10000BAA8	0x00000054	[ 15] _compile_with_stmt
0x10000BAFC	0x0000000C	[ 15] _compile_namedexpr
0x10000BB08	0x000000C8	[ 15] _compile_test_if_expr
0x10000BBD0	0x00000084	[ 15] _compile_lambdef
0x10000BC54	0x00000098	[ 15] _compile_or_and_test
0x10000BCEC	0x00000030	[ 15] _compile_not_test_2
0x10000BD1C	0x000001E8	[ 15] _compile_comparison
0x10000BF04	0x0000000C	[ 15] _compile_star_expr
0x10000BF10	0x00000074	[ 15] _compile_binary_op
0x10000BF84	0x00000084	[ 15] _compile_term
0x10000C008	0x0000005C	[ 15] _compile_factor_2
0x10000C064	0x0000002C	[ 15] _compile_power
0x10000C090	0x00000054	[ 15] _compile_atom_expr_await
0x10000C0E4	0x000001F4	[ 15] _compile_atom_expr_normal
0x10000C2D8	0x00000080	[ 15] _compile_atom_paren
0x10000C358	0x000000CC	[ 15] _compile_atom_bracket
0x10000C424	0x00000294	[ 15] _compile_atom_brace
0x10000C6B8	0x00000010	[ 15] _compile_trailer_paren
0x10000C6C8	0x00000030	[ 15] _compile_trailer_bracket
0x10000C6F8	0x00000018	[ 15] _compile_trailer_period
0x10000C710	0x00000134	[ 15] _compile_subscript
0x10000C844	0x00000030	[ 15] _compile_dictorsetmaker_item
0x10000C874	0x00000030	[ 15] _compile_classdef
0x10000C8A4	0x000000C8	[ 15] _compile_yield_expr
0x10000C96C	0x00000010	[ 15] _compile_const_object
0x10000C97C	0x00000090	[ 15] _compile_funcdef_helper
0x10000CA0C	0x000000D0	[ 15] _compile_classdef_helper
0x10000CADC	0x000000BC	[ 15] _compile_funcdef_lambdef
0x10000CB98	0x00000168	[ 15] _compile_funcdef_lambdef_param
0x10000CD00	0x0000016C	[ 15] _close_over_variables_etc
0x10000CE6C	0x00000238	[ 15] _compile_trailer_paren_helper
0x10000D0A4	0x000000FC	[ 15] _compile_namedexpr_helper
0x10000D1A0	0x000000FC	[ 15] _compile_comprehension
0x10000D29C	0x000000C4	[ 15] _compile_declare_global_or_nonlocal
0x10000D360	0x00000348	[ 15] _c_assign
0x10000D6A8	0x00000118	[ 15] _c_assign_tuple
0x10000D7C0	0x00000214	[ 15] _c_del_stmt
0x10000D9D4	0x00000030	[ 15] _compile_delete_id
0x10000DA04	0x000001C8	[ 15] _c_if_cond
0x10000DBCC	0x00000060	[ 15] _compile_dotted_as_name
0x10000DC2C	0x00000268	[ 15] _do_import_name
0x10000DE94	0x00000058	[ 15] _compile_decrease_except_level
0x10000DEEC	0x00000068	[ 15] _compile_yield_from
0x10000DF54	0x000003FC	[ 15] _compile_async_with_stmt_helper
0x10000E350	0x00000288	[ 15] _compile_for_stmt_optimised_range
0x10000E5D8	0x0000010C	[ 15] _compile_try_finally
0x10000E6E4	0x000002FC	[ 15] _compile_try_except
0x10000E9E0	0x00000168	[ 15] _compile_with_stmt_helper
0x10000EB48	0x000001F0	[ 15] _compile_scope_func_lambda_param
0x10000ED38	0x00000054	[ 16] _mp_emit_common_use_qstr
0x10000ED8C	0x00000070	[ 16] _mp_emit_common_use_const_obj
0x10000EDFC	0x000000D8	[ 16] _strictly_equal
0x10000EED4	0x00000048	[ 16] _mp_emit_common_get_id_for_modification
0x10000EF1C	0x000000CC	[ 16] _mp_emit_common_id_op
0x10000EFE8	0x00000028	[ 17] _emit_bc_new
0x10000F010	0x0000002C	[ 17] _emit_bc_set_max_num_labels
0x10000F03C	0x00000028	[ 17] _emit_bc_free
0x10000F064	0x00000268	[ 17] _mp_emit_bc_start_pass
0x10000F2CC	0x0000016C	[ 17] _mp_emit_bc_end_pass
0x10000F438	0x00000044	[ 17] _mp_emit_bc_adjust_stack_size
0x10000F47C	0x0000010C	[ 17] _mp_emit_bc_set_source_line
0x10000F588	0x0000006C	[ 17] _mp_emit_bc_label_assign
0x10000F5F4	0x00000080	[ 17] _mp_emit_bc_import
0x10000F674	0x00000070	[ 17] _mp_emit_bc_load_const_tok
0x10000F6E4	0x00000150	[ 17] _mp_emit_bc_load_const_small_int
0x10000F834	0x00000034	[ 17] _mp_emit_bc_load_const_str
0x10000F868	0x00000034	[ 17] _mp_emit_bc_load_const_obj
0x10000F89C	0x00000038	[ 17] _mp_emit_bc_load_null
0x10000F8D4	0x0000006C	[ 17] _mp_emit_bc_load_local
0x10000F940	0x00000054	[ 17] _emit_write_bytecode_byte_uint
0x10000F994	0x00000038	[ 17] _mp_emit_bc_load_global
0x10000F9CC	0x00000044	[ 17] _mp_emit_bc_load_method
0x10000FA10	0x00000038	[ 17] _mp_emit_bc_load_build_class
0x10000FA48	0x00000094	[ 17] _mp_emit_bc_subscr
0x10000FADC	0x00000038	[ 17] _mp_emit_bc_rot_three
0x10000FB14	0x000000A8	[ 17] _mp_emit_bc_attr
0x10000FBBC	0x00000038	[ 17] _mp_emit_bc_rot_two
0x10000FBF4	0x0000006C	[ 17] _mp_emit_bc_store_local
0x10000FC60	0x00000038	[ 17] _mp_emit_bc_store_global
0x10000FC98	0x00000018	[ 17] _mp_emit_bc_delete_local
0x10000FCB0	0x00000038	[ 17] _mp_emit_bc_delete_global
0x10000FCE8	0x00000038	[ 17] _mp_emit_bc_dup_top
0x10000FD20	0x00000038	[ 17] _mp_emit_bc_dup_top_two
0x10000FD58	0x00000038	[ 17] _mp_emit_bc_pop_top
0x10000FD90	0x00000034	[ 17] _mp_emit_bc_jump
0x10000FDC4	0x00000120	[ 17] _emit_write_bytecode_byte_label
0x10000FEE4	0x00000018	[ 17] _mp_emit_bc_pop_jump_if
0x10000FEFC	0x00000018	[ 17] _mp_emit_bc_jump_if_or_pop
0x10000FF14	0x000000B4	[ 17] _mp_emit_bc_unwind_jump
0x10000FFC8	0x0000001C	[ 17] _mp_emit_bc_setup_block
0x10000FFE4	0x00000070	[ 17] _mp_emit_bc_with_cleanup
0x100010054	0x00000038	[ 17] _mp_emit_bc_end_finally
0x10001008C	0x00000044	[ 17] _mp_emit_bc_get_iter
0x1000100D0	0x00000010	[ 17] _mp_emit_bc_for_iter
0x1000100E0	0x00000008	[ 17] _mp_emit_bc_for_iter_end
0x1000100E8	0x00000034	[ 17] _mp_emit_bc_pop_except_jump
0x10001011C	0x00000038	[ 17] _mp_emit_bc_unary_op
0x100010154	0x00000080	[ 17] _mp_emit_bc_binary_op
0x1000101D4	0x00000020	[ 17] _mp_emit_bc_build
0x1000101F4	0x00000038	[ 17] _mp_emit_bc_store_map
0x10001022C	0x00000034	[ 17] _mp_emit_bc_store_comp
0x100010260	0x00000010	[ 17] _mp_emit_bc_unpack_sequence
0x100010270	0x00000014	[ 17] _mp_emit_bc_unpack_ex
0x100010284	0x00000028	[ 17] _mp_emit_bc_make_function
0x1000102AC	0x00000034	[ 17] _emit_write_bytecode_byte_child
0x1000102E0	0x00000078	[ 17] _mp_emit_bc_make_closure
0x100010358	0x00000018	[ 17] _mp_emit_bc_call_function
0x100010370	0x00000034	[ 17] _emit_bc_call_function_method_helper
0x1000103A4	0x00000018	[ 17] _mp_emit_bc_call_method
0x1000103BC	0x00000040	[ 17] _mp_emit_bc_return_value
0x1000103FC	0x00000058	[ 17] _mp_emit_bc_raise_varargs
0x100010454	0x0000004C	[ 17] _mp_emit_bc_yield
0x1000104A0	0x00000008	[ 17] _mp_emit_bc_start_except_handler
0x1000104A8	0x00000008	[ 17] _mp_emit_bc_end_except_handler
0x1000104B0	0x00000048	[ 17] _emit_get_cur_to_write_code_info
0x1000104F8	0x00000058	[ 17] _emit_get_cur_to_write_bytecode
0x100010550	0x0000002C	[ 18] _mp_asm_base_init
0x10001057C	0x0000002C	[ 18] _mp_asm_base_deinit
0x1000105A8	0x00000060	[ 18] _mp_asm_base_start_pass
0x100010608	0x0000005C	[ 18] _mp_asm_base_get_cur_to_write_bytes
0x100010664	0x00000060	[ 18] _mp_asm_base_label_assign
0x1000106C4	0x0000001C	[ 18] _mp_asm_base_align
0x1000106E0	0x00000044	[ 18] _mp_asm_base_data
0x100010724	0x00000008	[ 19] _asm_x64_mov_r64_r64
0x10001072C	0x00000064	[ 19] _asm_x64_generic_r64_r64
0x100010790	0x00000090	[ 19] _asm_x64_mov_r8_to_mem8
0x100010820	0x000000F0	[ 19] _asm_x64_write_r64_disp
0x100010910	0x000000A4	[ 19] _asm_x64_mov_r16_to_mem16
0x1000109B4	0x00000090	[ 19] _asm_x64_mov_r32_to_mem32
0x100010A44	0x0000006C	[ 19] _asm_x64_mov_r64_to_mem64
0x100010AB0	0x000000A4	[ 19] _asm_x64_mov_mem8_to_r64zx
0x100010B54	0x000000A4	[ 19] _asm_x64_mov_mem16_to_r64zx
0x100010BF8	0x00000090	[ 19] _asm_x64_mov_mem32_to_r64zx
0x100010C88	0x0000006C	[ 19] _asm_x64_mov_mem64_to_r64
0x100010CF4	0x0000008C	[ 19] _asm_x64_mov_i32_to_r64
0x100010D80	0x0000006C	[ 19] _asm_x64_mov_i64_to_r64
0x100010DEC	0x00000010	[ 19] _asm_x64_mov_i64_to_r64_optimised
0x100010DFC	0x00000008	[ 19] _asm_x64_and_r64_r64
0x100010E04	0x00000008	[ 19] _asm_x64_or_r64_r64
0x100010E0C	0x00000008	[ 19] _asm_x64_xor_r64_r64
0x100010E14	0x00000048	[ 19] _asm_x64_shl_r64_cl
0x100010E5C	0x00000048	[ 19] _asm_x64_shr_r64_cl
0x100010EA4	0x00000044	[ 19] _asm_x64_sar_r64_cl
0x100010EE8	0x00000008	[ 19] _asm_x64_add_r64_r64
0x100010EF0	0x00000008	[ 19] _asm_x64_sub_r64_r64
0x100010EF8	0x00000074	[ 19] _asm_x64_mul_r64_r64
0x100010F6C	0x00000014	[ 19] _asm_x64_cmp_r64_with_r64
0x100010F80	0x00000058	[ 19] _asm_x64_test_r8_with_r8
0x100010FD8	0x00000014	[ 19] _asm_x64_test_r64_with_r64
0x100010FEC	0x00000058	[ 19] _asm_x64_setcc_r8
0x100011044	0x00000048	[ 19] _asm_x64_jmp_reg
0x10001108C	0x000000B4	[ 19] _asm_x64_jmp_label
0x100011140	0x000000C0	[ 19] _asm_x64_jcc_label
0x100011200	0x00000098	[ 19] _asm_x64_entry
0x100011298	0x00000084	[ 19] _asm_x64_sub_r64_i32
0x10001131C	0x000000A0	[ 19] _asm_x64_exit
0x1000113BC	0x00000010	[ 19] _asm_x64_mov_local_to_r64
0x1000113CC	0x0000000C	[ 19] _asm_x64_mov_r64_to_local
0x1000113D8	0x000000AC	[ 19] _asm_x64_mov_local_addr_to_r64
0x100011484	0x00000094	[ 19] _asm_x64_mov_reg_pcrel
0x100011518	0x00000060	[ 19] _asm_x64_call_ind
0x100011578	0x00000008	[ 19] _OUTLINED_FUNCTION_0
0x100011580	0x00000088	[ 20] _emit_native_x64_new
0x100011608	0x0000004C	[ 20] _emit_native_x64_free
0x100011654	0x0000076C	[ 20] _emit_native_start_pass
0x100011DC0	0x00000450	[ 20] _emit_native_end_pass
0x100012210	0x00000074	[ 20] _emit_native_adjust_stack_size
0x100012284	0x00000004	[ 20] _emit_native_set_source_line
0x100012288	0x000000B4	[ 20] _emit_native_load_local
0x10001233C	0x00000084	[ 20] _emit_native_load_global
0x1000123C0	0x000000D8	[ 20] _emit_native_store_local
0x100012498	0x00000100	[ 20] _emit_native_store_global
0x100012598	0x0000004C	[ 20] _emit_native_delete_local
0x1000125E4	0x00000014	[ 20] _emit_native_delete_global
0x1000125F8	0x000000B8	[ 20] _emit_native_label_assign
0x1000126B0	0x00000118	[ 20] _emit_native_import
0x1000127C8	0x00000038	[ 20] _emit_native_load_const_tok
0x100012800	0x0000000C	[ 20] _emit_native_load_const_small_int
0x10001280C	0x00000048	[ 20] _emit_native_load_const_str
0x100012854	0x00000044	[ 20] _emit_native_load_const_obj
0x100012898	0x0000000C	[ 20] _emit_native_load_null
0x1000128A4	0x000000AC	[ 20] _emit_native_load_method
0x100012950	0x0000003C	[ 20] _emit_native_load_build_class
0x10001298C	0x0000090C	[ 20] _emit_native_subscr
0x100013298	0x00000188	[ 20] _emit_native_attr
0x100013420	0x00000064	[ 20] _emit_native_dup_top
0x100013484	0x00000080	[ 20] _emit_native_dup_top_two
0x100013504	0x00000008	[ 20] _emit_native_pop_top
0x10001350C	0x00000054	[ 20] _emit_native_rot_two
0x100013560	0x00000078	[ 20] _emit_native_rot_three
0x1000135D8	0x0000003C	[ 20] _emit_native_jump
0x100013614	0x00000008	[ 20] _emit_native_pop_jump_if
0x10001361C	0x00000008	[ 20] _emit_native_jump_if_or_pop
0x100013624	0x00000148	[ 20] _emit_native_unwind_jump
0x10001376C	0x000001A0	[ 20] _emit_native_setup_block
0x10001390C	0x0000021C	[ 20] _emit_native_with_cleanup
0x100013B28	0x00000120	[ 20] _emit_native_end_finally
0x100013C48	0x000000BC	[ 20] _emit_native_get_iter
0x100013D04	0x0000007C	[ 20] _emit_native_for_iter
0x100013D80	0x00000008	[ 20] _emit_native_for_iter_end
0x100013D88	0x00000074	[ 20] _emit_native_pop_except_jump
0x100013DFC	0x000000B4	[ 20] _emit_native_unary_op
0x100013EB0	0x0000042C	[ 20] _emit_native_binary_op
0x1000142DC	0x00000138	[ 20] _emit_native_build
0x100014414	0x00000088	[ 20] _emit_native_store_map
0x10001449C	0x00000110	[ 20] _emit_native_store_comp
0x1000145AC	0x00000070	[ 20] _emit_native_unpack_sequence
0x10001461C	0x00000080	[ 20] _emit_native_unpack_ex
0x10001469C	0x000000B0	[ 20] _emit_native_make_function
0x10001474C	0x00000120	[ 20] _emit_native_make_closure
0x10001486C	0x000001BC	[ 20] _emit_native_call_function
0x100014A28	0x00000088	[ 20] _emit_native_call_method
0x100014AB0	0x000001E4	[ 20] _emit_native_return_value
0x100014C94	0x00000090	[ 20] _emit_native_raise_varargs
0x100014D24	0x00000290	[ 20] _emit_native_yield
0x100014FB4	0x00000040	[ 20] _emit_native_start_except_handler
0x100014FF4	0x00000008	[ 20] _emit_native_end_except_handler
0x100014FFC	0x00000050	[ 20] _emit_call_with_imm_arg
0x10001504C	0x0000002C	[ 20] _emit_native_mov_state_reg
0x100015078	0x00000350	[ 20] _emit_native_global_exc_entry
0x1000153C8	0x00000078	[ 20] _need_reg_all
0x100015440	0x00000028	[ 20] _emit_native_mov_reg_state
0x100015468	0x00000048	[ 20] _ensure_extra_stack
0x1000154B0	0x00000054	[ 20] _adjust_stack
0x100015504	0x000000C8	[ 20] _emit_native_load_fast
0x1000155CC	0x00000054	[ 20] _emit_post_push_reg
0x100015620	0x0000009C	[ 20] _need_reg_single
0x1000156BC	0x0000008C	[ 20] _emit_pre_pop_reg_flexible
0x100015748	0x000000D8	[ 20] _emit_access_stack
0x100015820	0x000000D4	[ 20] _load_reg_stack_imm
0x1000158F4	0x00000054	[ 20] _emit_post_push_imm
0x100015948	0x0000006C	[ 20] _emit_call_with_qstr_arg
0x1000159B4	0x00000140	[ 20] _emit_native_store_fast
0x100015AF4	0x00000094	[ 20] _need_stack_settled
0x100015B88	0x00000094	[ 20] _emit_native_leave_exc_stack
0x100015C1C	0x00000064	[ 20] _emit_pre_pop_reg_reg
0x100015C80	0x00000080	[ 20] _emit_load_reg_with_object
0x100015D00	0x00000144	[ 20] _emit_get_stack_pointer_to_reg_for_pop
0x100015E44	0x00000080	[ 20] _emit_get_stack_pointer_to_reg_for_push
0x100015EC4	0x0000005C	[ 20] _emit_native_mov_reg_state_addr
0x100015F20	0x00000094	[ 20] _emit_pre_pop_reg_reg_reg
0x100015FB4	0x000001A8	[ 20] _emit_native_jump_helper
0x10001615C	0x0000009C	[ 20] _emit_native_push_exc_stack
0x1000161F8	0x00000060	[ 20] _emit_call_with_2_imm_args
0x100016258	0x0000007C	[ 20] _emit_load_reg_with_child
0x1000162D4	0x00000068	[ 20] _emit_fold_stack_top
0x10001633C	0x00000040	[ 21] _asm_x86_mov_r32_r32
0x10001637C	0x00000054	[ 21] _asm_x86_mov_r8_to_mem8
0x1000163D0	0x000000EC	[ 21] _asm_x86_write_r32_disp
0x1000164BC	0x00000054	[ 21] _asm_x86_mov_r16_to_mem16
0x100016510	0x00000054	[ 21] _asm_x86_mov_r32_to_mem32
0x100016564	0x00000054	[ 21] _asm_x86_mov_mem8_to_r32zx
0x1000165B8	0x00000054	[ 21] _asm_x86_mov_mem16_to_r32zx
0x10001660C	0x00000054	[ 21] _asm_x86_mov_mem32_to_r32
0x100016660	0x00000060	[ 21] _asm_x86_mov_i32_to_r32
0x1000166C0	0x00000040	[ 21] _asm_x86_and_r32_r32
0x100016700	0x00000040	[ 21] _asm_x86_or_r32_r32
0x100016740	0x00000040	[ 21] _asm_x86_xor_r32_r32
0x100016780	0x00000038	[ 21] _asm_x86_shl_r32_cl
0x1000167B8	0x0000003C	[ 21] _asm_x86_shr_r32_cl
0x1000167F4	0x00000038	[ 21] _asm_x86_sar_r32_cl
0x10001682C	0x00000040	[ 21] _asm_x86_add_r32_r32
0x10001686C	0x00000040	[ 21] _asm_x86_sub_r32_r32
0x1000168AC	0x00000040	[ 21] _asm_x86_mul_r32_r32
0x1000168EC	0x00000040	[ 21] _asm_x86_cmp_r32_with_r32
0x10001692C	0x00000040	[ 21] _asm_x86_test_r8_with_r8
0x10001696C	0x00000040	[ 21] _asm_x86_test_r32_with_r32
0x1000169AC	0x00000048	[ 21] _asm_x86_setcc_r8
0x1000169F4	0x00000038	[ 21] _asm_x86_jmp_reg
0x100016A2C	0x000000B4	[ 21] _asm_x86_jmp_label
0x100016AE0	0x000000C0	[ 21] _asm_x86_jcc_label
0x100016BA0	0x00000098	[ 21] _asm_x86_entry
0x100016C38	0x00000074	[ 21] _asm_x86_sub_r32_i32
0x100016CAC	0x000000A0	[ 21] _asm_x86_exit
0x100016D4C	0x0000001C	[ 21] _asm_x86_mov_arg_to_r32
0x100016D68	0x00000010	[ 21] _asm_x86_mov_local_to_r32
0x100016D78	0x0000000C	[ 21] _asm_x86_mov_r32_to_local
0x100016D84	0x00000088	[ 21] _asm_x86_mov_local_addr_to_r32
0x100016E0C	0x000000C4	[ 21] _asm_x86_mov_reg_pcrel
0x100016ED0	0x00000188	[ 21] _asm_x86_call_ind
0x100017058	0x00000008	[ 21] _OUTLINED_FUNCTION_0
0x100017060	0x00000088	[ 22] _emit_native_x86_new
0x1000170E8	0x0000004C	[ 22] _emit_native_x86_free
0x100017134	0x000007C8	[ 22] _emit_native_start_pass
0x1000178FC	0x00000458	[ 22] _emit_native_end_pass
0x100017D54	0x00000074	[ 22] _emit_native_adjust_stack_size
0x100017DC8	0x00000004	[ 22] _emit_native_set_source_line
0x100017DCC	0x000000B4	[ 22] _emit_native_load_local
0x100017E80	0x00000084	[ 22] _emit_native_load_global
0x100017F04	0x000000D8	[ 22] _emit_native_store_local
0x100017FDC	0x00000100	[ 22] _emit_native_store_global
0x1000180DC	0x0000004C	[ 22] _emit_native_delete_local
0x100018128	0x00000014	[ 22] _emit_native_delete_global
0x10001813C	0x000000B8	[ 22] _emit_native_label_assign
0x1000181F4	0x0000011C	[ 22] _emit_native_import
0x100018310	0x00000038	[ 22] _emit_native_load_const_tok
0x100018348	0x0000000C	[ 22] _emit_native_load_const_small_int
0x100018354	0x00000048	[ 22] _emit_native_load_const_str
0x10001839C	0x00000044	[ 22] _emit_native_load_const_obj
0x1000183E0	0x0000000C	[ 22] _emit_native_load_null
0x1000183EC	0x000000AC	[ 22] _emit_native_load_method
0x100018498	0x00000040	[ 22] _emit_native_load_build_class
0x1000184D8	0x00000908	[ 22] _emit_native_subscr
0x100018DE0	0x00000188	[ 22] _emit_native_attr
0x100018F68	0x00000064	[ 22] _emit_native_dup_top
0x100018FCC	0x00000080	[ 22] _emit_native_dup_top_two
0x10001904C	0x00000008	[ 22] _emit_native_pop_top
0x100019054	0x00000054	[ 22] _emit_native_rot_two
0x1000190A8	0x00000078	[ 22] _emit_native_rot_three
0x100019120	0x0000003C	[ 22] _emit_native_jump
0x10001915C	0x00000008	[ 22] _emit_native_pop_jump_if
0x100019164	0x00000008	[ 22] _emit_native_jump_if_or_pop
0x10001916C	0x00000148	[ 22] _emit_native_unwind_jump
0x1000192B4	0x000001A0	[ 22] _emit_native_setup_block
0x100019454	0x00000210	[ 22] _emit_native_with_cleanup
0x100019664	0x00000124	[ 22] _emit_native_end_finally
0x100019788	0x000000C4	[ 22] _emit_native_get_iter
0x10001984C	0x00000080	[ 22] _emit_native_for_iter
0x1000198CC	0x00000008	[ 22] _emit_native_for_iter_end
0x1000198D4	0x00000074	[ 22] _emit_native_pop_except_jump
0x100019948	0x000000B4	[ 22] _emit_native_unary_op
0x1000199FC	0x00000430	[ 22] _emit_native_binary_op
0x100019E2C	0x0000013C	[ 22] _emit_native_build
0x100019F68	0x0000008C	[ 22] _emit_native_store_map
0x100019FF4	0x0000011C	[ 22] _emit_native_store_comp
0x10001A110	0x00000070	[ 22] _emit_native_unpack_sequence
0x10001A180	0x00000080	[ 22] _emit_native_unpack_ex
0x10001A200	0x000000B4	[ 22] _emit_native_make_function
0x10001A2B4	0x00000118	[ 22] _emit_native_make_closure
0x10001A3CC	0x000001BC	[ 22] _emit_native_call_function
0x10001A588	0x00000088	[ 22] _emit_native_call_method
0x10001A610	0x000001DC	[ 22] _emit_native_return_value
0x10001A7EC	0x00000094	[ 22] _emit_native_raise_varargs
0x10001A880	0x00000298	[ 22] _emit_native_yield
0x10001AB18	0x00000040	[ 22] _emit_native_start_except_handler
0x10001AB58	0x00000008	[ 22] _emit_native_end_except_handler
0x10001AB60	0x0000005C	[ 22] _emit_call_with_imm_arg
0x10001ABBC	0x0000002C	[ 22] _emit_native_mov_state_reg
0x10001ABE8	0x00000360	[ 22] _emit_native_global_exc_entry
0x10001AF48	0x00000078	[ 22] _need_reg_all
0x10001AFC0	0x00000028	[ 22] _emit_native_mov_reg_state
0x10001AFE8	0x00000048	[ 22] _ensure_extra_stack
0x10001B030	0x00000054	[ 22] _adjust_stack
0x10001B084	0x000000C8	[ 22] _emit_native_load_fast
0x10001B14C	0x00000054	[ 22] _emit_post_push_reg
0x10001B1A0	0x0000009C	[ 22] _need_reg_single
0x10001B23C	0x0000008C	[ 22] _emit_pre_pop_reg_flexible
0x10001B2C8	0x000000D8	[ 22] _emit_access_stack
0x10001B3A0	0x000000D4	[ 22] _load_reg_stack_imm
0x10001B474	0x00000054	[ 22] _emit_post_push_imm
0x10001B4C8	0x00000078	[ 22] _emit_call_with_qstr_arg
0x10001B540	0x00000140	[ 22] _emit_native_store_fast
0x10001B680	0x00000094	[ 22] _need_stack_settled
0x10001B714	0x00000094	[ 22] _emit_native_leave_exc_stack
0x10001B7A8	0x00000064	[ 22] _emit_pre_pop_reg_reg
0x10001B80C	0x00000080	[ 22] _emit_load_reg_with_object
0x10001B88C	0x00000144	[ 22] _emit_get_stack_pointer_to_reg_for_pop
0x10001B9D0	0x00000080	[ 22] _emit_get_stack_pointer_to_reg_for_push
0x10001BA50	0x00000058	[ 22] _emit_native_mov_reg_state_addr
0x10001BAA8	0x00000094	[ 22] _emit_pre_pop_reg_reg_reg
0x10001BB3C	0x000001AC	[ 22] _emit_native_jump_helper
0x10001BCE8	0x0000009C	[ 22] _emit_native_push_exc_stack
0x10001BD84	0x0000006C	[ 22] _emit_call_with_2_imm_args
0x10001BDF0	0x0000007C	[ 22] _emit_load_reg_with_child
0x10001BE6C	0x00000068	[ 22] _emit_fold_stack_top
0x10001BED4	0x000001DC	[ 23] _asm_thumb_entry
0x10001C0B0	0x00000044	[ 23] _asm_thumb_op32
0x10001C0F4	0x0000002C	[ 23] _asm_thumb_op16
0x10001C120	0x000000F4	[ 23] _asm_thumb_exit
0x10001C214	0x0000005C	[ 23] _asm_thumb_format_4
0x10001C270	0x00000060	[ 23] _asm_thumb_mov_reg_reg
0x10001C2D0	0x0000007C	[ 23] _asm_thumb_mov_reg_i16
0x10001C34C	0x00000090	[ 23] _asm_thumb_b_n_label
0x10001C3DC	0x0000011C	[ 23] _asm_thumb_bcc_nw_label
0x10001C4F8	0x000000A4	[ 23] _asm_thumb_bl_label
0x10001C59C	0x00000124	[ 23] _asm_thumb_mov_reg_i32
0x10001C6C0	0x0000019C	[ 23] _asm_thumb_mov_reg_i32_optimised
0x10001C85C	0x00000094	[ 23] _asm_thumb_mov_rlo_i16
0x10001C8F0	0x0000005C	[ 23] _asm_thumb_mov_local_reg
0x10001C94C	0x00000038	[ 23] _asm_thumb_mov_local_check
0x10001C984	0x00000060	[ 23] _asm_thumb_mov_reg_local
0x10001C9E4	0x0000005C	[ 23] _asm_thumb_mov_reg_local_addr
0x10001CA40	0x000000E4	[ 23] _asm_thumb_mov_reg_pcrel
0x10001CB24	0x000000F4	[ 23] _asm_thumb_ldr_reg_reg_i12_optimised
0x10001CC18	0x000001B8	[ 23] _asm_thumb_add_reg_reg_offset
0x10001CDD0	0x000000F4	[ 23] _asm_thumb_ldrh_reg_reg_i12_optimised
0x10001CEC4	0x00000108	[ 23] _asm_thumb_b_label
0x10001CFCC	0x00000144	[ 23] _asm_thumb_bcc_label
0x10001D110	0x00000054	[ 23] _asm_thumb_bcc_rel9
0x10001D164	0x00000054	[ 23] _asm_thumb_b_rel12
0x10001D1B8	0x0000004C	[ 23] _asm_thumb_bl_ind
0x10001D204	0x00000008	[ 23] _OUTLINED_FUNCTION_0
0x10001D20C	0x00000088	[ 24] _emit_native_thumb_new
0x10001D294	0x0000004C	[ 24] _emit_native_thumb_free
0x10001D2E0	0x00000744	[ 24] _emit_native_start_pass
0x10001DA24	0x0000044C	[ 24] _emit_native_end_pass
0x10001DE70	0x00000074	[ 24] _emit_native_adjust_stack_size
0x10001DEE4	0x00000004	[ 24] _emit_native_set_source_line
0x10001DEE8	0x000000B4	[ 24] _emit_native_load_local
0x10001DF9C	0x00000084	[ 24] _emit_native_load_global
0x10001E020	0x000000DC	[ 24] _emit_native_store_local
0x10001E0FC	0x00000100	[ 24] _emit_native_store_global
0x10001E1FC	0x0000004C	[ 24] _emit_native_delete_local
0x10001E248	0x00000014	[ 24] _emit_native_delete_global
0x10001E25C	0x000000B8	[ 24] _emit_native_label_assign
0x10001E314	0x00000118	[ 24] _emit_native_import
0x10001E42C	0x00000038	[ 24] _emit_native_load_const_tok
0x10001E464	0x0000000C	[ 24] _emit_native_load_const_small_int
0x10001E470	0x00000048	[ 24] _emit_native_load_const_str
0x10001E4B8	0x00000044	[ 24] _emit_native_load_const_obj
0x10001E4FC	0x0000000C	[ 24] _emit_native_load_null
0x10001E508	0x000000AC	[ 24] _emit_native_load_method
0x10001E5B4	0x0000003C	[ 24] _emit_native_load_build_class
0x10001E5F0	0x000009AC	[ 24] _emit_native_subscr
0x10001EF9C	0x0000018C	[ 24] _emit_native_attr
0x10001F128	0x00000064	[ 24] _emit_native_dup_top
0x10001F18C	0x00000080	[ 24] _emit_native_dup_top_two
0x10001F20C	0x00000008	[ 24] _emit_native_pop_top
0x10001F214	0x00000054	[ 24] _emit_native_rot_two
0x10001F268	0x00000078	[ 24] _emit_native_rot_three
0x10001F2E0	0x0000003C	[ 24] _emit_native_jump
0x10001F31C	0x00000008	[ 24] _emit_native_pop_jump_if
0x10001F324	0x00000008	[ 24] _emit_native_jump_if_or_pop
0x10001F32C	0x00000148	[ 24] _emit_native_unwind_jump
0x10001F474	0x000001A0	[ 24] _emit_native_setup_block
0x10001F614	0x00000204	[ 24] _emit_native_with_cleanup
0x10001F818	0x0000011C	[ 24] _emit_native_end_finally
0x10001F934	0x000000BC	[ 24] _emit_native_get_iter
0x10001F9F0	0x00000078	[ 24] _emit_native_for_iter
0x10001FA68	0x00000008	[ 24] _emit_native_for_iter_end
0x10001FA70	0x00000074	[ 24] _emit_native_pop_except_jump
0x10001FAE4	0x000000B4	[ 24] _emit_native_unary_op
0x10001FB98	0x0000046C	[ 24] _emit_native_binary_op
0x100020004	0x00000138	[ 24] _emit_native_build
0x10002013C	0x00000088	[ 24] _emit_native_store_map
0x1000201C4	0x00000110	[ 24] _emit_native_store_comp
0x1000202D4	0x00000070	[ 24] _emit_native_unpack_sequence
0x100020344	0x00000080	[ 24] _emit_native_unpack_ex
0x1000203C4	0x000000B0	[ 24] _emit_native_make_function
0x100020474	0x00000110	[ 24] _emit_native_make_closure
0x100020584	0x000001BC	[ 24] _emit_native_call_function
0x100020740	0x00000088	[ 24] _emit_native_call_method
0x1000207C8	0x000001DC	[ 24] _emit_native_return_value
0x1000209A4	0x00000090	[ 24] _emit_native_raise_varargs
0x100020A34	0x0000028C	[ 24] _emit_native_yield
0x100020CC0	0x00000040	[ 24] _emit_native_start_except_handler
0x100020D00	0x00000008	[ 24] _emit_native_end_except_handler
0x100020D08	0x00000050	[ 24] _emit_call_with_imm_arg
0x100020D58	0x00000024	[ 24] _emit_native_mov_state_reg
0x100020D7C	0x00000338	[ 24] _emit_native_global_exc_entry
0x1000210B4	0x00000078	[ 24] _need_reg_all
0x10002112C	0x00000020	[ 24] _emit_native_mov_reg_state
0x10002114C	0x00000048	[ 24] _ensure_extra_stack
0x100021194	0x00000054	[ 24] _adjust_stack
0x1000211E8	0x000000C8	[ 24] _emit_native_load_fast
0x1000212B0	0x00000054	[ 24] _emit_post_push_reg
0x100021304	0x0000009C	[ 24] _need_reg_single
0x1000213A0	0x0000008C	[ 24] _emit_pre_pop_reg_flexible
0x10002142C	0x000000D8	[ 24] _emit_access_stack
0x100021504	0x000000C0	[ 24] _load_reg_stack_imm
0x1000215C4	0x00000054	[ 24] _emit_post_push_imm
0x100021618	0x0000006C	[ 24] _emit_call_with_qstr_arg
0x100021684	0x00000140	[ 24] _emit_native_store_fast
0x1000217C4	0x00000094	[ 24] _need_stack_settled
0x100021858	0x00000098	[ 24] _emit_native_leave_exc_stack
0x1000218F0	0x00000064	[ 24] _emit_pre_pop_reg_reg
0x100021954	0x00000080	[ 24] _emit_load_reg_with_object
0x1000219D4	0x00000144	[ 24] _emit_get_stack_pointer_to_reg_for_pop
0x100021B18	0x00000080	[ 24] _emit_get_stack_pointer_to_reg_for_push
0x100021B98	0x00000058	[ 24] _emit_native_mov_reg_state_addr
0x100021BF0	0x00000094	[ 24] _emit_pre_pop_reg_reg_reg
0x100021C84	0x00000190	[ 24] _emit_native_jump_helper
0x100021E14	0x0000009C	[ 24] _emit_native_push_exc_stack
0x100021EB0	0x00000060	[ 24] _emit_call_with_2_imm_args
0x100021F10	0x0000007C	[ 24] _emit_load_reg_with_child
0x100021F8C	0x00000068	[ 24] _emit_fold_stack_top
0x100021FF4	0x00000054	[ 25] _emit_inline_thumb_new
0x100022048	0x00000034	[ 25] _emit_inline_thumb_free
0x10002207C	0x0000005C	[ 25] _emit_inline_thumb_start_pass
0x1000220D8	0x00000004	[ 25] _emit_inline_thumb_end_pass
0x1000220DC	0x000000C8	[ 25] _emit_inline_thumb_count_params
0x1000221A4	0x00000060	[ 25] _emit_inline_thumb_label
0x100022204	0x00000E88	[ 25] _emit_inline_thumb_op
0x10002308C	0x000000D8	[ 25] _get_arg_vfpreg
0x100023164	0x00000100	[ 25] _get_arg_reg
0x100023264	0x00000098	[ 25] _get_arg_addr
0x1000232FC	0x00000098	[ 25] _get_arg_i
0x100023394	0x000000B0	[ 25] _get_arg_label
0x100023444	0x00000160	[ 25] _get_arg_reglist
0x1000235A4	0x000000C4	[ 25] _get_arg_special_reg
0x100023668	0x00000090	[ 26] _asm_arm_entry
0x1000236F8	0x00000068	[ 26] _asm_arm_exit
0x100023760	0x0000003C	[ 26] _asm_arm_mov_reg_reg
0x10002379C	0x00000078	[ 26] _asm_arm_mov_reg_i32
0x100023814	0x00000084	[ 26] _asm_arm_mov_reg_i32_optimised
0x100023898	0x00000040	[ 26] _asm_arm_mov_local_reg
0x1000238D8	0x00000040	[ 26] _asm_arm_mov_reg_local
0x100023918	0x00000040	[ 26] _asm_arm_cmp_reg_i8
0x100023958	0x0000003C	[ 26] _asm_arm_cmp_reg_reg
0x100023994	0x00000070	[ 26] _asm_arm_setcc_reg
0x100023A04	0x00000050	[ 26] _asm_arm_add_reg_reg_reg
0x100023A54	0x00000050	[ 26] _asm_arm_sub_reg_reg_reg
0x100023AA4	0x0000005C	[ 26] _asm_arm_mul_reg_reg_reg
0x100023B00	0x0000004C	[ 26] _asm_arm_and_reg_reg_reg
0x100023B4C	0x00000050	[ 26] _asm_arm_eor_reg_reg_reg
0x100023B9C	0x00000050	[ 26] _asm_arm_orr_reg_reg_reg
0x100023BEC	0x00000040	[ 26] _asm_arm_mov_reg_local_addr
0x100023C2C	0x000000C4	[ 26] _asm_arm_mov_reg_pcrel
0x100023CF0	0x00000044	[ 26] _asm_arm_lsl_reg_reg
0x100023D34	0x00000044	[ 26] _asm_arm_lsr_reg_reg
0x100023D78	0x00000044	[ 26] _asm_arm_asr_reg_reg
0x100023DBC	0x00000050	[ 26] _asm_arm_ldr_reg_reg
0x100023E0C	0x00000044	[ 26] _asm_arm_ldrh_reg_reg
0x100023E50	0x0000005C	[ 26] _asm_arm_ldrh_reg_reg_offset
0x100023EAC	0x00000040	[ 26] _asm_arm_ldrb_reg_reg
0x100023EEC	0x00000050	[ 26] _asm_arm_str_reg_reg
0x100023F3C	0x00000044	[ 26] _asm_arm_strh_reg_reg
0x100023F80	0x00000040	[ 26] _asm_arm_strb_reg_reg
0x100023FC0	0x00000054	[ 26] _asm_arm_str_reg_reg_reg
0x100024014	0x00000074	[ 26] _asm_arm_strh_reg_reg_reg
0x100024088	0x00000050	[ 26] _asm_arm_strb_reg_reg_reg
0x1000240D8	0x00000090	[ 26] _asm_arm_bcc_label
0x100024168	0x0000000C	[ 26] _asm_arm_b_label
0x100024174	0x00000064	[ 26] _asm_arm_bl_ind
0x1000241D8	0x00000038	[ 26] _asm_arm_bx_reg
0x100024210	0x00000088	[ 27] _emit_native_arm_new
0x100024298	0x0000004C	[ 27] _emit_native_arm_free
0x1000242E4	0x00000760	[ 27] _emit_native_start_pass
0x100024A44	0x00000450	[ 27] _emit_native_end_pass
0x100024E94	0x00000074	[ 27] _emit_native_adjust_stack_size
0x100024F08	0x00000004	[ 27] _emit_native_set_source_line
0x100024F0C	0x000000B4	[ 27] _emit_native_load_local
0x100024FC0	0x00000084	[ 27] _emit_native_load_global
0x100025044	0x000000D8	[ 27] _emit_native_store_local
0x10002511C	0x00000100	[ 27] _emit_native_store_global
0x10002521C	0x0000004C	[ 27] _emit_native_delete_local
0x100025268	0x00000014	[ 27] _emit_native_delete_global
0x10002527C	0x000000B8	[ 27] _emit_native_label_assign
0x100025334	0x00000118	[ 27] _emit_native_import
0x10002544C	0x00000038	[ 27] _emit_native_load_const_tok
0x100025484	0x0000000C	[ 27] _emit_native_load_const_small_int
0x100025490	0x00000048	[ 27] _emit_native_load_const_str
0x1000254D8	0x00000044	[ 27] _emit_native_load_const_obj
0x10002551C	0x0000000C	[ 27] _emit_native_load_null
0x100025528	0x000000AC	[ 27] _emit_native_load_method
0x1000255D4	0x0000003C	[ 27] _emit_native_load_build_class
0x100025610	0x000008A8	[ 27] _emit_native_subscr
0x100025EB8	0x0000018C	[ 27] _emit_native_attr
0x100026044	0x00000064	[ 27] _emit_native_dup_top
0x1000260A8	0x00000080	[ 27] _emit_native_dup_top_two
0x100026128	0x00000008	[ 27] _emit_native_pop_top
0x100026130	0x00000054	[ 27] _emit_native_rot_two
0x100026184	0x00000078	[ 27] _emit_native_rot_three
0x1000261FC	0x0000003C	[ 27] _emit_native_jump
0x100026238	0x00000008	[ 27] _emit_native_pop_jump_if
0x100026240	0x00000008	[ 27] _emit_native_jump_if_or_pop
0x100026248	0x00000148	[ 27] _emit_native_unwind_jump
0x100026390	0x000001A0	[ 27] _emit_native_setup_block
0x100026530	0x0000020C	[ 27] _emit_native_with_cleanup
0x10002673C	0x00000120	[ 27] _emit_native_end_finally
0x10002685C	0x000000BC	[ 27] _emit_native_get_iter
0x100026918	0x0000007C	[ 27] _emit_native_for_iter
0x100026994	0x00000008	[ 27] _emit_native_for_iter_end
0x10002699C	0x00000074	[ 27] _emit_native_pop_except_jump
0x100026A10	0x000000B4	[ 27] _emit_native_unary_op
0x100026AC4	0x00000420	[ 27] _emit_native_binary_op
0x100026EE4	0x00000138	[ 27] _emit_native_build
0x10002701C	0x00000088	[ 27] _emit_native_store_map
0x1000270A4	0x00000110	[ 27] _emit_native_store_comp
0x1000271B4	0x00000070	[ 27] _emit_native_unpack_sequence
0x100027224	0x00000080	[ 27] _emit_native_unpack_ex
0x1000272A4	0x000000B0	[ 27] _emit_native_make_function
0x100027354	0x00000110	[ 27] _emit_native_make_closure
0x100027464	0x000001BC	[ 27] _emit_native_call_function
0x100027620	0x00000088	[ 27] _emit_native_call_method
0x1000276A8	0x000001DC	[ 27] _emit_native_return_value
0x100027884	0x00000090	[ 27] _emit_native_raise_varargs
0x100027914	0x00000290	[ 27] _emit_native_yield
0x100027BA4	0x00000040	[ 27] _emit_native_start_except_handler
0x100027BE4	0x00000008	[ 27] _emit_native_end_except_handler
0x100027BEC	0x00000050	[ 27] _emit_call_with_imm_arg
0x100027C3C	0x00000020	[ 27] _emit_native_mov_state_reg
0x100027C5C	0x00000350	[ 27] _emit_native_global_exc_entry
0x100027FAC	0x00000078	[ 27] _need_reg_all
0x100028024	0x0000001C	[ 27] _emit_native_mov_reg_state
0x100028040	0x00000048	[ 27] _ensure_extra_stack
0x100028088	0x00000054	[ 27] _adjust_stack
0x1000280DC	0x000000C8	[ 27] _emit_native_load_fast
0x1000281A4	0x00000054	[ 27] _emit_post_push_reg
0x1000281F8	0x0000009C	[ 27] _need_reg_single
0x100028294	0x0000008C	[ 27] _emit_pre_pop_reg_flexible
0x100028320	0x000000D8	[ 27] _emit_access_stack
0x1000283F8	0x000000C4	[ 27] _load_reg_stack_imm
0x1000284BC	0x00000054	[ 27] _emit_post_push_imm
0x100028510	0x0000006C	[ 27] _emit_call_with_qstr_arg
0x10002857C	0x00000140	[ 27] _emit_native_store_fast
0x1000286BC	0x00000094	[ 27] _need_stack_settled
0x100028750	0x00000098	[ 27] _emit_native_leave_exc_stack
0x1000287E8	0x00000064	[ 27] _emit_pre_pop_reg_reg
0x10002884C	0x00000080	[ 27] _emit_load_reg_with_object
0x1000288CC	0x00000144	[ 27] _emit_get_stack_pointer_to_reg_for_pop
0x100028A10	0x00000080	[ 27] _emit_get_stack_pointer_to_reg_for_push
0x100028A90	0x00000058	[ 27] _emit_native_mov_reg_state_addr
0x100028AE8	0x00000094	[ 27] _emit_pre_pop_reg_reg_reg
0x100028B7C	0x000001A8	[ 27] _emit_native_jump_helper
0x100028D24	0x0000009C	[ 27] _emit_native_push_exc_stack
0x100028DC0	0x00000060	[ 27] _emit_call_with_2_imm_args
0x100028E20	0x0000007C	[ 27] _emit_load_reg_with_child
0x100028E9C	0x00000068	[ 27] _emit_fold_stack_top
0x100028F04	0x0000000C	[ 28] _asm_xtensa_end_pass
0x100028F10	0x0000014C	[ 28] _asm_xtensa_entry
0x10002905C	0x000000FC	[ 28] _asm_xtensa_exit
0x100029158	0x000000D0	[ 28] _asm_xtensa_entry_win
0x100029228	0x00000048	[ 28] _asm_xtensa_exit_win
0x100029270	0x0000002C	[ 28] _asm_xtensa_op16
0x10002929C	0x0000003C	[ 28] _asm_xtensa_op24
0x1000292D8	0x00000068	[ 28] _asm_xtensa_j_label
0x100029340	0x000000B8	[ 28] _asm_xtensa_bccz_reg_label
0x1000293F8	0x000000C4	[ 28] _asm_xtensa_bcc_reg_reg_label
0x1000294BC	0x000000B0	[ 28] _asm_xtensa_setcc_reg_reg_reg
0x10002956C	0x000000AC	[ 28] _asm_xtensa_mov_reg_i32
0x100029618	0x00000078	[ 28] _asm_xtensa_mov_reg_i32_optimised
0x100029690	0x00000050	[ 28] _asm_xtensa_mov_local_reg
0x1000296E0	0x00000050	[ 28] _asm_xtensa_mov_reg_local
0x100029730	0x000000C4	[ 28] _asm_xtensa_mov_reg_local_addr
0x1000297F4	0x000000F0	[ 28] _asm_xtensa_mov_reg_pcrel
0x1000298E4	0x000000B8	[ 28] _asm_xtensa_l32i_optimised
0x10002999C	0x000000B8	[ 28] _asm_xtensa_s32i_optimised
0x100029A54	0x00000048	[ 28] _asm_xtensa_call_ind
0x100029A9C	0x00000048	[ 28] _asm_xtensa_call_ind_win
0x100029AE4	0x00000008	[ 28] _OUTLINED_FUNCTION_0
0x100029AEC	0x00000088	[ 29] _emit_native_xtensa_new
0x100029B74	0x0000004C	[ 29] _emit_native_xtensa_free
0x100029BC0	0x00000734	[ 29] _emit_native_start_pass
0x10002A2F4	0x00000448	[ 29] _emit_native_end_pass
0x10002A73C	0x00000074	[ 29] _emit_native_adjust_stack_size
0x10002A7B0	0x00000004	[ 29] _emit_native_set_source_line
0x10002A7B4	0x000000B8	[ 29] _emit_native_load_local
0x10002A86C	0x00000084	[ 29] _emit_native_load_global
0x10002A8F0	0x000000E8	[ 29] _emit_native_store_local
0x10002A9D8	0x000000FC	[ 29] _emit_native_store_global
0x10002AAD4	0x0000004C	[ 29] _emit_native_delete_local
0x10002AB20	0x00000014	[ 29] _emit_native_delete_global
0x10002AB34	0x000000B8	[ 29] _emit_native_label_assign
0x10002ABEC	0x00000114	[ 29] _emit_native_import
0x10002AD00	0x00000038	[ 29] _emit_native_load_const_tok
0x10002AD38	0x0000000C	[ 29] _emit_native_load_const_small_int
0x10002AD44	0x00000054	[ 29] _emit_native_load_const_str
0x10002AD98	0x00000044	[ 29] _emit_native_load_const_obj
0x10002ADDC	0x0000000C	[ 29] _emit_native_load_null
0x10002ADE8	0x000000AC	[ 29] _emit_native_load_method
0x10002AE94	0x00000038	[ 29] _emit_native_load_build_class
0x10002AECC	0x0000092C	[ 29] _emit_native_subscr
0x10002B7F8	0x00000184	[ 29] _emit_native_attr
0x10002B97C	0x00000068	[ 29] _emit_native_dup_top
0x10002B9E4	0x00000080	[ 29] _emit_native_dup_top_two
0x10002BA64	0x00000008	[ 29] _emit_native_pop_top
0x10002BA6C	0x00000054	[ 29] _emit_native_rot_two
0x10002BAC0	0x00000078	[ 29] _emit_native_rot_three
0x10002BB38	0x0000003C	[ 29] _emit_native_jump
0x10002BB74	0x00000008	[ 29] _emit_native_pop_jump_if
0x10002BB7C	0x00000008	[ 29] _emit_native_jump_if_or_pop
0x10002BB84	0x00000144	[ 29] _emit_native_unwind_jump
0x10002BCC8	0x000001A0	[ 29] _emit_native_setup_block
0x10002BE68	0x000001F0	[ 29] _emit_native_with_cleanup
0x10002C058	0x00000110	[ 29] _emit_native_end_finally
0x10002C168	0x000000B4	[ 29] _emit_native_get_iter
0x10002C21C	0x0000006C	[ 29] _emit_native_for_iter
0x10002C288	0x00000008	[ 29] _emit_native_for_iter_end
0x10002C290	0x00000074	[ 29] _emit_native_pop_except_jump
0x10002C304	0x000000B4	[ 29] _emit_native_unary_op
0x10002C3B8	0x0000045C	[ 29] _emit_native_binary_op
0x10002C814	0x00000134	[ 29] _emit_native_build
0x10002C948	0x00000084	[ 29] _emit_native_store_map
0x10002C9CC	0x0000010C	[ 29] _emit_native_store_comp
0x10002CAD8	0x00000070	[ 29] _emit_native_unpack_sequence
0x10002CB48	0x00000080	[ 29] _emit_native_unpack_ex
0x10002CBC8	0x000000AC	[ 29] _emit_native_make_function
0x10002CC74	0x00000108	[ 29] _emit_native_make_closure
0x10002CD7C	0x000001BC	[ 29] _emit_native_call_function
0x10002CF38	0x00000088	[ 29] _emit_native_call_method
0x10002CFC0	0x000001D8	[ 29] _emit_native_return_value
0x10002D198	0x0000008C	[ 29] _emit_native_raise_varargs
0x10002D224	0x0000027C	[ 29] _emit_native_yield
0x10002D4A0	0x00000040	[ 29] _emit_native_start_except_handler
0x10002D4E0	0x00000008	[ 29] _emit_native_end_except_handler
0x10002D4E8	0x0000004C	[ 29] _emit_call_with_imm_arg
0x10002D534	0x00000024	[ 29] _emit_native_mov_state_reg
0x10002D558	0x00000300	[ 29] _emit_native_global_exc_entry
0x10002D858	0x00000078	[ 29] _need_reg_all
0x10002D8D0	0x00000020	[ 29] _emit_native_mov_reg_state
0x10002D8F0	0x00000048	[ 29] _ensure_extra_stack
0x10002D938	0x00000054	[ 29] _adjust_stack
0x10002D98C	0x000000CC	[ 29] _emit_native_load_fast
0x10002DA58	0x00000054	[ 29] _emit_post_push_reg
0x10002DAAC	0x0000009C	[ 29] _need_reg_single
0x10002DB48	0x0000008C	[ 29] _emit_pre_pop_reg_flexible
0x10002DBD4	0x000000E8	[ 29] _emit_access_stack
0x10002DCBC	0x000000C0	[ 29] _load_reg_stack_imm
0x10002DD7C	0x00000054	[ 29] _emit_post_push_imm
0x10002DDD0	0x0000006C	[ 29] _emit_call_with_qstr_arg
0x10002DE3C	0x00000140	[ 29] _emit_native_store_fast
0x10002DF7C	0x00000094	[ 29] _need_stack_settled
0x10002E010	0x00000094	[ 29] _emit_native_leave_exc_stack
0x10002E0A4	0x00000064	[ 29] _emit_pre_pop_reg_reg
0x10002E108	0x00000080	[ 29] _emit_load_reg_with_object
0x10002E188	0x00000144	[ 29] _emit_get_stack_pointer_to_reg_for_pop
0x10002E2CC	0x00000080	[ 29] _emit_get_stack_pointer_to_reg_for_push
0x10002E34C	0x00000064	[ 29] _emit_native_mov_reg_state_addr
0x10002E3B0	0x00000094	[ 29] _emit_pre_pop_reg_reg_reg
0x10002E444	0x0000017C	[ 29] _emit_native_jump_helper
0x10002E5C0	0x0000009C	[ 29] _emit_native_push_exc_stack
0x10002E65C	0x0000005C	[ 29] _emit_call_with_2_imm_args
0x10002E6B8	0x0000007C	[ 29] _emit_load_reg_with_child
0x10002E734	0x00000068	[ 29] _emit_fold_stack_top
0x10002E79C	0x00000054	[ 30] _emit_inline_xtensa_new
0x10002E7F0	0x00000034	[ 30] _emit_inline_xtensa_free
0x10002E824	0x0000005C	[ 30] _emit_inline_xtensa_start_pass
0x10002E880	0x00000024	[ 30] _emit_inline_xtensa_end_pass
0x10002E8A4	0x000000C8	[ 30] _emit_inline_xtensa_count_params
0x10002E96C	0x00000060	[ 30] _emit_inline_xtensa_label
0x10002E9CC	0x00000338	[ 30] _emit_inline_xtensa_op
0x10002ED04	0x000000D8	[ 30] _get_arg_reg
0x10002EDDC	0x000000B0	[ 30] _get_arg_label
0x10002EE8C	0x000000A8	[ 30] _get_arg_i
0x10002EF34	0x00000088	[ 31] _emit_native_xtensawin_new
0x10002EFBC	0x0000004C	[ 31] _emit_native_xtensawin_free
0x10002F008	0x00000754	[ 31] _emit_native_start_pass
0x10002F75C	0x00000448	[ 31] _emit_native_end_pass
0x10002FBA4	0x00000074	[ 31] _emit_native_adjust_stack_size
0x10002FC18	0x00000004	[ 31] _emit_native_set_source_line
0x10002FC1C	0x000000B8	[ 31] _emit_native_load_local
0x10002FCD4	0x00000084	[ 31] _emit_native_load_global
0x10002FD58	0x000000E8	[ 31] _emit_native_store_local
0x10002FE40	0x000000FC	[ 31] _emit_native_store_global
0x10002FF3C	0x0000004C	[ 31] _emit_native_delete_local
0x10002FF88	0x00000014	[ 31] _emit_native_delete_global
0x10002FF9C	0x000000B8	[ 31] _emit_native_label_assign
0x100030054	0x00000114	[ 31] _emit_native_import
0x100030168	0x00000038	[ 31] _emit_native_load_const_tok
0x1000301A0	0x0000000C	[ 31] _emit_native_load_const_small_int
0x1000301AC	0x00000048	[ 31] _emit_native_load_const_str
0x1000301F4	0x00000044	[ 31] _emit_native_load_const_obj
0x100030238	0x0000000C	[ 31] _emit_native_load_null
0x100030244	0x000000AC	[ 31] _emit_native_load_method
0x1000302F0	0x00000038	[ 31] _emit_native_load_build_class
0x100030328	0x0000092C	[ 31] _emit_native_subscr
0x100030C54	0x00000184	[ 31] _emit_native_attr
0x100030DD8	0x00000068	[ 31] _emit_native_dup_top
0x100030E40	0x00000080	[ 31] _emit_native_dup_top_two
0x100030EC0	0x00000008	[ 31] _emit_native_pop_top
0x100030EC8	0x00000054	[ 31] _emit_native_rot_two
0x100030F1C	0x00000078	[ 31] _emit_native_rot_three
0x100030F94	0x0000003C	[ 31] _emit_native_jump
0x100030FD0	0x00000008	[ 31] _emit_native_pop_jump_if
0x100030FD8	0x00000008	[ 31] _emit_native_jump_if_or_pop
0x100030FE0	0x00000144	[ 31] _emit_native_unwind_jump
0x100031124	0x000001A0	[ 31] _emit_native_setup_block
0x1000312C4	0x000001F0	[ 31] _emit_native_with_cleanup
0x1000314B4	0x00000110	[ 31] _emit_native_end_finally
0x1000315C4	0x000000B4	[ 31] _emit_native_get_iter
0x100031678	0x0000006C	[ 31] _emit_native_for_iter
0x1000316E4	0x00000008	[ 31] _emit_native_for_iter_end
0x1000316EC	0x00000074	[ 31] _emit_native_pop_except_jump
0x100031760	0x000000B4	[ 31] _emit_native_unary_op
0x100031814	0x0000045C	[ 31] _emit_native_binary_op
0x100031C70	0x00000134	[ 31] _emit_native_build
0x100031DA4	0x00000084	[ 31] _emit_native_store_map
0x100031E28	0x0000010C	[ 31] _emit_native_store_comp
0x100031F34	0x00000070	[ 31] _emit_native_unpack_sequence
0x100031FA4	0x00000080	[ 31] _emit_native_unpack_ex
0x100032024	0x000000AC	[ 31] _emit_native_make_function
0x1000320D0	0x00000108	[ 31] _emit_native_make_closure
0x1000321D8	0x000001BC	[ 31] _emit_native_call_function
0x100032394	0x00000088	[ 31] _emit_native_call_method
0x10003241C	0x000001FC	[ 31] _emit_native_return_value
0x100032618	0x0000008C	[ 31] _emit_native_raise_varargs
0x1000326A4	0x0000027C	[ 31] _emit_native_yield
0x100032920	0x00000040	[ 31] _emit_native_start_except_handler
0x100032960	0x00000008	[ 31] _emit_native_end_except_handler
0x100032968	0x0000004C	[ 31] _emit_call_with_imm_arg
0x1000329B4	0x00000024	[ 31] _emit_native_mov_state_reg
0x1000329D8	0x00000348	[ 31] _emit_native_global_exc_entry
0x100032D20	0x00000078	[ 31] _need_reg_all
0x100032D98	0x00000020	[ 31] _emit_native_mov_reg_state
0x100032DB8	0x00000048	[ 31] _ensure_extra_stack
0x100032E00	0x00000054	[ 31] _adjust_stack
0x100032E54	0x000000CC	[ 31] _emit_native_load_fast
0x100032F20	0x00000054	[ 31] _emit_post_push_reg
0x100032F74	0x0000009C	[ 31] _need_reg_single
0x100033010	0x0000008C	[ 31] _emit_pre_pop_reg_flexible
0x10003309C	0x000000E8	[ 31] _emit_access_stack
0x100033184	0x000000C0	[ 31] _load_reg_stack_imm
0x100033244	0x00000054	[ 31] _emit_post_push_imm
0x100033298	0x0000006C	[ 31] _emit_call_with_qstr_arg
0x100033304	0x00000140	[ 31] _emit_native_store_fast
0x100033444	0x00000094	[ 31] _need_stack_settled
0x1000334D8	0x00000094	[ 31] _emit_native_leave_exc_stack
0x10003356C	0x00000064	[ 31] _emit_pre_pop_reg_reg
0x1000335D0	0x00000080	[ 31] _emit_load_reg_with_object
0x100033650	0x00000144	[ 31] _emit_get_stack_pointer_to_reg_for_pop
0x100033794	0x00000080	[ 31] _emit_get_stack_pointer_to_reg_for_push
0x100033814	0x00000064	[ 31] _emit_native_mov_reg_state_addr
0x100033878	0x00000094	[ 31] _emit_pre_pop_reg_reg_reg
0x10003390C	0x0000017C	[ 31] _emit_native_jump_helper
0x100033A88	0x0000009C	[ 31] _emit_native_push_exc_stack
0x100033B24	0x0000005C	[ 31] _emit_call_with_2_imm_args
0x100033B80	0x0000007C	[ 31] _emit_load_reg_with_child
0x100033BFC	0x00000068	[ 31] _emit_fold_stack_top
0x100033C64	0x0000061C	[ 32] _mp_format_float
0x100034280	0x000000E8	[ 33] _mp_parse_num_base
0x100034368	0x00000228	[ 34] _mp_parse_num_integer
0x100034590	0x00000064	[ 34] _mp_obj_new_exception_arg1
0x1000345F4	0x00000040	[ 34] _raise_exc
0x100034634	0x000004D4	[ 34] _mp_parse_num_decimal
0x100034B08	0x00000028	[ 35] _mp_emit_glue_new_raw_code
0x100034B30	0x00000020	[ 35] _mp_emit_glue_assign_bytecode
0x100034B50	0x00000054	[ 35] _mp_emit_glue_assign_native
0x100034BA4	0x00000240	[ 36] _mp_raw_code_save
0x100034DE4	0x00000084	[ 36] _mp_print_uint
0x100034E68	0x000002F0	[ 36] _save_obj
0x100035158	0x00000248	[ 36] _save_raw_code
0x1000353A0	0x0000007C	[ 36] _mp_raw_code_save_file
0x10003541C	0x00000004	[ 36] _fd_print_strn
0x100035420	0x00000064	[ 37] _mp_init
0x100035484	0x00000004	[ 37] _mp_deinit
0x100035488	0x00000020	[ 37] _mp_raise_msg_varg
0x1000354A8	0x00000228	[ 37] _mp_unary_op
0x1000356D0	0x00000514	[ 37] _mp_binary_op
0x100035BE4	0x00000018	[ 37] _mp_raise_ValueError
0x100035BFC	0x00000138	[ 37] _mp_getiter
0x100035D34	0x0000015C	[ 37] _mp_iternext
0x100035E90	0x0000001C	[ 37] _mp_raise_msg
0x100035EAC	0x00000080	[ 37] _mp_call_function_n_kw
0x100035F2C	0x0000002C	[ 37] _mp_call_function_1
0x100035F58	0x0000002C	[ 37] _mp_call_method_n_kw
0x100035F84	0x000000CC	[ 37] _mp_convert_member_lookup
0x100036050	0x00000104	[ 37] _mp_load_method_maybe
0x100036154	0x00000100	[ 37] _mp_iternext_allow_raise
0x100036254	0x00000054	[ 37] _type_get_iternext
0x1000362A8	0x00000048	[ 37] _m_malloc_fail
0x1000362F0	0x00000018	[ 37] _mp_raise_TypeError
0x100036308	0x00000018	[ 37] _mp_raise_NotImplementedError
0x100036320	0x00000010	[ 37] _mp_raise_type_arg
0x100036330	0x00000054	[ 37] _mp_obj_new_exception_arg1
0x100036384	0x00000028	[ 37] _mp_raise_StopIteration
0x1000363AC	0x00000020	[ 37] _mp_raise_OSError
0x1000363CC	0x0000006C	[ 37] _mp_raise_OSError_with_filename
0x100036438	0x00000018	[ 37] _mp_raise_recursion_depth
0x100036450	0x00000080	[ 37] _checked_fun_call
0x1000364D0	0x00000094	[ 38] _mp_native_type_from_qstr
0x100036564	0x0000001C	[ 39] _mp_stack_ctrl_init
0x100036580	0x00000010	[ 39] _mp_stack_set_limit
0x100036590	0x00000038	[ 39] _mp_stack_check
0x1000365C8	0x0000009C	[ 40] _mp_arg_check_num_sig
0x100036664	0x00000168	[ 40] _mp_arg_parse_all
0x1000367CC	0x0000006C	[ 40] _mp_arg_parse_all_kw_array
0x100036838	0x00000014	[ 40] _mp_arg_error_unimpl_kw
0x10003684C	0x00000044	[ 42] _mp_map_init
0x100036890	0x00000014	[ 42] _mp_map_init_fixed_table
0x1000368A4	0x00000038	[ 42] _mp_map_deinit
0x1000368DC	0x00000040	[ 42] _mp_map_clear
0x10003691C	0x00000250	[ 42] _mp_map_lookup
0x100036B6C	0x000000D4	[ 42] _mp_map_rehash
0x100036C40	0x00000024	[ 43] _mp_obj_malloc_helper
0x100036C64	0x00000020	[ 43] _mp_obj_get_type
0x100036C84	0x00000024	[ 43] _mp_obj_get_type_str
0x100036CA8	0x000000C4	[ 43] _mp_obj_print_helper
0x100036D6C	0x00000134	[ 43] _mp_obj_print_exception
0x100036EA0	0x000000A8	[ 43] _mp_obj_is_true
0x100036F48	0x0000009C	[ 43] _mp_obj_len_maybe
0x100036FE4	0x000001D8	[ 43] _mp_obj_equal_not_equal
0x1000371BC	0x00000020	[ 43] _mp_obj_equal
0x1000371DC	0x00000070	[ 43] _mp_obj_get_int
0x10003724C	0x00000028	[ 43] _mp_obj_get_int_truncated
0x100037274	0x00000078	[ 43] _mp_obj_get_int_maybe
0x1000372EC	0x000000D0	[ 43] _mp_obj_get_float_maybe
0x1000373BC	0x00000054	[ 43] _mp_obj_get_float
0x100037410	0x000000B0	[ 43] _mp_obj_get_complex_maybe
0x1000374C0	0x0000004C	[ 43] _mp_obj_get_complex
0x10003750C	0x0000006C	[ 43] _mp_obj_get_array
0x100037578	0x000000C4	[ 43] _mp_get_index
0x10003763C	0x000000CC	[ 43] _mp_obj_subscr
0x100037708	0x00000054	[ 43] _mp_get_buffer
0x10003775C	0x00000054	[ 43] _mp_get_buffer_raise
0x1000377B0	0x000000D0	[ 44] _array_append
0x100037880	0x000000D8	[ 44] _array_extend
0x100037958	0x000001E4	[ 44] _bytearray_make_new
0x100037B3C	0x000000FC	[ 44] _array_print
0x100037C38	0x00000018	[ 44] _array_iterator_new
0x100037C50	0x00000040	[ 44] _array_unary_op
0x100037C90	0x00000260	[ 44] _array_binary_op
0x100037EF0	0x00000124	[ 44] _array_subscr
0x100038014	0x00000048	[ 44] _array_get_buffer
0x10003805C	0x0000004C	[ 44] _mp_obj_new_bytearray
0x1000380A8	0x00000070	[ 44] _array_new
0x100038118	0x0000003C	[ 44] _mp_obj_new_bytearray_by_ref
0x100038154	0x0000003C	[ 44] _array_it_iternext
0x100038190	0x00000054	[ 45] _bool_make_new
0x1000381E4	0x0000001C	[ 45] _bool_print
0x100038200	0x00000020	[ 45] _bool_unary_op
0x100038220	0x00000010	[ 45] _bool_binary_op
0x100038230	0x00000118	[ 46] _mp_call_method_self_n_kw
0x100038348	0x0000014C	[ 47] _complex_make_new
0x100038494	0x00000108	[ 47] _complex_print
0x10003859C	0x000000D4	[ 47] _complex_unary_op
0x100038670	0x0000000C	[ 47] _complex_binary_op
0x10003867C	0x0000004C	[ 47] _complex_attr
0x1000386C8	0x00000034	[ 47] _mp_obj_new_complex
0x1000386FC	0x00000040	[ 47] _mp_obj_complex_get
0x10003873C	0x00000208	[ 47] _mp_obj_complex_binary_op
0x100038944	0x0000003C	[ 48] _mp_obj_is_dict_or_ordereddict
0x100038980	0x000000C4	[ 48] _mp_obj_dict_make_new
0x100038A44	0x000001C0	[ 48] _dict_update
0x100038C04	0x00000040	[ 48] _mp_obj_dict_get
0x100038C44	0x0000009C	[ 48] _mp_obj_dict_copy
0x100038CE0	0x000000D0	[ 48] _dict_print
0x100038DB0	0x00000040	[ 48] _dict_unary_op
0x100038DF0	0x00000158	[ 48] _dict_binary_op
0x100038F48	0x000000AC	[ 48] _dict_subscr
0x100038FF4	0x00000020	[ 48] _dict_getiter
0x100039014	0x00000010	[ 48] _mp_obj_dict_init
0x100039024	0x00000040	[ 48] _mp_obj_dict_store
0x100039064	0x000000AC	[ 48] _dict_get_helper
0x100039110	0x0000007C	[ 48] _dict_iter_next
0x10003918C	0x00000098	[ 48] _dict_view_it_iternext
0x100039224	0x00000028	[ 48] _dict_clear
0x10003924C	0x000000C4	[ 48] _dict_fromkeys
0x100039310	0x00000008	[ 48] _dict_get
0x100039318	0x00000034	[ 48] _dict_items
0x10003934C	0x000000CC	[ 48] _dict_view_print
0x100039418	0x00000028	[ 48] _dict_view_unary_op
0x100039440	0x00000050	[ 48] _dict_view_binary_op
0x100039490	0x00000024	[ 48] _dict_view_getiter
0x1000394B4	0x00000038	[ 48] _dict_keys
0x1000394EC	0x00000008	[ 48] _dict_pop
0x1000394F4	0x000000B8	[ 48] _dict_popitem
0x1000395AC	0x00000008	[ 48] _dict_setdefault
0x1000395B4	0x00000038	[ 48] _dict_values
0x1000395EC	0x00000060	[ 50] _mp_obj_is_native_exception_instance
0x10003964C	0x000000AC	[ 50] _mp_obj_exception_make_new
0x1000396F8	0x000000D8	[ 50] _mp_obj_exception_print
0x1000397D0	0x0000002C	[ 50] _mp_obj_exception_get_value
0x1000397FC	0x00000040	[ 50] _get_native_exception
0x10003983C	0x00000088	[ 50] _mp_obj_exception_attr
0x1000398C4	0x00000080	[ 50] _mp_obj_new_exception
0x100039944	0x000000E4	[ 50] _mp_obj_new_exception_msg
0x100039A28	0x00000028	[ 50] _mp_obj_new_exception_msg_varg
0x100039A50	0x00000164	[ 50] _mp_obj_new_exception_msg_vlist
0x100039BB4	0x000000A0	[ 50] _exc_add_strn
0x100039C54	0x00000054	[ 50] _mp_obj_is_exception_type
0x100039CA8	0x00000014	[ 50] _mp_obj_is_exception_instance
0x100039CBC	0x00000040	[ 50] _mp_obj_exception_match
0x100039CFC	0x000000B4	[ 50] _mp_obj_exception_add_traceback
0x100039DB0	0x00000040	[ 50] _mp_obj_exception_get_traceback
0x100039DF0	0x000000C0	[ 52] _float_make_new
0x100039EB0	0x000000BC	[ 52] _float_print
0x100039F6C	0x000000AC	[ 52] _float_unary_op
0x10003A018	0x00000064	[ 52] _float_binary_op
0x10003A07C	0x00000034	[ 52] _mp_obj_new_float
0x10003A0B0	0x00000034	[ 52] _mp_obj_float_get
0x10003A0E4	0x000002C0	[ 52] _mp_obj_float_binary_op
0x10003A3A4	0x000000D8	[ 52] _mp_obj_float_divmod
0x10003A47C	0x00000058	[ 53] _fun_builtin_1_call
0x10003A4D4	0x00000058	[ 53] _fun_builtin_2_call
0x10003A52C	0x0000005C	[ 53] _fun_builtin_3_call
0x10003A588	0x000000B4	[ 53] _fun_builtin_var_call
0x10003A63C	0x00000028	[ 55] _mp_obj_new_getitem_iter
0x10003A664	0x0000008C	[ 55] _it_iternext
0x10003A6F0	0x000000BC	[ 56] _mp_obj_new_int_from_float
0x10003A7AC	0x0000009C	[ 56] _mp_obj_int_print
0x10003A848	0x0000020C	[ 56] _mp_obj_int_formatted
0x10003AA54	0x00000088	[ 56] _mp_int_format_size
0x10003AADC	0x000000C8	[ 56] _mp_obj_int_binary_op_extra_cases
0x10003ABA4	0x0000014C	[ 56] _mp_obj_int_make_new
0x10003ACF0	0x000000A0	[ 56] _int_from_bytes
0x10003AD90	0x000000B8	[ 56] _int_to_bytes
0x10003AE48	0x00000038	[ 58] _mp_obj_int_new_mpz
0x10003AE80	0x000000DC	[ 58] _mp_obj_int_formatted_impl
0x10003AF5C	0x0000006C	[ 58] _mp_obj_int_from_bytes_impl
0x10003AFC8	0x00000034	[ 58] _mp_obj_int_to_bytes_impl
0x10003AFFC	0x0000003C	[ 58] _mp_obj_int_sign
0x10003B038	0x0000011C	[ 58] _mp_obj_int_unary_op
0x10003B154	0x00000404	[ 58] _mp_obj_int_binary_op
0x10003B558	0x0000004C	[ 58] _mp_obj_int_get_checked
0x10003B5A4	0x00000018	[ 58] _mp_obj_new_int
0x10003B5BC	0x00000058	[ 58] _mp_obj_new_int_from_ll
0x10003B614	0x00000058	[ 58] _mp_obj_new_int_from_ull
0x10003B66C	0x0000001C	[ 58] _mp_obj_new_int_from_uint
0x10003B688	0x00000080	[ 58] _mp_obj_new_int_from_str_len
0x10003B708	0x00000014	[ 58] _mp_obj_int_get_truncated
0x10003B71C	0x00000034	[ 58] _mp_obj_int_as_float_impl
0x10003B750	0x00000060	[ 59] _mp_obj_list_make_new
0x10003B7B0	0x00000064	[ 59] _mp_obj_new_list
0x10003B814	0x00000054	[ 59] _list_extend_from_iter
0x10003B868	0x00000074	[ 59] _mp_obj_list_append
0x10003B8DC	0x00000084	[ 59] _mp_obj_list_sort
0x10003B960	0x00000184	[ 59] _mp_quicksort
0x10003BAE4	0x00000070	[ 59] _mp_obj_list_remove
0x10003BB54	0x00000014	[ 59] _list_index
0x10003BB68	0x000000C8	[ 59] _list_pop
0x10003BC30	0x00000088	[ 59] _list_print
0x10003BCB8	0x00000040	[ 59] _list_unary_op
0x10003BCF8	0x00000184	[ 59] _list_binary_op
0x10003BE7C	0x000002C4	[ 59] _list_subscr
0x10003C140	0x00000020	[ 59] _list_getiter
0x10003C160	0x0000005C	[ 59] _mp_obj_list_init
0x10003C1BC	0x00000010	[ 59] _mp_obj_list_get
0x10003C1CC	0x000000C4	[ 59] _list_extend
0x10003C290	0x00000030	[ 59] _list_it_iternext
0x10003C2C0	0x00000044	[ 59] _list_clear
0x10003C304	0x0000000C	[ 59] _list_copy
0x10003C310	0x00000010	[ 59] _list_count
0x10003C320	0x00000084	[ 59] _list_insert
0x10003C3A4	0x00000054	[ 59] _list_reverse
0x10003C3F8	0x00000034	[ 62] _object_make_new
0x10003C42C	0x00000008	[ 62] _object___init__
0x10003C434	0x00000050	[ 62] _object___new__
0x10003C484	0x00000008	[ 63] _polymorph_it_iternext
0x10003C48C	0x00000094	[ 64] _property_make_new
0x10003C520	0x00000008	[ 64] _mp_obj_property_get
0x10003C528	0x00000034	[ 64] _property_getter
0x10003C55C	0x00000034	[ 64] _property_setter
0x10003C590	0x00000038	[ 64] _property_deleter
0x10003C5C8	0x0000000C	[ 65] _none_print
0x10003C5D4	0x0000002C	[ 70] _singleton_print
0x10003C600	0x00000008	[ 71] _slice_unary_op
0x10003C608	0x00000090	[ 71] _slice_print
0x10003C698	0x00000130	[ 71] _mp_obj_slice_indices
0x10003C7C8	0x000001E0	[ 72] _mp_str_print_quoted
0x10003C9A8	0x00000180	[ 72] _mp_obj_str_make_new
0x10003CB28	0x000000E4	[ 72] _mp_obj_new_str_type_from_vstr
0x10003CC0C	0x00000074	[ 72] _mp_obj_new_str_copy
0x10003CC80	0x00000070	[ 72] _mp_obj_new_str
0x10003CCF0	0x00000084	[ 72] _find_subbytes
0x10003CD74	0x00000988	[ 72] _mp_obj_str_binary_op
0x10003D6FC	0x0000003C	[ 72] _bad_implicit_conversion
0x10003D738	0x00000204	[ 72] _str_join
0x10003D93C	0x000002C8	[ 72] _mp_obj_str_split
0x10003DC04	0x00000040	[ 72] _mp_obj_new_str_of_type
0x10003DC44	0x00000058	[ 72] _str_check_arg_type
0x10003DC9C	0x00000088	[ 72] _mp_obj_str_get_data
0x10003DD24	0x000001E4	[ 72] _str_rsplit
0x10003DF08	0x0000000C	[ 72] _str_find
0x10003DF14	0x0000000C	[ 72] _str_rfind
0x10003DF20	0x0000000C	[ 72] _str_index
0x10003DF2C	0x0000000C	[ 72] _str_rindex
0x10003DF38	0x000000D8	[ 72] _str_startswith
0x10003E010	0x000000AC	[ 72] _str_endswith
0x10003E0BC	0x00000010	[ 72] _str_strip
0x10003E0CC	0x00000010	[ 72] _str_lstrip
0x10003E0DC	0x00000010	[ 72] _str_rstrip
0x10003E0EC	0x00000090	[ 72] _mp_obj_str_format
0x10003E17C	0x00000AA4	[ 72] _mp_obj_str_format_helper
0x10003EC20	0x000002FC	[ 72] _str_replace
0x10003EF1C	0x000001A4	[ 72] _str_count
0x10003F0C0	0x00000010	[ 72] _str_lower
0x10003F0D0	0x00000010	[ 72] _str_upper
0x10003F0E0	0x0000008C	[ 72] _str_isspace
0x10003F16C	0x0000008C	[ 72] _str_isalpha
0x10003F1F8	0x0000008C	[ 72] _str_isdigit
0x10003F284	0x000000C8	[ 72] _str_isupper
0x10003F34C	0x000000C8	[ 72] _str_islower
0x10003F414	0x0000007C	[ 72] _bytes_decode
0x10003F490	0x00000078	[ 72] _str_encode
0x10003F508	0x00000074	[ 72] _mp_obj_str_get_buffer
0x10003F57C	0x00000210	[ 72] _bytes_make_new
0x10003F78C	0x00000098	[ 72] _str_print
0x10003F824	0x000000E8	[ 72] _bytes_subscr
0x10003F90C	0x00000020	[ 72] _mp_obj_new_bytes_iterator
0x10003F92C	0x00000014	[ 72] _mp_obj_new_bytes
0x10003F940	0x00000020	[ 72] _mp_obj_new_str_via_qstr
0x10003F960	0x00000048	[ 72] _mp_obj_new_str_from_vstr
0x10003F9A8	0x00000010	[ 72] _mp_obj_new_str_from_utf8_vstr
0x10003F9B8	0x00000010	[ 72] _mp_obj_new_bytes_from_vstr
0x10003F9C8	0x00000108	[ 72] _mp_obj_str_equal
0x10003FAD0	0x00000050	[ 72] _mp_obj_str_get_qstr
0x10003FB20	0x0000018C	[ 72] _str_finder
0x10003FCAC	0x000001D4	[ 72] _str_uni_strip
0x10003FE80	0x000000A8	[ 72] _str_caseconv
0x10003FF28	0x00000078	[ 72] _bytes_it_iternext
0x10003FFA0	0x00000140	[ 73] _str_index_to_ptr
0x1000400E0	0x00000248	[ 73] _uni_print
0x100040328	0x0000008C	[ 73] _uni_unary_op
0x1000403B4	0x00000188	[ 73] _str_subscr
0x10004053C	0x00000020	[ 73] _mp_obj_new_str_iterator
0x10004055C	0x00000094	[ 73] _str_it_iternext
0x1000405F0	0x000000A8	[ 75] _mp_obj_tuple_print
0x100040698	0x000000B8	[ 75] _mp_obj_tuple_unary_op
0x100040750	0x000001E8	[ 75] _mp_obj_tuple_binary_op
0x100040938	0x00000068	[ 75] _mp_obj_new_tuple
0x1000409A0	0x000000EC	[ 75] _mp_obj_tuple_subscr
0x100040A8C	0x00000100	[ 75] _mp_obj_tuple_make_new
0x100040B8C	0x00000020	[ 75] _mp_obj_tuple_getiter
0x100040BAC	0x0000007C	[ 75] _mp_obj_tuple_get
0x100040C28	0x00000030	[ 75] _tuple_it_iternext
0x100040C58	0x00000014	[ 75] _tuple_count
0x100040C6C	0x00000018	[ 75] _tuple_index
0x100040C84	0x00000068	[ 76] _mp_obj_new_instance
0x100040CEC	0x000000E4	[ 76] _instance_count_native_bases
0x100040DD0	0x000000EC	[ 76] _mp_obj_instance_call
0x100040EBC	0x000000F8	[ 76] _mp_obj_instance_getiter
0x100040FB4	0x00000218	[ 76] _mp_obj_class_lookup
0x1000411CC	0x0000006C	[ 76] _type_make_new
0x100041238	0x0000002C	[ 76] _type_print
0x100041264	0x00000048	[ 76] _type_call
0x1000412AC	0x00000214	[ 76] _type_attr
0x1000414C0	0x0000030C	[ 76] _mp_obj_new_type
0x1000417CC	0x00000248	[ 76] _mp_obj_instance_make_new
0x100041A14	0x00000148	[ 76] _instance_print
0x100041B5C	0x00000134	[ 76] _instance_unary_op
0x100041C90	0x000000F0	[ 76] _instance_binary_op
0x100041D80	0x00000274	[ 76] _mp_obj_instance_attr
0x100041FF4	0x000000F8	[ 76] _instance_subscr
0x1000420EC	0x000000C4	[ 76] _instance_get_buffer
0x1000421B0	0x00000060	[ 76] _static_class_method_make_new
0x100042210	0x000000C0	[ 76] _mp_obj_is_subclass_fast
0x1000422D0	0x00000048	[ 76] _mp_obj_cast_to_native_base
0x100042318	0x0000006C	[ 76] _native_base_init_wrapper
0x100042384	0x0000003C	[ 78] _op_getitem
0x1000423C0	0x00000048	[ 78] _op_setitem
0x100042408	0x0000003C	[ 78] _op_delitem
0x100042444	0x00000050	[ 79] _mp_seq_multiply
0x100042494	0x0000006C	[ 79] _mp_seq_get_fast_slice_indexes
0x100042500	0x0000008C	[ 79] _mp_seq_extract_slice
0x10004258C	0x000000B8	[ 79] _mp_seq_cmp_bytes
0x100042644	0x000000E4	[ 79] _mp_seq_cmp_objs
0x100042728	0x000000DC	[ 79] _mp_seq_index_obj
0x100042804	0x0000005C	[ 79] _mp_seq_count_obj
0x100042860	0x000000F0	[ 80] _stream_unbuffered_readline
0x100042950	0x00000040	[ 80] _mp_stream_unbuffered_iter
0x100042990	0x00000138	[ 81] _mp_binary_get_size
0x100042AC8	0x000000C8	[ 81] _mp_binary_get_val_array
0x100042B90	0x00000054	[ 81] _mp_binary_set_int
0x100042BE4	0x000000E4	[ 81] _mp_binary_set_val_array
0x100042CC8	0x00000098	[ 81] _mp_binary_set_val_array_from_int
0x100042D60	0x00000028	[ 86] _mp_builtin_next
0x100042D88	0x000000C8	[ 98] _mp_encode_uint
0x100042E50	0x0000007C	[101] _mp_small_int_mul_overflow
0x100042ECC	0x00000028	[101] _mp_small_int_modulo
0x100042EF4	0x00000028	[101] _mp_small_int_floor_divide
0x100042F1C	0x000006B8	[103] _main_
0x1000435D4	0x00000050	[103] _usage
0x100043624	0x0000002C	[103] _main
0x100043650	0x00000034	[103] _nlr_jump_fail
0x100043684	0x00000008	[103] _stderr_print_strn
0x10004368C	0x00000018	[104] _gc_collect
0x1000436A4	0x00000074	[105] _gc_helper_collect_regs_and_stack
0x100043718	0x00000014	[105] _gc_helper_get_regs
0x10004372C	0x00000028	[  5] _gc_mark_subtree.cold.1
0x100043754	0x00000028	[  5] _gc_collect_end.cold.1
0x10004377C	0x00000028	[  5] _gc_free.cold.1
0x1000437A4	0x00000028	[  5] _gc_free.cold.2
0x1000437CC	0x00000028	[  5] _gc_realloc.cold.1
0x1000437F4	0x00000028	[  5] _gc_realloc.cold.2
0x10004381C	0x00000028	[  5] _gc_realloc.cold.3
0x100043844	0x00000028	[  6] _find_qstr.cold.1
0x10004386C	0x00000028	[  7] _vstr_add_char.cold.1
0x100043894	0x00000028	[  8] _mp_print_mp_int.cold.1
0x1000438BC	0x00000028	[  8] _mp_vprintf.cold.1
0x1000438E4	0x00000028	[ 10] _mpz_need_dig.cold.1
0x10004390C	0x00000028	[ 10] _mpz_set_from_str.cold.1
0x100043934	0x00000028	[ 10] _mpz_or_inpl.cold.1
0x10004395C	0x00000028	[ 10] _mpz_clone.cold.1
0x100043984	0x00000028	[ 10] _mpz_divmod_inpl.cold.1
0x1000439AC	0x00000028	[ 10] _mpz_as_str_inpl.cold.1
0x1000439D4	0x00000028	[ 10] _mpz_as_str_inpl.cold.2
0x1000439FC	0x00000028	[ 13] _mp_parse.cold.1
0x100043A24	0x00000028	[ 13] _mp_parse.cold.2
0x100043A4C	0x00000028	[ 13] _mp_parse.cold.3
0x100043A74	0x00000028	[ 13] _mp_parse.cold.4
0x100043A9C	0x00000024	[ 13] _mp_parse.cold.5
0x100043AC0	0x00000028	[ 13] _mp_parse.cold.6
0x100043AE8	0x00000024	[ 13] _mp_parse.cold.7
0x100043B0C	0x00000024	[ 13] _mp_parse.cold.8
0x100043B30	0x00000028	[ 13] _mp_parse.cold.9
0x100043B58	0x00000028	[ 13] _mp_parse.cold.10
0x100043B80	0x00000028	[ 13] _mp_parse.cold.11
0x100043BA8	0x00000028	[ 13] _push_rule_from_arg.cold.1
0x100043BD0	0x00000028	[ 13] _pop_result.cold.1
0x100043BF8	0x00000028	[ 13] _push_result_rule.cold.1
0x100043C20	0x00000028	[ 13] _push_result_rule.cold.2
0x100043C48	0x00000024	[ 13] _push_result_rule.cold.3
0x100043C6C	0x00000024	[ 13] _push_result_rule.cold.4
0x100043C90	0x00000024	[ 13] _push_result_rule.cold.5
0x100043CB4	0x00000024	[ 13] _push_result_rule.cold.6
0x100043CD8	0x00000024	[ 13] _push_result_rule.cold.7
0x100043CFC	0x00000024	[ 13] _push_result_rule.cold.8
0x100043D20	0x00000028	[ 13] _push_result_rule.cold.9
0x100043D48	0x00000024	[ 13] _push_result_rule.cold.10
0x100043D6C	0x00000024	[ 13] _push_result_rule.cold.11
0x100043D90	0x00000028	[ 13] _push_result_rule.cold.12
0x100043DB8	0x00000024	[ 13] _push_result_rule.cold.13
0x100043DDC	0x00000028	[ 13] _push_result_rule.cold.14
0x100043E04	0x00000024	[ 13] _push_result_rule.cold.15
0x100043E28	0x00000024	[ 13] _push_result_rule.cold.16
0x100043E4C	0x00000024	[ 13] _push_result_rule.cold.17
0x100043E70	0x00000024	[ 13] _push_result_rule.cold.18
0x100043E94	0x00000024	[ 13] _push_result_rule.cold.19
0x100043EB8	0x00000024	[ 13] _push_result_rule.cold.20
0x100043EDC	0x00000028	[ 13] _push_result_rule.cold.21
0x100043F04	0x00000028	[ 13] _push_result_rule.cold.22
0x100043F2C	0x00000028	[ 13] _mp_parse_node_convert_to_obj.cold.1
0x100043F54	0x00000028	[ 13] _mp_parse_node_convert_to_obj.cold.2
0x100043F7C	0x00000028	[ 13] _mp_parse_node_convert_to_obj.cold.3
0x100043FA4	0x00000028	[ 13] _mp_parse_node_convert_to_obj.cold.4
0x100043FCC	0x00000028	[ 13] _mp_parse_node_convert_to_obj.cold.5
0x100043FF4	0x00000028	[ 13] _peek_rule.cold.1
0x10004401C	0x00000024	[ 13] _build_tuple_from_stack.cold.1
0x100044040	0x00000028	[ 14] _scope_new.cold.1
0x100044068	0x00000028	[ 14] _scope_check_to_close_over.cold.1
0x100044090	0x00000028	[ 14] _scope_check_to_close_over.cold.2
0x1000440B8	0x00000028	[ 15] _mp_compile_to_raw_code.cold.1
0x1000440E0	0x00000028	[ 15] _compile_scope_inline_asm.cold.1
0x100044108	0x00000028	[ 15] _compile_scope_inline_asm.cold.2
0x100044130	0x00000028	[ 15] _compile_scope_inline_asm.cold.3
0x100044158	0x00000028	[ 15] _compile_scope_inline_asm.cold.4
0x100044180	0x00000028	[ 15] _compile_scope.cold.1
0x1000441A8	0x00000028	[ 15] _compile_scope.cold.2
0x1000441D0	0x00000028	[ 15] _compile_scope.cold.3
0x1000441F8	0x00000028	[ 15] _compile_scope.cold.4
0x100044220	0x00000028	[ 15] _compile_scope.cold.5
0x100044248	0x00000028	[ 15] _compile_scope.cold.6
0x100044270	0x00000028	[ 15] _compile_scope.cold.7
0x100044298	0x00000028	[ 15] _compile_scope.cold.8
0x1000442C0	0x00000028	[ 15] _compile_scope.cold.9
0x1000442E8	0x00000028	[ 15] _compile_scope.cold.10
0x100044310	0x00000028	[ 15] _compile_scope.cold.11
0x100044338	0x00000028	[ 15] _compile_scope.cold.12
0x100044360	0x00000028	[ 15] _compile_scope.cold.13
0x100044388	0x00000028	[ 15] _compile_node.cold.1
0x1000443B0	0x00000028	[ 15] _compile_scope_comp_iter.cold.1
0x1000443D8	0x00000028	[ 15] _compile_decorated.cold.1
0x100044400	0x00000028	[ 15] _compile_decorated.cold.2
0x100044428	0x00000028	[ 15] _compile_decorated.cold.3
0x100044450	0x00000028	[ 15] _compile_decorated.cold.4
0x100044478	0x00000028	[ 15] _compile_expr_stmt.cold.1
0x1000444A0	0x00000028	[ 15] _compile_break_cont_stmt.cold.1
0x1000444C8	0x00000028	[ 15] _compile_import_from.cold.1
0x1000444F0	0x00000028	[ 15] _compile_import_from.cold.2
0x100044518	0x00000028	[ 15] _compile_import_from.cold.3
0x100044540	0x00000028	[ 15] _compile_async_stmt.cold.1
0x100044568	0x00000028	[ 15] _compile_async_stmt.cold.2
0x100044590	0x00000028	[ 15] _compile_async_stmt.cold.3
0x1000445B8	0x00000028	[ 15] _compile_if_stmt.cold.1
0x1000445E0	0x00000028	[ 15] _compile_try_stmt.cold.1
0x100044608	0x00000028	[ 15] _compile_with_stmt.cold.1
0x100044630	0x00000028	[ 15] _compile_test_if_expr.cold.1
0x100044658	0x00000028	[ 15] _compile_comparison.cold.1
0x100044680	0x00000028	[ 15] _compile_comparison.cold.2
0x1000446A8	0x00000028	[ 15] _compile_factor_2.cold.1
0x1000446D0	0x00000028	[ 15] _compile_atom_paren.cold.1
0x1000446F8	0x00000028	[ 15] _compile_atom_brace.cold.1
0x100044720	0x00000028	[ 15] _compile_atom_brace.cold.2
0x100044748	0x00000028	[ 15] _compile_subscript.cold.1
0x100044770	0x00000028	[ 15] _compile_subscript.cold.2
0x100044798	0x00000028	[ 15] _compile_subscript.cold.3
0x1000447C0	0x00000028	[ 15] _compile_subscript.cold.4
0x1000447E8	0x00000028	[ 15] _compile_funcdef_lambdef_param.cold.1
0x100044810	0x00000028	[ 15] _compile_funcdef_lambdef_param.cold.2
0x100044838	0x00000028	[ 15] _compile_comprehension.cold.1
0x100044860	0x00000028	[ 15] _compile_comprehension.cold.2
0x100044888	0x00000028	[ 15] _c_assign.cold.1
0x1000448B0	0x00000028	[ 15] _c_assign.cold.2
0x1000448D8	0x00000028	[ 15] _c_assign.cold.3
0x100044900	0x00000028	[ 15] _c_assign.cold.4
0x100044928	0x00000028	[ 15] _c_del_stmt.cold.1
0x100044950	0x00000028	[ 15] _c_del_stmt.cold.2
0x100044978	0x00000028	[ 15] _c_del_stmt.cold.3
0x1000449A0	0x00000028	[ 15] _do_import_name.cold.1
0x1000449C8	0x00000028	[ 15] _compile_decrease_except_level.cold.1
0x1000449F0	0x00000028	[ 15] _compile_for_stmt_optimised_range.cold.1
0x100044A18	0x00000028	[ 15] _compile_try_finally.cold.1
0x100044A40	0x00000028	[ 15] _compile_try_except.cold.1
0x100044A68	0x00000028	[ 15] _compile_scope_func_lambda_param.cold.1
0x100044A90	0x00000028	[ 15] _compile_scope_func_lambda_param.cold.2
0x100044AB8	0x00000028	[ 15] _compile_scope_func_lambda_param.cold.3
0x100044AE0	0x00000028	[ 16] _mp_emit_common_id_op.cold.1
0x100044B08	0x00000028	[ 16] _mp_emit_common_id_op.cold.2
0x100044B30	0x00000028	[ 17] _mp_emit_bc_end_pass.cold.1
0x100044B58	0x00000028	[ 17] _mp_emit_bc_end_pass.cold.2
0x100044B80	0x00000028	[ 17] _mp_emit_bc_end_pass.cold.3
0x100044BA8	0x00000028	[ 17] _mp_emit_bc_end_pass.cold.4
0x100044BD0	0x00000028	[ 17] _mp_emit_bc_adjust_stack_size.cold.1
0x100044BF8	0x00000028	[ 17] _mp_emit_bc_set_source_line.cold.1
0x100044C20	0x00000028	[ 17] _mp_emit_bc_label_assign.cold.1
0x100044C48	0x00000028	[ 17] _mp_emit_bc_label_assign.cold.2
0x100044C70	0x00000028	[ 17] _mp_emit_bc_load_const_small_int.cold.1
0x100044C98	0x00000028	[ 17] _emit_write_bytecode_byte_label.cold.1
0x100044CC0	0x00000028	[ 17] _emit_write_bytecode_byte_label.cold.2
0x100044CE8	0x00000028	[ 17] _mp_emit_bc_make_closure.cold.1
0x100044D10	0x00000028	[ 17] _mp_emit_bc_raise_varargs.cold.1
0x100044D38	0x00000028	[ 17] _emit_get_cur_to_write_code_info.cold.1
0x100044D60	0x00000028	[ 17] _emit_get_cur_to_write_bytecode.cold.1
0x100044D88	0x00000028	[ 18] _mp_asm_base_start_pass.cold.1
0x100044DB0	0x00000028	[ 18] _mp_asm_base_get_cur_to_write_bytes.cold.1
0x100044DD8	0x00000028	[ 18] _mp_asm_base_label_assign.cold.1
0x100044E00	0x00000028	[ 18] _mp_asm_base_label_assign.cold.2
0x100044E28	0x00000028	[ 18] _mp_asm_base_label_assign.cold.3
0x100044E50	0x00000028	[ 19] _asm_x64_test_r8_with_r8.cold.1
0x100044E78	0x00000028	[ 19] _asm_x64_test_r8_with_r8.cold.2
0x100044EA0	0x00000028	[ 19] _asm_x64_setcc_r8.cold.1
0x100044EC8	0x00000028	[ 19] _asm_x64_jmp_reg.cold.1
0x100044EF0	0x00000024	[ 19] _asm_x64_jmp_label.cold.1
0x100044F14	0x00000024	[ 19] _asm_x64_jcc_label.cold.1
0x100044F38	0x00000028	[ 19] _asm_x64_entry.cold.1
0x100044F60	0x00000024	[ 19] _asm_x64_mov_reg_pcrel.cold.1
0x100044F84	0x00000028	[ 19] _asm_x64_call_ind.cold.1
0x100044FAC	0x00000028	[ 20] _emit_native_start_pass.cold.1
0x100044FD4	0x00000028	[ 20] _emit_native_end_pass.cold.1
0x100044FFC	0x00000028	[ 20] _emit_native_end_pass.cold.2
0x100045024	0x00000028	[ 20] _emit_native_end_pass.cold.3
0x10004504C	0x00000028	[ 20] _emit_native_end_pass.cold.4
0x100045074	0x00000028	[ 20] _emit_native_store_global.cold.1
0x10004509C	0x00000028	[ 20] _emit_native_import.cold.1
0x1000450C4	0x00000028	[ 20] _emit_native_import.cold.2
0x1000450EC	0x00000028	[ 20] _emit_native_import.cold.3
0x100045114	0x00000028	[ 20] _emit_native_import.cold.4
0x10004513C	0x00000028	[ 20] _emit_native_load_method.cold.1
0x100045164	0x00000028	[ 20] _emit_native_subscr.cold.1
0x10004518C	0x00000028	[ 20] _emit_native_subscr.cold.2
0x1000451B4	0x00000028	[ 20] _emit_native_attr.cold.1
0x1000451DC	0x00000028	[ 20] _emit_native_attr.cold.2
0x100045204	0x00000028	[ 20] _emit_native_attr.cold.3
0x10004522C	0x00000028	[ 20] _emit_native_setup_block.cold.1
0x100045254	0x00000028	[ 20] _emit_native_end_finally.cold.1
0x10004527C	0x00000028	[ 20] _emit_native_end_finally.cold.2
0x1000452A4	0x00000028	[ 20] _emit_native_get_iter.cold.1
0x1000452CC	0x00000028	[ 20] _emit_native_build.cold.1
0x1000452F4	0x00000028	[ 20] _emit_native_build.cold.2
0x10004531C	0x00000028	[ 20] _emit_native_build.cold.3
0x100045344	0x00000028	[ 20] _emit_native_build.cold.4
0x10004536C	0x00000028	[ 20] _emit_native_build.cold.5
0x100045394	0x00000028	[ 20] _emit_native_build.cold.6
0x1000453BC	0x00000028	[ 20] _emit_native_store_map.cold.1
0x1000453E4	0x00000028	[ 20] _emit_native_store_map.cold.2
0x10004540C	0x00000028	[ 20] _emit_native_store_map.cold.3
0x100045434	0x00000028	[ 20] _emit_native_store_comp.cold.1
0x10004545C	0x00000028	[ 20] _emit_native_store_comp.cold.2
0x100045484	0x00000028	[ 20] _emit_native_store_comp.cold.3
0x1000454AC	0x00000028	[ 20] _emit_native_store_comp.cold.4
0x1000454D4	0x00000028	[ 20] _emit_native_store_comp.cold.5
0x1000454FC	0x00000028	[ 20] _emit_native_unpack_sequence.cold.1
0x100045524	0x00000028	[ 20] _emit_native_unpack_ex.cold.1
0x10004554C	0x00000028	[ 20] _emit_native_call_function.cold.1
0x100045574	0x00000028	[ 20] _emit_native_call_function.cold.2
0x10004559C	0x00000028	[ 20] _emit_native_call_function.cold.3
0x1000455C4	0x00000028	[ 20] _emit_native_return_value.cold.1
0x1000455EC	0x00000028	[ 20] _emit_native_raise_varargs.cold.1
0x100045614	0x00000028	[ 20] _adjust_stack.cold.1
0x10004563C	0x00000028	[ 20] _adjust_stack.cold.2
0x100045664	0x00000028	[ 20] _emit_native_leave_exc_stack.cold.1
0x10004568C	0x00000028	[ 20] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x1000456B4	0x00000024	[ 21] _asm_x86_jmp_label.cold.1
0x1000456D8	0x00000024	[ 21] _asm_x86_jcc_label.cold.1
0x1000456FC	0x00000028	[ 21] _asm_x86_entry.cold.1
0x100045724	0x00000024	[ 21] _asm_x86_mov_reg_pcrel.cold.1
0x100045748	0x00000028	[ 21] _asm_x86_call_ind.cold.1
0x100045770	0x00000028	[ 22] _emit_native_start_pass.cold.1
0x100045798	0x00000028	[ 22] _emit_native_end_pass.cold.1
0x1000457C0	0x00000028	[ 22] _emit_native_end_pass.cold.2
0x1000457E8	0x00000028	[ 22] _emit_native_end_pass.cold.3
0x100045810	0x00000028	[ 22] _emit_native_end_pass.cold.4
0x100045838	0x00000028	[ 22] _emit_native_store_global.cold.1
0x100045860	0x00000028	[ 22] _emit_native_import.cold.1
0x100045888	0x00000028	[ 22] _emit_native_import.cold.2
0x1000458B0	0x00000028	[ 22] _emit_native_import.cold.3
0x1000458D8	0x00000028	[ 22] _emit_native_import.cold.4
0x100045900	0x00000028	[ 22] _emit_native_load_method.cold.1
0x100045928	0x00000028	[ 22] _emit_native_subscr.cold.1
0x100045950	0x00000028	[ 22] _emit_native_subscr.cold.2
0x100045978	0x00000028	[ 22] _emit_native_attr.cold.1
0x1000459A0	0x00000028	[ 22] _emit_native_attr.cold.2
0x1000459C8	0x00000028	[ 22] _emit_native_attr.cold.3
0x1000459F0	0x00000028	[ 22] _emit_native_setup_block.cold.1
0x100045A18	0x00000028	[ 22] _emit_native_end_finally.cold.1
0x100045A40	0x00000028	[ 22] _emit_native_end_finally.cold.2
0x100045A68	0x00000028	[ 22] _emit_native_get_iter.cold.1
0x100045A90	0x00000028	[ 22] _emit_native_build.cold.1
0x100045AB8	0x00000028	[ 22] _emit_native_build.cold.2
0x100045AE0	0x00000028	[ 22] _emit_native_build.cold.3
0x100045B08	0x00000028	[ 22] _emit_native_build.cold.4
0x100045B30	0x00000028	[ 22] _emit_native_build.cold.5
0x100045B58	0x00000028	[ 22] _emit_native_build.cold.6
0x100045B80	0x00000028	[ 22] _emit_native_store_map.cold.1
0x100045BA8	0x00000028	[ 22] _emit_native_store_map.cold.2
0x100045BD0	0x00000028	[ 22] _emit_native_store_map.cold.3
0x100045BF8	0x00000028	[ 22] _emit_native_store_comp.cold.1
0x100045C20	0x00000028	[ 22] _emit_native_store_comp.cold.2
0x100045C48	0x00000028	[ 22] _emit_native_store_comp.cold.3
0x100045C70	0x00000028	[ 22] _emit_native_store_comp.cold.4
0x100045C98	0x00000028	[ 22] _emit_native_store_comp.cold.5
0x100045CC0	0x00000028	[ 22] _emit_native_unpack_sequence.cold.1
0x100045CE8	0x00000028	[ 22] _emit_native_unpack_ex.cold.1
0x100045D10	0x00000028	[ 22] _emit_native_call_function.cold.1
0x100045D38	0x00000028	[ 22] _emit_native_call_function.cold.2
0x100045D60	0x00000028	[ 22] _emit_native_call_function.cold.3
0x100045D88	0x00000028	[ 22] _emit_native_return_value.cold.1
0x100045DB0	0x00000028	[ 22] _emit_native_raise_varargs.cold.1
0x100045DD8	0x00000028	[ 22] _adjust_stack.cold.1
0x100045E00	0x00000028	[ 22] _adjust_stack.cold.2
0x100045E28	0x00000028	[ 22] _emit_native_leave_exc_stack.cold.1
0x100045E50	0x00000028	[ 22] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100045E78	0x00000028	[ 23] _asm_thumb_entry.cold.1
0x100045EA0	0x00000028	[ 23] _asm_thumb_format_4.cold.1
0x100045EC8	0x00000028	[ 23] _asm_thumb_format_4.cold.2
0x100045EF0	0x00000028	[ 23] _asm_thumb_mov_reg_i16.cold.1
0x100045F18	0x00000024	[ 23] _asm_thumb_b_n_label.cold.1
0x100045F3C	0x00000024	[ 23] _asm_thumb_bcc_nw_label.cold.1
0x100045F60	0x00000024	[ 23] _asm_thumb_bl_label.cold.1
0x100045F84	0x00000028	[ 23] _asm_thumb_mov_reg_i32.cold.1
0x100045FAC	0x00000028	[ 23] _asm_thumb_mov_reg_i32.cold.2
0x100045FD4	0x00000028	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.1
0x100045FFC	0x00000028	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.2
0x100046024	0x00000028	[ 23] _asm_thumb_mov_rlo_i16.cold.1
0x10004604C	0x00000028	[ 23] _asm_thumb_mov_local_reg.cold.1
0x100046074	0x00000028	[ 23] _asm_thumb_mov_local_check.cold.1
0x10004609C	0x00000028	[ 23] _asm_thumb_mov_reg_local.cold.1
0x1000460C4	0x00000028	[ 23] _asm_thumb_mov_reg_local_addr.cold.1
0x1000460EC	0x00000028	[ 23] _asm_thumb_mov_reg_local_addr.cold.2
0x100046114	0x00000028	[ 23] _asm_thumb_mov_reg_pcrel.cold.1
0x10004613C	0x00000028	[ 23] _asm_thumb_mov_reg_pcrel.cold.2
0x100046164	0x00000024	[ 23] _asm_thumb_mov_reg_pcrel.cold.3
0x100046188	0x00000028	[ 23] _asm_thumb_add_reg_reg_offset.cold.1
0x1000461B0	0x00000024	[ 23] _asm_thumb_b_label.cold.1
0x1000461D4	0x00000024	[ 23] _asm_thumb_bcc_label.cold.1
0x1000461F8	0x00000028	[ 23] _asm_thumb_bcc_rel9.cold.1
0x100046220	0x00000028	[ 23] _asm_thumb_b_rel12.cold.1
0x100046248	0x00000028	[ 24] _emit_native_start_pass.cold.1
0x100046270	0x00000028	[ 24] _emit_native_end_pass.cold.1
0x100046298	0x00000028	[ 24] _emit_native_end_pass.cold.2
0x1000462C0	0x00000028	[ 24] _emit_native_end_pass.cold.3
0x1000462E8	0x00000028	[ 24] _emit_native_end_pass.cold.4
0x100046310	0x00000028	[ 24] _emit_native_store_global.cold.1
0x100046338	0x00000028	[ 24] _emit_native_import.cold.1
0x100046360	0x00000028	[ 24] _emit_native_import.cold.2
0x100046388	0x00000028	[ 24] _emit_native_import.cold.3
0x1000463B0	0x00000028	[ 24] _emit_native_import.cold.4
0x1000463D8	0x00000028	[ 24] _emit_native_load_method.cold.1
0x100046400	0x00000028	[ 24] _emit_native_subscr.cold.1
0x100046428	0x00000028	[ 24] _emit_native_subscr.cold.2
0x100046450	0x00000028	[ 24] _emit_native_attr.cold.1
0x100046478	0x00000028	[ 24] _emit_native_attr.cold.2
0x1000464A0	0x00000028	[ 24] _emit_native_attr.cold.3
0x1000464C8	0x00000028	[ 24] _emit_native_setup_block.cold.1
0x1000464F0	0x00000028	[ 24] _emit_native_end_finally.cold.1
0x100046518	0x00000028	[ 24] _emit_native_end_finally.cold.2
0x100046540	0x00000028	[ 24] _emit_native_get_iter.cold.1
0x100046568	0x00000028	[ 24] _emit_native_build.cold.1
0x100046590	0x00000028	[ 24] _emit_native_build.cold.2
0x1000465B8	0x00000028	[ 24] _emit_native_build.cold.3
0x1000465E0	0x00000028	[ 24] _emit_native_build.cold.4
0x100046608	0x00000028	[ 24] _emit_native_build.cold.5
0x100046630	0x00000028	[ 24] _emit_native_build.cold.6
0x100046658	0x00000028	[ 24] _emit_native_store_map.cold.1
0x100046680	0x00000028	[ 24] _emit_native_store_map.cold.2
0x1000466A8	0x00000028	[ 24] _emit_native_store_map.cold.3
0x1000466D0	0x00000028	[ 24] _emit_native_store_comp.cold.1
0x1000466F8	0x00000028	[ 24] _emit_native_store_comp.cold.2
0x100046720	0x00000028	[ 24] _emit_native_store_comp.cold.3
0x100046748	0x00000028	[ 24] _emit_native_store_comp.cold.4
0x100046770	0x00000028	[ 24] _emit_native_store_comp.cold.5
0x100046798	0x00000028	[ 24] _emit_native_unpack_sequence.cold.1
0x1000467C0	0x00000028	[ 24] _emit_native_unpack_ex.cold.1
0x1000467E8	0x00000028	[ 24] _emit_native_call_function.cold.1
0x100046810	0x00000028	[ 24] _emit_native_call_function.cold.2
0x100046838	0x00000028	[ 24] _emit_native_call_function.cold.3
0x100046860	0x00000028	[ 24] _emit_native_return_value.cold.1
0x100046888	0x00000028	[ 24] _emit_native_raise_varargs.cold.1
0x1000468B0	0x00000028	[ 24] _adjust_stack.cold.1
0x1000468D8	0x00000028	[ 24] _adjust_stack.cold.2
0x100046900	0x00000028	[ 24] _emit_native_leave_exc_stack.cold.1
0x100046928	0x00000028	[ 24] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100046950	0x00000028	[ 25] _emit_inline_thumb_label.cold.1
0x100046978	0x00000028	[ 25] _emit_inline_thumb_op.cold.1
0x1000469A0	0x00000028	[ 25] _emit_inline_thumb_op.cold.2
0x1000469C8	0x00000028	[ 25] _emit_inline_thumb_op.cold.3
0x1000469F0	0x00000028	[ 25] _emit_inline_thumb_op.cold.4
0x100046A18	0x00000028	[ 25] _emit_inline_thumb_op.cold.5
0x100046A40	0x00000028	[ 25] _get_arg_reglist.cold.1
0x100046A68	0x00000028	[ 25] _get_arg_reglist.cold.2
0x100046A90	0x00000028	[ 26] _asm_arm_entry.cold.1
0x100046AB8	0x00000028	[ 26] _asm_arm_mul_reg_reg_reg.cold.1
0x100046AE0	0x00000028	[ 26] _asm_arm_mov_reg_pcrel.cold.1
0x100046B08	0x00000028	[ 26] _asm_arm_bcc_label.cold.1
0x100046B30	0x00000028	[ 26] _asm_arm_bl_ind.cold.1
0x100046B58	0x00000028	[ 27] _emit_native_start_pass.cold.1
0x100046B80	0x00000028	[ 27] _emit_native_end_pass.cold.1
0x100046BA8	0x00000028	[ 27] _emit_native_end_pass.cold.2
0x100046BD0	0x00000028	[ 27] _emit_native_end_pass.cold.3
0x100046BF8	0x00000028	[ 27] _emit_native_end_pass.cold.4
0x100046C20	0x00000028	[ 27] _emit_native_store_global.cold.1
0x100046C48	0x00000028	[ 27] _emit_native_import.cold.1
0x100046C70	0x00000028	[ 27] _emit_native_import.cold.2
0x100046C98	0x00000028	[ 27] _emit_native_import.cold.3
0x100046CC0	0x00000028	[ 27] _emit_native_import.cold.4
0x100046CE8	0x00000028	[ 27] _emit_native_load_method.cold.1
0x100046D10	0x00000028	[ 27] _emit_native_subscr.cold.1
0x100046D38	0x00000028	[ 27] _emit_native_subscr.cold.2
0x100046D60	0x00000028	[ 27] _emit_native_attr.cold.1
0x100046D88	0x00000028	[ 27] _emit_native_attr.cold.2
0x100046DB0	0x00000028	[ 27] _emit_native_attr.cold.3
0x100046DD8	0x00000028	[ 27] _emit_native_setup_block.cold.1
0x100046E00	0x00000028	[ 27] _emit_native_end_finally.cold.1
0x100046E28	0x00000028	[ 27] _emit_native_end_finally.cold.2
0x100046E50	0x00000028	[ 27] _emit_native_get_iter.cold.1
0x100046E78	0x00000028	[ 27] _emit_native_build.cold.1
0x100046EA0	0x00000028	[ 27] _emit_native_build.cold.2
0x100046EC8	0x00000028	[ 27] _emit_native_build.cold.3
0x100046EF0	0x00000028	[ 27] _emit_native_build.cold.4
0x100046F18	0x00000028	[ 27] _emit_native_build.cold.5
0x100046F40	0x00000028	[ 27] _emit_native_build.cold.6
0x100046F68	0x00000028	[ 27] _emit_native_store_map.cold.1
0x100046F90	0x00000028	[ 27] _emit_native_store_map.cold.2
0x100046FB8	0x00000028	[ 27] _emit_native_store_map.cold.3
0x100046FE0	0x00000028	[ 27] _emit_native_store_comp.cold.1
0x100047008	0x00000028	[ 27] _emit_native_store_comp.cold.2
0x100047030	0x00000028	[ 27] _emit_native_store_comp.cold.3
0x100047058	0x00000028	[ 27] _emit_native_store_comp.cold.4
0x100047080	0x00000028	[ 27] _emit_native_store_comp.cold.5
0x1000470A8	0x00000028	[ 27] _emit_native_unpack_sequence.cold.1
0x1000470D0	0x00000028	[ 27] _emit_native_unpack_ex.cold.1
0x1000470F8	0x00000028	[ 27] _emit_native_call_function.cold.1
0x100047120	0x00000028	[ 27] _emit_native_call_function.cold.2
0x100047148	0x00000028	[ 27] _emit_native_call_function.cold.3
0x100047170	0x00000028	[ 27] _emit_native_return_value.cold.1
0x100047198	0x00000028	[ 27] _emit_native_raise_varargs.cold.1
0x1000471C0	0x00000028	[ 27] _adjust_stack.cold.1
0x1000471E8	0x00000028	[ 27] _adjust_stack.cold.2
0x100047210	0x00000028	[ 27] _emit_native_leave_exc_stack.cold.1
0x100047238	0x00000028	[ 27] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100047260	0x00000024	[ 28] _asm_xtensa_j_label.cold.1
0x100047284	0x00000024	[ 28] _asm_xtensa_bccz_reg_label.cold.1
0x1000472A8	0x00000024	[ 28] _asm_xtensa_bcc_reg_reg_label.cold.1
0x1000472CC	0x00000024	[ 28] _asm_xtensa_mov_reg_pcrel.cold.1
0x1000472F0	0x00000028	[ 29] _emit_native_start_pass.cold.1
0x100047318	0x00000028	[ 29] _emit_native_end_pass.cold.1
0x100047340	0x00000028	[ 29] _emit_native_end_pass.cold.2
0x100047368	0x00000028	[ 29] _emit_native_end_pass.cold.3
0x100047390	0x00000028	[ 29] _emit_native_end_pass.cold.4
0x1000473B8	0x00000028	[ 29] _emit_native_store_global.cold.1
0x1000473E0	0x00000028	[ 29] _emit_native_import.cold.1
0x100047408	0x00000028	[ 29] _emit_native_import.cold.2
0x100047430	0x00000028	[ 29] _emit_native_import.cold.3
0x100047458	0x00000028	[ 29] _emit_native_import.cold.4
0x100047480	0x00000028	[ 29] _emit_native_load_method.cold.1
0x1000474A8	0x00000028	[ 29] _emit_native_subscr.cold.1
0x1000474D0	0x00000028	[ 29] _emit_native_subscr.cold.2
0x1000474F8	0x00000028	[ 29] _emit_native_attr.cold.1
0x100047520	0x00000028	[ 29] _emit_native_attr.cold.2
0x100047548	0x00000028	[ 29] _emit_native_attr.cold.3
0x100047570	0x00000028	[ 29] _emit_native_setup_block.cold.1
0x100047598	0x00000028	[ 29] _emit_native_end_finally.cold.1
0x1000475C0	0x00000028	[ 29] _emit_native_end_finally.cold.2
0x1000475E8	0x00000028	[ 29] _emit_native_get_iter.cold.1
0x100047610	0x00000028	[ 29] _emit_native_build.cold.1
0x100047638	0x00000028	[ 29] _emit_native_build.cold.2
0x100047660	0x00000028	[ 29] _emit_native_build.cold.3
0x100047688	0x00000028	[ 29] _emit_native_build.cold.4
0x1000476B0	0x00000028	[ 29] _emit_native_build.cold.5
0x1000476D8	0x00000028	[ 29] _emit_native_build.cold.6
0x100047700	0x00000028	[ 29] _emit_native_store_map.cold.1
0x100047728	0x00000028	[ 29] _emit_native_store_map.cold.2
0x100047750	0x00000028	[ 29] _emit_native_store_map.cold.3
0x100047778	0x00000028	[ 29] _emit_native_store_comp.cold.1
0x1000477A0	0x00000028	[ 29] _emit_native_store_comp.cold.2
0x1000477C8	0x00000028	[ 29] _emit_native_store_comp.cold.3
0x1000477F0	0x00000028	[ 29] _emit_native_store_comp.cold.4
0x100047818	0x00000028	[ 29] _emit_native_store_comp.cold.5
0x100047840	0x00000028	[ 29] _emit_native_unpack_sequence.cold.1
0x100047868	0x00000028	[ 29] _emit_native_unpack_ex.cold.1
0x100047890	0x00000028	[ 29] _emit_native_call_function.cold.1
0x1000478B8	0x00000028	[ 29] _emit_native_call_function.cold.2
0x1000478E0	0x00000028	[ 29] _emit_native_call_function.cold.3
0x100047908	0x00000028	[ 29] _emit_native_return_value.cold.1
0x100047930	0x00000028	[ 29] _emit_native_raise_varargs.cold.1
0x100047958	0x00000028	[ 29] _adjust_stack.cold.1
0x100047980	0x00000028	[ 29] _adjust_stack.cold.2
0x1000479A8	0x00000028	[ 29] _emit_native_leave_exc_stack.cold.1
0x1000479D0	0x00000028	[ 29] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x1000479F8	0x00000028	[ 30] _emit_inline_xtensa_label.cold.1
0x100047A20	0x00000028	[ 31] _emit_native_start_pass.cold.1
0x100047A48	0x00000028	[ 31] _emit_native_end_pass.cold.1
0x100047A70	0x00000028	[ 31] _emit_native_end_pass.cold.2
0x100047A98	0x00000028	[ 31] _emit_native_end_pass.cold.3
0x100047AC0	0x00000028	[ 31] _emit_native_end_pass.cold.4
0x100047AE8	0x00000028	[ 31] _emit_native_store_global.cold.1
0x100047B10	0x00000028	[ 31] _emit_native_import.cold.1
0x100047B38	0x00000028	[ 31] _emit_native_import.cold.2
0x100047B60	0x00000028	[ 31] _emit_native_import.cold.3
0x100047B88	0x00000028	[ 31] _emit_native_import.cold.4
0x100047BB0	0x00000028	[ 31] _emit_native_load_method.cold.1
0x100047BD8	0x00000028	[ 31] _emit_native_subscr.cold.1
0x100047C00	0x00000028	[ 31] _emit_native_subscr.cold.2
0x100047C28	0x00000028	[ 31] _emit_native_attr.cold.1
0x100047C50	0x00000028	[ 31] _emit_native_attr.cold.2
0x100047C78	0x00000028	[ 31] _emit_native_attr.cold.3
0x100047CA0	0x00000028	[ 31] _emit_native_setup_block.cold.1
0x100047CC8	0x00000028	[ 31] _emit_native_end_finally.cold.1
0x100047CF0	0x00000028	[ 31] _emit_native_end_finally.cold.2
0x100047D18	0x00000028	[ 31] _emit_native_get_iter.cold.1
0x100047D40	0x00000028	[ 31] _emit_native_build.cold.1
0x100047D68	0x00000028	[ 31] _emit_native_build.cold.2
0x100047D90	0x00000028	[ 31] _emit_native_build.cold.3
0x100047DB8	0x00000028	[ 31] _emit_native_build.cold.4
0x100047DE0	0x00000028	[ 31] _emit_native_build.cold.5
0x100047E08	0x00000028	[ 31] _emit_native_build.cold.6
0x100047E30	0x00000028	[ 31] _emit_native_store_map.cold.1
0x100047E58	0x00000028	[ 31] _emit_native_store_map.cold.2
0x100047E80	0x00000028	[ 31] _emit_native_store_map.cold.3
0x100047EA8	0x00000028	[ 31] _emit_native_store_comp.cold.1
0x100047ED0	0x00000028	[ 31] _emit_native_store_comp.cold.2
0x100047EF8	0x00000028	[ 31] _emit_native_store_comp.cold.3
0x100047F20	0x00000028	[ 31] _emit_native_store_comp.cold.4
0x100047F48	0x00000028	[ 31] _emit_native_store_comp.cold.5
0x100047F70	0x00000028	[ 31] _emit_native_unpack_sequence.cold.1
0x100047F98	0x00000028	[ 31] _emit_native_unpack_ex.cold.1
0x100047FC0	0x00000028	[ 31] _emit_native_call_function.cold.1
0x100047FE8	0x00000028	[ 31] _emit_native_call_function.cold.2
0x100048010	0x00000028	[ 31] _emit_native_call_function.cold.3
0x100048038	0x00000028	[ 31] _emit_native_return_value.cold.1
0x100048060	0x00000028	[ 31] _emit_native_raise_varargs.cold.1
0x100048088	0x00000028	[ 31] _adjust_stack.cold.1
0x1000480B0	0x00000028	[ 31] _adjust_stack.cold.2
0x1000480D8	0x00000028	[ 31] _emit_native_leave_exc_stack.cold.1
0x100048100	0x00000028	[ 31] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100048128	0x00000028	[ 32] _mp_format_float.cold.1
0x100048150	0x00000028	[ 32] _mp_format_float.cold.2
0x100048178	0x00000028	[ 34] _mp_obj_new_exception_arg1.cold.1
0x1000481A0	0x00000028	[ 35] _mp_emit_glue_assign_native.cold.1
0x1000481C8	0x00000028	[ 36] _save_obj.cold.1
0x1000481F0	0x00000028	[ 37] _mp_unary_op.cold.1
0x100048218	0x00000028	[ 37] _mp_getiter.cold.1
0x100048240	0x00000028	[ 37] _mp_load_method_maybe.cold.1
0x100048268	0x00000028	[ 37] _mp_obj_new_exception_arg1.cold.1
0x100048290	0x00000028	[ 40] _mp_arg_parse_all.cold.1
0x1000482B8	0x00000028	[ 42] _mp_map_lookup.cold.1
0x1000482E0	0x00000028	[ 43] _mp_obj_print_exception.cold.1
0x100048308	0x00000028	[ 44] _array_append.cold.1
0x100048330	0x00000028	[ 44] _array_extend.cold.1
0x100048358	0x00000028	[ 44] _array_subscr.cold.1
0x100048380	0x00000028	[ 47] _mp_obj_complex_get.cold.1
0x1000483A8	0x00000028	[ 48] _dict_iter_next.cold.1
0x1000483D0	0x00000028	[ 48] _dict_iter_next.cold.2
0x1000483F8	0x00000028	[ 48] _dict_popitem.cold.1
0x100048420	0x00000028	[ 50] _get_native_exception.cold.1
0x100048448	0x00000028	[ 50] _mp_obj_new_exception.cold.1
0x100048470	0x00000028	[ 50] _mp_obj_new_exception_msg.cold.1
0x100048498	0x00000028	[ 50] _mp_obj_new_exception_msg_vlist.cold.1
0x1000484C0	0x00000028	[ 50] _mp_obj_new_exception_msg_vlist.cold.2
0x1000484E8	0x00000028	[ 52] _mp_obj_float_get.cold.1
0x100048510	0x00000028	[ 53] _fun_builtin_1_call.cold.1
0x100048538	0x00000028	[ 53] _fun_builtin_2_call.cold.1
0x100048560	0x00000028	[ 53] _fun_builtin_3_call.cold.1
0x100048588	0x00000028	[ 53] _fun_builtin_var_call.cold.1
0x1000485B0	0x00000028	[ 56] _mp_obj_int_formatted.cold.1
0x1000485D8	0x00000028	[ 56] _mp_int_format_size.cold.1
0x100048600	0x00000028	[ 58] _mp_obj_int_formatted_impl.cold.1
0x100048628	0x00000028	[ 58] _mp_obj_int_to_bytes_impl.cold.1
0x100048650	0x00000028	[ 58] _mp_obj_int_binary_op.cold.1
0x100048678	0x00000028	[ 58] _mp_obj_int_as_float_impl.cold.1
0x1000486A0	0x00000028	[ 59] _list_subscr.cold.1
0x1000486C8	0x00000028	[ 72] _mp_obj_str_format_helper.cold.1
0x1000486F0	0x00000028	[ 72] _str_replace.cold.1
0x100048718	0x00000028	[ 72] _str_uni_strip.cold.1
0x100048740	0x00000028	[ 72] _str_uni_strip.cold.2
0x100048768	0x00000028	[ 73] _str_subscr.cold.1
0x100048790	0x00000028	[ 75] _mp_obj_tuple_get.cold.1
0x1000487B8	0x00000028	[ 76] _mp_obj_new_instance.cold.1
0x1000487E0	0x00000028	[ 76] _instance_count_native_bases.cold.1
0x100048808	0x00000028	[ 76] _mp_obj_class_lookup.cold.1
0x100048830	0x00000028	[ 76] _mp_obj_class_lookup.cold.2
0x100048858	0x00000028	[ 76] _mp_obj_class_lookup.cold.3
0x100048880	0x00000028	[ 76] _mp_obj_class_lookup.cold.4
0x1000488A8	0x00000028	[ 76] _mp_obj_class_lookup.cold.5
0x1000488D0	0x00000028	[ 76] _type_attr.cold.1
0x1000488F8	0x00000028	[ 76] _type_attr.cold.2
0x100048920	0x00000028	[ 76] _mp_obj_new_type.cold.1
0x100048948	0x00000028	[ 76] _mp_obj_instance_make_new.cold.1
0x100048970	0x00000028	[ 76] _mp_obj_instance_attr.cold.1
0x100048998	0x00000028	[ 76] _static_class_method_make_new.cold.1
0x1000489C0	0x0000000C	[106] ___assert_rtn.stub
0x1000489CC	0x0000000C	[106] ___error.stub
0x1000489D8	0x0000000C	[106] ___exp10.stub
0x1000489E4	0x0000000C	[106] ___sincos_stret.stub
0x1000489F0	0x0000000C	[106] ___stack_chk_fail.stub
0x1000489FC	0x0000000C	[106] _atan2.stub
0x100048A08	0x0000000C	[106] _bzero.stub
0x100048A14	0x0000000C	[106] _close.stub
0x100048A20	0x0000000C	[106] _exit.stub
0x100048A2C	0x0000000C	[106] _exp.stub
0x100048A38	0x0000000C	[106] _fmod.stub
0x100048A44	0x0000000C	[106] _fprintf.stub
0x100048A50	0x0000000C	[106] _log.stub
0x100048A5C	0x0000000C	[106] _malloc.stub
0x100048A68	0x0000000C	[106] _memchr.stub
0x100048A74	0x0000000C	[106] _memcmp.stub
0x100048A80	0x0000000C	[106] _memcpy.stub
0x100048A8C	0x0000000C	[106] _memmove.stub
0x100048A98	0x0000000C	[106] _memset.stub
0x100048AA4	0x0000000C	[106] _nan.stub
0x100048AB0	0x0000000C	[106] _open.stub
0x100048ABC	0x0000000C	[106] _pow.stub
0x100048AC8	0x0000000C	[106] _printf.stub
0x100048AD4	0x0000000C	[106] _puts.stub
0x100048AE0	0x0000000C	[106] _read.stub
0x100048AEC	0x0000000C	[106] _setjmp.stub
0x100048AF8	0x0000000C	[106] _strchr.stub
0x100048B04	0x0000000C	[106] _strcmp.stub
0x100048B10	0x0000000C	[106] _strlen.stub
0x100048B1C	0x0000000C	[106] _strncmp.stub
0x100048B28	0x0000000C	[106] _strtol.stub
0x100048B34	0x0000000C	[106] _write.stub
0x100048B40	0x00000010	[  5] 16-byte-literal
0x100048B50	0x000002AC	[  6] _mp_qstr_const_hashes
0x100048DFC	0x00000156	[  6] _mp_qstr_const_lengths
0x100048F52	0x00000017	[  8] lJTI6_0
0x100048F69	0x00000011	[  8] _pad_spaces
0x100048F7A	0x00000011	[  8] _pad_zeroes
0x100048F8B	0x00000080	[  9] _attr
0x10004900B	0x0000000B	[ 12] lJTI0_0
0x100049016	0x0000002C	[ 12] _tok_enc_kind
0x100049050	0x00000010	[ 12] 16-byte-literal
0x100049060	0x00000010	[ 12] 16-byte-literal
0x100049070	0x00000010	[ 13] 16-byte-literal
0x100049080	0x00000010	[ 13] 16-byte-literal
0x100049090	0x00000006	[ 13] lJTI7_0
0x100049096	0x00000014	[ 13] lJTI11_0
0x1000490AA	0x00000004	[ 13] lJTI14_0
0x1000490AE	0x000000B0	[ 13] _rule_act_table
0x10004915E	0x000000B0	[ 13] _rule_arg_offset_table
0x10004920E	0x0000038A	[ 13] _rule_arg_combined_table
0x100049598	0x00000001	[ 13] _mp_constants_table
0x100049599	0x00000007	[ 14] _scope_simple_name_table
0x1000495A0	0x00000009	[ 15] lJTI58_0
0x1000495A9	0x00000006	[ 16] lJTI4_0
0x1000495B0	0x00000010	[ 17] 16-byte-literal
0x1000495C0	0x00000008	[ 20] 8-byte-literal
0x1000495C8	0x00000008	[ 20] 8-byte-literal
0x1000495D0	0x00000008	[ 20] lJTI21_0
0x1000495D8	0x00000008	[ 20] lJTI21_1
0x1000495E0	0x00000008	[ 20] lJTI21_2
0x1000495E8	0x00000010	[ 20] lJTI21_3
0x1000495F8	0x00000008	[ 20] lJTI40_0
0x100049600	0x00000002	[ 20] _reg_local_table
0x100049602	0x0000000E	[ 20] _emit_native_binary_op.ops
0x100049610	0x00000040	[ 20] l_switch.table.emit_native_store_fast.53
0x100049650	0x00000040	[ 20] l_switch.table.emit_native_jump_helper
0x100049690	0x00000008	[ 22] 8-byte-literal
0x100049698	0x00000008	[ 22] lJTI21_0
0x1000496A0	0x00000008	[ 22] lJTI21_1
0x1000496A8	0x00000008	[ 22] lJTI21_2
0x1000496B0	0x00000010	[ 22] lJTI21_3
0x1000496C0	0x00000008	[ 22] lJTI40_0
0x1000496C8	0x00000002	[ 22] _reg_local_table
0x1000496CA	0x00000032	[ 22] _mp_f_n_args
0x1000496FC	0x0000000C	[ 22] _emit_native_binary_op.ops
0x100049708	0x00000040	[ 22] l_switch.table.emit_native_store_fast.53
0x100049748	0x00000040	[ 22] l_switch.table.emit_native_jump_helper
0x100049790	0x00000010	[ 23] 16-byte-literal
0x1000497A0	0x00000008	[ 24] lJTI21_0
0x1000497A8	0x00000008	[ 24] lJTI21_1
0x1000497B0	0x00000008	[ 24] lJTI21_2
0x1000497B8	0x00000010	[ 24] lJTI21_3
0x1000497C8	0x00000008	[ 24] lJTI40_0
0x1000497D0	0x00000002	[ 24] _reg_local_table
0x1000497D2	0x00000018	[ 24] _emit_native_binary_op.ops
0x1000497EA	0x0000001E	[ 24] _emit_native_binary_op.ops.33
0x100049808	0x00000040	[ 24] l_switch.table.emit_native_store_fast.58
0x100049848	0x00000040	[ 24] l_switch.table.emit_native_jump_helper
0x100049888	0x00000004	[ 25] lJTI6_0
0x10004988C	0x00000014	[ 25] lJTI6_1
0x1000498A0	0x00000010	[ 25] _format_vfp_op_table
0x1000498B0	0x0000002A	[ 25] _cc_name_table
0x1000498DA	0x0000003C	[ 25] _format_4_op_table
0x100049916	0x00000018	[ 25] _format_9_10_op_table
0x10004992E	0x00000054	[ 25] _reg_name_table
0x100049982	0x00000012	[ 25] _special_reg_name_table
0x100049998	0x00000008	[ 26] 8-byte-literal
0x1000499A0	0x00000008	[ 27] lJTI21_0
0x1000499A8	0x00000008	[ 27] lJTI21_1
0x1000499B0	0x00000008	[ 27] lJTI21_2
0x1000499B8	0x00000010	[ 27] lJTI21_3
0x1000499C8	0x00000008	[ 27] lJTI40_0
0x1000499D0	0x00000004	[ 27] _reg_local_table
0x1000499D4	0x00000034	[ 27] _emit_native_binary_op.ccs
0x100049A08	0x00000040	[ 27] l_switch.table.emit_native_store_fast.53
0x100049A48	0x00000040	[ 27] l_switch.table.emit_native_jump_helper
0x100049A88	0x00000008	[ 29] 8-byte-literal
0x100049A90	0x00000008	[ 29] lJTI21_0
0x100049A98	0x00000008	[ 29] lJTI21_1
0x100049AA0	0x00000008	[ 29] lJTI21_2
0x100049AA8	0x00000010	[ 29] lJTI21_3
0x100049AB8	0x00000008	[ 29] lJTI40_0
0x100049AC0	0x00000002	[ 29] _reg_local_table
0x100049AC2	0x0000000E	[ 29] _emit_native_binary_op.ccs
0x100049AD0	0x00000040	[ 29] l_switch.table.emit_native_store_fast.53
0x100049B10	0x00000040	[ 29] l_switch.table.emit_native_jump_helper
0x100049B50	0x00000004	[ 30] lJTI6_0
0x100049B54	0x00000064	[ 30] _opcode_table_3arg
0x100049BB8	0x00000040	[ 30] _reg_name_table
0x100049BF8	0x00000008	[ 31] 8-byte-literal
0x100049C00	0x00000008	[ 31] lJTI21_0
0x100049C08	0x00000008	[ 31] lJTI21_1
0x100049C10	0x00000008	[ 31] lJTI21_2
0x100049C18	0x00000010	[ 31] lJTI21_3
0x100049C28	0x00000008	[ 31] lJTI40_0
0x100049C30	0x00000002	[ 31] _reg_local_table
0x100049C32	0x0000000E	[ 31] _emit_native_binary_op.ccs
0x100049C40	0x00000040	[ 31] l_switch.table.emit_native_store_fast.53
0x100049C80	0x00000040	[ 31] l_switch.table.emit_native_jump_helper
0x100049CC0	0x00000008	[ 32] 8-byte-literal
0x100049CC8	0x00000008	[ 34] 8-byte-literal
0x100049CD0	0x00000008	[ 34] 8-byte-literal
0x100049CD8	0x00000009	[ 37] lJTI10_0
0x100049CE1	0x00000007	[ 37] lJTI11_0
0x100049CE8	0x00000024	[ 37] lJTI11_1
0x100049D0C	0x00000004	[ 38] lJTI0_0
0x100049D10	0x00000044	[ 42] _hash_allocation_sizes
0x100049D60	0x00000010	[ 44] 16-byte-literal
0x100049D70	0x00000008	[ 47] lJTI2_0
0x100049D78	0x00000015	[ 47] lJTI7_0
0x100049D8D	0x00000008	[ 52] lJTI2_0
0x100049D95	0x00000024	[ 52] lJTI6_0
0x100049DB9	0x00000010	[ 56] _log_base2_floor
0x100049DC9	0x00000008	[ 58] lJTI5_0
0x100049DD1	0x00000005	[ 58] lJTI6_0
0x100049DD6	0x0000001B	[ 58] lJTI6_1
0x100049DF8	0x00000020	[ 59] _mp_obj_list_sort.allowed_args
0x100049E18	0x00000040	[ 64] _property_make_new.allowed_args
0x100049E58	0x00000008	[ 72] lJTI6_0
0x100049E60	0x0000002C	[ 72] lJTI6_1
0x100049E8C	0x0000000E	[ 72] lJTI24_0
0x100049EA0	0x00000010	[ 76] 16-byte-literal
0x100049EB0	0x00000010	[ 76] 16-byte-literal
0x100049EC0	0x00000010	[ 76] 16-byte-literal
0x100049ED0	0x00000010	[ 76] 16-byte-literal
0x100049EE0	0x00000010	[ 76] 16-byte-literal
0x100049EF0	0x00000008	[ 76] 8-byte-literal
0x100049EF8	0x0000000C	[ 76] _mp_unary_op_method_name
0x100049F04	0x00000025	[ 76] _mp_binary_op_method_name
0x100049F29	0x00000012	[ 81] lJTI0_0
0x100049F3B	0x00000010	[ 81] lJTI0_1
0x100049F4B	0x00000012	[ 81] lJTI0_2
0x100049F5D	0x00000010	[ 81] lJTI0_3
0x100049F6D	0x00000010	[ 81] lJTI1_0
0x100049F7D	0x00000010	[ 81] lJTI1_1
0x100049F8D	0x0000000A	[ 81] lJTI7_0
0x100049F97	0x00000010	[ 81] lJTI7_1
0x100049FA7	0x00000008	[  5] literal string: gc_free
0x100049FAF	0x00000005	[  5] literal string: gc.c
0x100049FB4	0x00000010	[  5] literal string: VERIFY_PTR(ptr)
0x100049FC4	0x00000025	[  5] literal string: ATB_GET_KIND(area, block) == AT_HEAD
0x100049FE9	0x0000000B	[  5] literal string: gc_realloc
0x100049FF4	0x00000022	[  5] literal string: ATB_GET_KIND(area, bl) == AT_FREE
0x10004A016	0x00000003	[  5] literal string: %c
0x10004A019	0x00000002	[  5] literal string: \n
0x10004A01B	0x00000010	[  5] literal string: gc_mark_subtree
0x10004A02B	0x00000050	[  5] literal string: area->gc_pool_start + (block + n_blocks) * BYTES_PER_BLOCK <= area->gc_pool_end
0x10004A07B	0x00000001	[  6] literal string: 
0x10004A07C	0x00000008	[  6] literal string: __dir__
0x10004A084	0x00000002	[  6] literal string:  
0x10004A086	0x00000002	[  6] literal string: *
0x10004A088	0x00000002	[  6] literal string: /
0x10004A08A	0x00000009	[  6] literal string: <module>
0x10004A093	0x00000002	[  6] literal string: _
0x10004A095	0x00000009	[  6] literal string: __call__
0x10004A09E	0x0000000A	[  6] literal string: __class__
0x10004A0A8	0x0000000C	[  6] literal string: __delitem__
0x10004A0B4	0x0000000A	[  6] literal string: __enter__
0x10004A0BE	0x00000009	[  6] literal string: __exit__
0x10004A0C7	0x0000000C	[  6] literal string: __getattr__
0x10004A0D3	0x0000000C	[  6] literal string: __getitem__
0x10004A0DF	0x00000009	[  6] literal string: __hash__
0x10004A0E8	0x00000009	[  6] literal string: __init__
0x10004A0F1	0x00000008	[  6] literal string: __int__
0x10004A0F9	0x00000009	[  6] literal string: __iter__
0x10004A102	0x00000008	[  6] literal string: __len__
0x10004A10A	0x00000009	[  6] literal string: __main__
0x10004A113	0x0000000B	[  6] literal string: __module__
0x10004A11E	0x00000009	[  6] literal string: __name__
0x10004A127	0x00000008	[  6] literal string: __new__
0x10004A12F	0x00000009	[  6] literal string: __next__
0x10004A138	0x0000000D	[  6] literal string: __qualname__
0x10004A145	0x00000009	[  6] literal string: __repr__
0x10004A14E	0x0000000C	[  6] literal string: __setitem__
0x10004A15A	0x00000008	[  6] literal string: __str__
0x10004A162	0x00000010	[  6] literal string: ArithmeticError
0x10004A172	0x0000000F	[  6] literal string: AssertionError
0x10004A181	0x0000000F	[  6] literal string: AttributeError
0x10004A190	0x0000000E	[  6] literal string: BaseException
0x10004A19E	0x00000009	[  6] literal string: EOFError
0x10004A1A7	0x00000009	[  6] literal string: Ellipsis
0x10004A1B0	0x0000000A	[  6] literal string: Exception
0x10004A1BA	0x0000000E	[  6] literal string: GeneratorExit
0x10004A1C8	0x0000000C	[  6] literal string: ImportError
0x10004A1D4	0x00000011	[  6] literal string: IndentationError
0x10004A1E5	0x0000000B	[  6] literal string: IndexError
0x10004A1F0	0x00000009	[  6] literal string: KeyError
0x10004A1F9	0x00000012	[  6] literal string: KeyboardInterrupt
0x10004A20B	0x0000000C	[  6] literal string: LookupError
0x10004A217	0x0000000C	[  6] literal string: MemoryError
0x10004A223	0x0000000A	[  6] literal string: NameError
0x10004A22D	0x00000009	[  6] literal string: NoneType
0x10004A236	0x00000014	[  6] literal string: NotImplementedError
0x10004A24A	0x00000008	[  6] literal string: OSError
0x10004A252	0x0000000E	[  6] literal string: OverflowError
0x10004A260	0x0000000D	[  6] literal string: RuntimeError
0x10004A26D	0x0000000E	[  6] literal string: StopIteration
0x10004A27B	0x0000000C	[  6] literal string: SyntaxError
0x10004A287	0x0000000B	[  6] literal string: SystemExit
0x10004A292	0x0000000A	[  6] literal string: TypeError
0x10004A29C	0x0000000B	[  6] literal string: ValueError
0x10004A2A7	0x00000012	[  6] literal string: ZeroDivisionError
0x10004A2B9	0x00000004	[  6] literal string: abs
0x10004A2BD	0x00000004	[  6] literal string: all
0x10004A2C1	0x00000004	[  6] literal string: any
0x10004A2C5	0x00000007	[  6] literal string: append
0x10004A2CC	0x00000005	[  6] literal string: args
0x10004A2D1	0x00000005	[  6] literal string: bool
0x10004A2D6	0x00000009	[  6] literal string: builtins
0x10004A2DF	0x0000000A	[  6] literal string: bytearray
0x10004A2E9	0x00000009	[  6] literal string: bytecode
0x10004A2F2	0x00000006	[  6] literal string: bytes
0x10004A2F8	0x00000009	[  6] literal string: callable
0x10004A301	0x00000004	[  6] literal string: chr
0x10004A305	0x0000000C	[  6] literal string: classmethod
0x10004A311	0x00000006	[  6] literal string: clear
0x10004A317	0x00000006	[  6] literal string: close
0x10004A31D	0x00000006	[  6] literal string: const
0x10004A323	0x00000005	[  6] literal string: copy
0x10004A328	0x00000006	[  6] literal string: count
0x10004A32E	0x00000005	[  6] literal string: dict
0x10004A333	0x00000004	[  6] literal string: dir
0x10004A337	0x00000007	[  6] literal string: divmod
0x10004A33E	0x00000004	[  6] literal string: end
0x10004A342	0x00000009	[  6] literal string: endswith
0x10004A34B	0x00000005	[  6] literal string: eval
0x10004A350	0x00000005	[  6] literal string: exec
0x10004A355	0x00000007	[  6] literal string: extend
0x10004A35C	0x00000005	[  6] literal string: find
0x10004A361	0x00000007	[  6] literal string: format
0x10004A368	0x0000000B	[  6] literal string: from_bytes
0x10004A373	0x00000004	[  6] literal string: get
0x10004A377	0x00000008	[  6] literal string: getattr
0x10004A37F	0x00000008	[  6] literal string: globals
0x10004A387	0x00000008	[  6] literal string: hasattr
0x10004A38F	0x00000005	[  6] literal string: hash
0x10004A394	0x00000003	[  6] literal string: id
0x10004A397	0x00000006	[  6] literal string: index
0x10004A39D	0x00000007	[  6] literal string: insert
0x10004A3A4	0x00000004	[  6] literal string: int
0x10004A3A8	0x00000008	[  6] literal string: isalpha
0x10004A3B0	0x00000008	[  6] literal string: isdigit
0x10004A3B8	0x0000000B	[  6] literal string: isinstance
0x10004A3C3	0x00000008	[  6] literal string: islower
0x10004A3CB	0x00000008	[  6] literal string: isspace
0x10004A3D3	0x0000000B	[  6] literal string: issubclass
0x10004A3DE	0x00000008	[  6] literal string: isupper
0x10004A3E6	0x00000006	[  6] literal string: items
0x10004A3EC	0x00000005	[  6] literal string: iter
0x10004A3F1	0x00000005	[  6] literal string: join
0x10004A3F6	0x00000004	[  6] literal string: key
0x10004A3FA	0x00000005	[  6] literal string: keys
0x10004A3FF	0x00000004	[  6] literal string: len
0x10004A403	0x00000005	[  6] literal string: list
0x10004A408	0x00000007	[  6] literal string: little
0x10004A40F	0x00000007	[  6] literal string: locals
0x10004A416	0x00000006	[  6] literal string: lower
0x10004A41C	0x00000007	[  6] literal string: lstrip
0x10004A423	0x00000005	[  6] literal string: main
0x10004A428	0x00000004	[  6] literal string: map
0x10004A42C	0x0000000C	[  6] literal string: micropython
0x10004A438	0x00000005	[  6] literal string: next
0x10004A43D	0x00000007	[  6] literal string: object
0x10004A444	0x00000005	[  6] literal string: open
0x10004A449	0x00000004	[  6] literal string: ord
0x10004A44D	0x00000004	[  6] literal string: pop
0x10004A451	0x00000008	[  6] literal string: popitem
0x10004A459	0x00000004	[  6] literal string: pow
0x10004A45D	0x00000006	[  6] literal string: print
0x10004A463	0x00000006	[  6] literal string: range
0x10004A469	0x00000005	[  6] literal string: read
0x10004A46E	0x00000009	[  6] literal string: readinto
0x10004A477	0x00000009	[  6] literal string: readline
0x10004A480	0x00000007	[  6] literal string: remove
0x10004A487	0x00000008	[  6] literal string: replace
0x10004A48F	0x00000005	[  6] literal string: repr
0x10004A494	0x00000008	[  6] literal string: reverse
0x10004A49C	0x00000006	[  6] literal string: rfind
0x10004A4A2	0x00000007	[  6] literal string: rindex
0x10004A4A9	0x00000006	[  6] literal string: round
0x10004A4AF	0x00000007	[  6] literal string: rsplit
0x10004A4B6	0x00000007	[  6] literal string: rstrip
0x10004A4BD	0x00000005	[  6] literal string: self
0x10004A4C2	0x00000005	[  6] literal string: send
0x10004A4C7	0x00000004	[  6] literal string: sep
0x10004A4CB	0x00000004	[  6] literal string: set
0x10004A4CF	0x00000008	[  6] literal string: setattr
0x10004A4D7	0x0000000B	[  6] literal string: setdefault
0x10004A4E2	0x00000005	[  6] literal string: sort
0x10004A4E7	0x00000007	[  6] literal string: sorted
0x10004A4EE	0x00000006	[  6] literal string: split
0x10004A4F4	0x00000006	[  6] literal string: start
0x10004A4FA	0x0000000B	[  6] literal string: startswith
0x10004A505	0x0000000D	[  6] literal string: staticmethod
0x10004A512	0x00000005	[  6] literal string: step
0x10004A517	0x00000005	[  6] literal string: stop
0x10004A51C	0x00000004	[  6] literal string: str
0x10004A520	0x00000006	[  6] literal string: strip
0x10004A526	0x00000004	[  6] literal string: sum
0x10004A52A	0x00000006	[  6] literal string: super
0x10004A530	0x00000006	[  6] literal string: throw
0x10004A536	0x00000009	[  6] literal string: to_bytes
0x10004A53F	0x00000006	[  6] literal string: tuple
0x10004A545	0x00000005	[  6] literal string: type
0x10004A54A	0x00000007	[  6] literal string: update
0x10004A551	0x00000006	[  6] literal string: upper
0x10004A557	0x00000006	[  6] literal string: utf-8
0x10004A55D	0x00000006	[  6] literal string: value
0x10004A563	0x00000007	[  6] literal string: values
0x10004A56A	0x00000006	[  6] literal string: write
0x10004A570	0x00000004	[  6] literal string: zip
0x10004A574	0x00000008	[  6] literal string: __add__
0x10004A57C	0x0000000B	[  6] literal string: __aenter__
0x10004A587	0x0000000A	[  6] literal string: __aexit__
0x10004A591	0x0000000A	[  6] literal string: __aiter__
0x10004A59B	0x0000000A	[  6] literal string: __anext__
0x10004A5A5	0x0000000A	[  6] literal string: __bases__
0x10004A5AF	0x00000009	[  6] literal string: __bool__
0x10004A5B8	0x00000010	[  6] literal string: __build_class__
0x10004A5C8	0x0000000C	[  6] literal string: __complex__
0x10004A5D4	0x0000000D	[  6] literal string: __contains__
0x10004A5E1	0x00000009	[  6] literal string: __dict__
0x10004A5EA	0x00000007	[  6] literal string: __eq__
0x10004A5F1	0x0000000A	[  6] literal string: __float__
0x10004A5FB	0x00000007	[  6] literal string: __ge__
0x10004A602	0x00000007	[  6] literal string: __gt__
0x10004A609	0x00000009	[  6] literal string: __iadd__
0x10004A612	0x0000000B	[  6] literal string: __import__
0x10004A61D	0x00000009	[  6] literal string: __isub__
0x10004A626	0x00000007	[  6] literal string: __le__
0x10004A62D	0x00000007	[  6] literal string: __lt__
0x10004A634	0x00000007	[  6] literal string: __ne__
0x10004A63B	0x00000009	[  6] literal string: __path__
0x10004A644	0x0000000F	[  6] literal string: __repl_print__
0x10004A653	0x0000000D	[  6] literal string: __reversed__
0x10004A660	0x00000008	[  6] literal string: __sub__
0x10004A668	0x0000000E	[  6] literal string: __traceback__
0x10004A676	0x00000004	[  6] literal string: %#o
0x10004A67A	0x00000004	[  6] literal string: %#x
0x10004A67E	0x00000006	[  6] literal string: {:#b}
0x10004A684	0x00000021	[  6] literal string: maximum recursion depth exceeded
0x10004A6A5	0x00000009	[  6] literal string: <lambda>
0x10004A6AE	0x0000000B	[  6] literal string: <listcomp>
0x10004A6B9	0x0000000B	[  6] literal string: <dictcomp>
0x10004A6C4	0x0000000A	[  6] literal string: <setcomp>
0x10004A6CE	0x0000000A	[  6] literal string: <genexpr>
0x10004A6D8	0x00000009	[  6] literal string: <string>
0x10004A6E1	0x00000008	[  6] literal string: <stdin>
0x10004A6E9	0x00000005	[  6] literal string: None
0x10004A6EE	0x00000013	[  6] literal string: StopAsyncIteration
0x10004A701	0x0000000D	[  6] literal string: UnicodeError
0x10004A70E	0x0000000F	[  6] literal string: ViperTypeError
0x10004A71D	0x00000004	[  6] literal string: add
0x10004A721	0x00000005	[  6] literal string: addi
0x10004A726	0x00000006	[  6] literal string: align
0x10004A72C	0x00000005	[  6] literal string: and_
0x10004A731	0x0000000A	[  6] literal string: asm_thumb
0x10004A73B	0x0000000B	[  6] literal string: asm_xtensa
0x10004A746	0x00000004	[  6] literal string: asr
0x10004A74A	0x00000002	[  6] literal string: b
0x10004A74C	0x00000005	[  6] literal string: ball
0x10004A751	0x00000005	[  6] literal string: bany
0x10004A756	0x00000004	[  6] literal string: bbc
0x10004A75A	0x00000004	[  6] literal string: bbs
0x10004A75E	0x00000004	[  6] literal string: beq
0x10004A762	0x00000005	[  6] literal string: beqz
0x10004A767	0x00000004	[  6] literal string: bge
0x10004A76B	0x00000005	[  6] literal string: bgeu
0x10004A770	0x00000004	[  6] literal string: bin
0x10004A774	0x00000003	[  6] literal string: bl
0x10004A777	0x00000004	[  6] literal string: blt
0x10004A77B	0x00000006	[  6] literal string: bnall
0x10004A781	0x00000004	[  6] literal string: bne
0x10004A785	0x00000005	[  6] literal string: bnez
0x10004A78A	0x00000006	[  6] literal string: bnone
0x10004A790	0x0000000D	[  6] literal string: bound_method
0x10004A79D	0x00000003	[  6] literal string: bx
0x10004A7A0	0x00000009	[  6] literal string: calcsize
0x10004A7A9	0x00000007	[  6] literal string: callx0
0x10004A7B0	0x00000008	[  6] literal string: closure
0x10004A7B8	0x00000004	[  6] literal string: clz
0x10004A7BC	0x00000004	[  6] literal string: cmp
0x10004A7C0	0x00000008	[  6] literal string: complex
0x10004A7C8	0x00000006	[  6] literal string: cpsid
0x10004A7CE	0x00000006	[  6] literal string: cpsie
0x10004A7D4	0x00000005	[  6] literal string: data
0x10004A7D9	0x00000007	[  6] literal string: decode
0x10004A7E0	0x00000008	[  6] literal string: default
0x10004A7E8	0x00000008	[  6] literal string: delattr
0x10004A7F0	0x00000008	[  6] literal string: deleter
0x10004A7F8	0x0000000A	[  6] literal string: dict_view
0x10004A802	0x0000000B	[  6] literal string: difference
0x10004A80D	0x00000012	[  6] literal string: difference_update
0x10004A81F	0x00000008	[  6] literal string: discard
0x10004A827	0x00000004	[  6] literal string: doc
0x10004A82B	0x00000007	[  6] literal string: encode
0x10004A832	0x0000000A	[  6] literal string: enumerate
0x10004A83C	0x00000006	[  6] literal string: errno
0x10004A842	0x00000007	[  6] literal string: filter
0x10004A849	0x00000006	[  6] literal string: float
0x10004A84F	0x00000009	[  6] literal string: fromkeys
0x10004A858	0x00000009	[  6] literal string: function
0x10004A861	0x0000000A	[  6] literal string: generator
0x10004A86B	0x00000007	[  6] literal string: getter
0x10004A872	0x0000000A	[  6] literal string: heap_lock
0x10004A87C	0x0000000C	[  6] literal string: heap_unlock
0x10004A888	0x00000004	[  6] literal string: hex
0x10004A88C	0x00000005	[  6] literal string: imag
0x10004A891	0x0000000D	[  6] literal string: intersection
0x10004A89E	0x00000014	[  6] literal string: intersection_update
0x10004A8B2	0x0000000B	[  6] literal string: isdisjoint
0x10004A8BD	0x00000009	[  6] literal string: issubset
0x10004A8C6	0x0000000B	[  6] literal string: issuperset
0x10004A8D1	0x00000009	[  6] literal string: iterable
0x10004A8DA	0x00000009	[  6] literal string: iterator
0x10004A8E3	0x00000002	[  6] literal string: j
0x10004A8E5	0x00000003	[  6] literal string: jx
0x10004A8E8	0x00000006	[  6] literal string: l16si
0x10004A8EE	0x00000006	[  6] literal string: l16ui
0x10004A8F4	0x00000005	[  6] literal string: l32i
0x10004A8F9	0x00000005	[  6] literal string: l8ui
0x10004A8FE	0x00000006	[  6] literal string: label
0x10004A904	0x00000004	[  6] literal string: ldr
0x10004A908	0x00000005	[  6] literal string: ldrb
0x10004A90D	0x00000006	[  6] literal string: ldrex
0x10004A913	0x00000005	[  6] literal string: ldrh
0x10004A918	0x00000004	[  6] literal string: lsl
0x10004A91C	0x00000004	[  6] literal string: lsr
0x10004A920	0x00000004	[  6] literal string: max
0x10004A924	0x00000004	[  6] literal string: min
0x10004A928	0x00000007	[  6] literal string: module
0x10004A92F	0x00000004	[  6] literal string: mov
0x10004A933	0x00000006	[  6] literal string: mov_n
0x10004A939	0x00000005	[  6] literal string: movi
0x10004A93E	0x00000005	[  6] literal string: movt
0x10004A943	0x00000005	[  6] literal string: movw
0x10004A948	0x00000006	[  6] literal string: movwt
0x10004A94E	0x00000004	[  6] literal string: mrs
0x10004A952	0x00000005	[  6] literal string: mull
0x10004A957	0x00000007	[  6] literal string: native
0x10004A95E	0x00000004	[  6] literal string: nop
0x10004A962	0x00000004	[  6] literal string: oct
0x10004A966	0x0000000A	[  6] literal string: opt_level
0x10004A970	0x00000004	[  6] literal string: or_
0x10004A974	0x00000005	[  6] literal string: pack
0x10004A979	0x0000000A	[  6] literal string: pack_into
0x10004A983	0x0000000B	[  6] literal string: pend_throw
0x10004A98E	0x00000009	[  6] literal string: property
0x10004A997	0x00000004	[  6] literal string: ptr
0x10004A99B	0x00000006	[  6] literal string: ptr16
0x10004A9A1	0x00000006	[  6] literal string: ptr32
0x10004A9A7	0x00000005	[  6] literal string: ptr8
0x10004A9AC	0x00000005	[  6] literal string: push
0x10004A9B1	0x00000005	[  6] literal string: rbit
0x10004A9B6	0x00000005	[  6] literal string: real
0x10004A9BB	0x00000006	[  6] literal string: ret_n
0x10004A9C1	0x00000009	[  6] literal string: reversed
0x10004A9CA	0x00000005	[  6] literal string: s16i
0x10004A9CF	0x00000005	[  6] literal string: s32i
0x10004A9D4	0x00000004	[  6] literal string: s8i
0x10004A9D8	0x00000005	[  6] literal string: sdiv
0x10004A9DD	0x00000007	[  6] literal string: setter
0x10004A9E4	0x00000006	[  6] literal string: slice
0x10004A9EA	0x00000005	[  6] literal string: strb
0x10004A9EF	0x00000006	[  6] literal string: strex
0x10004A9F5	0x00000005	[  6] literal string: strh
0x10004A9FA	0x00000004	[  6] literal string: sub
0x10004A9FE	0x00000015	[  6] literal string: symmetric_difference
0x10004AA13	0x0000001C	[  6] literal string: symmetric_difference_update
0x10004AA2F	0x00000005	[  6] literal string: udiv
0x10004AA34	0x00000005	[  6] literal string: uint
0x10004AA39	0x00000006	[  6] literal string: union
0x10004AA3F	0x00000007	[  6] literal string: unpack
0x10004AA46	0x0000000C	[  6] literal string: unpack_from
0x10004AA52	0x00000008	[  6] literal string: ustruct
0x10004AA5A	0x00000005	[  6] literal string: vcmp
0x10004AA5F	0x0000000D	[  6] literal string: vcvt_f32_s32
0x10004AA6C	0x0000000D	[  6] literal string: vcvt_s32_f32
0x10004AA79	0x00000006	[  6] literal string: viper
0x10004AA7F	0x00000005	[  6] literal string: vldr
0x10004AA84	0x00000005	[  6] literal string: vmov
0x10004AA89	0x00000005	[  6] literal string: vmrs
0x10004AA8E	0x00000005	[  6] literal string: vneg
0x10004AA93	0x00000006	[  6] literal string: vsqrt
0x10004AA99	0x00000005	[  6] literal string: vstr
0x10004AA9E	0x00000004	[  6] literal string: wfi
0x10004AAA2	0x00000004	[  6] literal string: xor
0x10004AAA6	0x0000000E	[  6] literal string: name too long
0x10004AAB4	0x0000000A	[  6] literal string: find_qstr
0x10004AABE	0x00000007	[  6] literal string: qstr.c
0x10004AAC5	0x0000000F	[  6] literal string: *q < pool->len
0x10004AAD4	0x0000000E	[  7] literal string: vstr_add_char
0x10004AAE2	0x00000007	[  7] literal string: vstr.c
0x10004AAE9	0x0000000D	[  7] literal string: c < 0x110000
0x10004AAF6	0x00000010	[  8] literal string: mp_print_mp_int
0x10004AB06	0x0000000A	[  8] literal string: mpprint.c
0x10004AB10	0x00000033	[  8] literal string: base == 2 || base == 8 || base == 10 || base == 16
0x10004AB43	0x00000005	[  8] literal string: true
0x10004AB48	0x00000006	[  8] literal string: false
0x10004AB4E	0x00000007	[  8] literal string: (null)
0x10004AB55	0x0000000B	[  8] literal string: mp_vprintf
0x10004AB60	0x00000027	[  8] literal string: *fmt == '%' || !"unsupported fmt char"
0x10004AB87	0x00000011	[ 10] literal string: mpz_set_from_str
0x10004AB98	0x00000006	[ 10] literal string: mpz.c
0x10004AB9E	0x0000000B	[ 10] literal string: base <= 36
0x10004ABA9	0x00000010	[ 10] literal string: mpz_divmod_inpl
0x10004ABB9	0x00000012	[ 10] literal string: !mpz_is_zero(rhs)
0x10004ABCB	0x00000010	[ 10] literal string: mpz_as_str_inpl
0x10004ABDB	0x0000000C	[ 10] literal string: str != NULL
0x10004ABE7	0x00000018	[ 10] literal string: 2 <= base && base <= 32
0x10004ABFF	0x0000000D	[ 10] literal string: mpz_need_dig
0x10004AC0C	0x0000000E	[ 10] literal string: !z->fixed_dig
0x10004AC1A	0x0000000B	[ 10] literal string: mpn_or_neg
0x10004AC25	0x0000000C	[ 10] literal string: carryi == 0
0x10004AC31	0x0000000A	[ 10] literal string: mpz_clone
0x10004AC3B	0x00000010	[ 10] literal string: src->alloc != 0
0x10004AC4B	0x00000045	[ 12] literal string: ()[]{},;~:e=<e=c<e=>e=c>e=*e=c*e=+e=-e=e>&e=|e=/e=c/e=%e=^e=@e==e=!.
0x10004AC90	0x00000009	[ 12] literal string: .format(
0x10004AC99	0x00000015	[ 12] literal string: unicode name escapes
0x10004ACAE	0x00000006	[ 12] literal string: False
0x10004ACB4	0x00000005	[ 12] literal string: True
0x10004ACB9	0x0000000A	[ 12] literal string: __debug__
0x10004ACC3	0x00000004	[ 12] literal string: and
0x10004ACC7	0x00000003	[ 12] literal string: as
0x10004ACCA	0x00000007	[ 12] literal string: assert
0x10004ACD1	0x00000006	[ 12] literal string: async
0x10004ACD7	0x00000006	[ 12] literal string: await
0x10004ACDD	0x00000006	[ 12] literal string: break
0x10004ACE3	0x00000006	[ 12] literal string: class
0x10004ACE9	0x00000009	[ 12] literal string: continue
0x10004ACF2	0x00000004	[ 12] literal string: def
0x10004ACF6	0x00000004	[ 12] literal string: del
0x10004ACFA	0x00000005	[ 12] literal string: elif
0x10004ACFF	0x00000005	[ 12] literal string: else
0x10004AD04	0x00000007	[ 12] literal string: except
0x10004AD0B	0x00000008	[ 12] literal string: finally
0x10004AD13	0x00000004	[ 12] literal string: for
0x10004AD17	0x00000005	[ 12] literal string: from
0x10004AD1C	0x00000007	[ 12] literal string: global
0x10004AD23	0x00000003	[ 12] literal string: if
0x10004AD26	0x00000007	[ 12] literal string: import
0x10004AD2D	0x00000003	[ 12] literal string: in
0x10004AD30	0x00000003	[ 12] literal string: is
0x10004AD33	0x00000007	[ 12] literal string: lambda
0x10004AD3A	0x00000009	[ 12] literal string: nonlocal
0x10004AD43	0x00000004	[ 12] literal string: not
0x10004AD47	0x00000003	[ 12] literal string: or
0x10004AD4A	0x00000005	[ 12] literal string: pass
0x10004AD4F	0x00000006	[ 12] literal string: raise
0x10004AD55	0x00000007	[ 12] literal string: return
0x10004AD5C	0x00000004	[ 12] literal string: try
0x10004AD60	0x00000006	[ 12] literal string: while
0x10004AD66	0x00000005	[ 12] literal string: with
0x10004AD6B	0x00000006	[ 12] literal string: yield
0x10004AD71	0x00000009	[ 13] literal string: mp_parse
0x10004AD7A	0x00000008	[ 13] literal string: parse.c
0x10004AD82	0x00000016	[ 13] literal string: kind == RULE_ARG_RULE
0x10004AD98	0x00000006	[ 13] literal string: i > 0
0x10004AD9E	0x00000007	[ 13] literal string: i == n
0x10004ADA5	0x00000031	[ 13] literal string: (rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST
0x10004ADD6	0x0000002C	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE
0x10004AE02	0x00000007	[ 13] literal string: i >= 1
0x10004AE09	0x00000012	[ 13] literal string: unexpected indent
0x10004AE1B	0x0000002E	[ 13] literal string: unindent doesn't match any outer indent level
0x10004AE49	0x00000013	[ 13] literal string: malformed f-string
0x10004AE5C	0x00000020	[ 13] literal string: raw f-strings are not supported
0x10004AE7C	0x0000000F	[ 13] literal string: invalid syntax
0x10004AE8B	0x0000001D	[ 13] literal string: parser.result_stack_top == 1
0x10004AEA8	0x0000001D	[ 13] literal string: mp_parse_node_convert_to_obj
0x10004AEC5	0x0000001B	[ 13] literal string: mp_parse_node_is_const(pn)
0x10004AEE0	0x00000033	[ 13] literal string: MP_PARSE_NODE_LEAF_KIND(pn) == MP_PARSE_NODE_TOKEN
0x10004AF13	0x00000019	[ 13] literal string: arg == MP_TOKEN_ELLIPSIS
0x10004AF2C	0x00000032	[ 13] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_atom_paren)
0x10004AF5E	0x00000040	[ 13] literal string: MP_PARSE_NODE_IS_NULL(((mp_parse_node_struct_t *)pn)->nodes[0])
0x10004AF9E	0x00000013	[ 13] literal string: push_rule_from_arg
0x10004AFB1	0x0000005F	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE
0x10004B010	0x0000000C	[ 13] literal string: peek_result
0x10004B01C	0x0000001F	[ 13] literal string: parser->result_stack_top > pos
0x10004B03B	0x0000000B	[ 13] literal string: pop_result
0x10004B046	0x0000001D	[ 13] literal string: parser->result_stack_top > 0
0x10004B063	0x00000011	[ 13] literal string: push_result_rule
0x10004B074	0x0000000E	[ 13] literal string: num_args == 2
0x10004B082	0x0000001D	[ 13] literal string: pn == peek_result(parser, 0)
0x10004B09F	0x0000000F	[ 13] literal string: fold_constants
0x10004B0AE	0x00000034	[ 13] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
0x10004B0E2	0x0000000F	[ 13] literal string: not a constant
0x10004B0F1	0x0000001B	[ 13] literal string: elem->value == MP_OBJ_NULL
0x10004B10C	0x00000024	[ 13] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
0x10004B130	0x0000000C	[ 13] literal string: build_tuple
0x10004B13C	0x0000002E	[ 13] literal string: peek_rule(parser, 0) == RULE_testlist_comp_3b
0x10004B16A	0x0000002B	[ 13] literal string: peek_rule(parser, 1) == RULE_testlist_comp
0x10004B195	0x0000000A	[ 13] literal string: peek_rule
0x10004B19F	0x0000001B	[ 13] literal string: parser->rule_stack_top > n
0x10004B1BA	0x0000000A	[ 14] literal string: scope_new
0x10004B1C4	0x00000008	[ 14] literal string: scope.c
0x10004B1CC	0x0000001C	[ 14] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
0x10004B1E8	0x0000001C	[ 14] literal string: scope_close_over_in_parents
0x10004B204	0x00000012	[ 14] literal string: s->parent != NULL
0x10004B216	0x0000003F	[ 14] literal string: id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL
0x10004B255	0x00000024	[ 15] literal string: inline assembler must be a function
0x10004B279	0x00000019	[ 15] literal string: compile_scope_inline_asm
0x10004B292	0x0000000A	[ 15] literal string: compile.c
0x10004B29C	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(scope->pn)
0x10004B2BF	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef
0x10004B2EC	0x0000000D	[ 15] literal string: unknown type
0x10004B2F9	0x00000028	[ 15] literal string: return annotation must be an identifier
0x10004B321	0x00000022	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(nodes[i])
0x10004B343	0x00000023	[ 15] literal string: expecting an assembler instruction
0x10004B366	0x00000028	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns2->nodes[0])
0x10004B38E	0x0000001C	[ 15] literal string: 'label' requires 1 argument
0x10004B3AA	0x00000010	[ 15] literal string: label redefined
0x10004B3BA	0x0000001C	[ 15] literal string: 'align' requires 1 argument
0x10004B3D6	0x00000025	[ 15] literal string: 'data' requires at least 2 arguments
0x10004B3FB	0x00000022	[ 15] literal string: 'data' requires integer arguments
0x10004B41D	0x0000000E	[ 15] literal string: compile_scope
0x10004B42B	0x0000001C	[ 15] literal string: scope->kind == SCOPE_MODULE
0x10004B447	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3
0x10004B470	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2
0x10004B499	0x00000039	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for)
0x10004B4D2	0x0000001B	[ 15] literal string: scope->kind == SCOPE_CLASS
0x10004B4ED	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef
0x10004B51B	0x0000000B	[ 15] literal string: id != NULL
0x10004B526	0x0000001C	[ 15] literal string: comp->cur_except_level == 0
0x10004B542	0x0000000D	[ 15] literal string: compile_node
0x10004B54F	0x00000032	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object
0x10004B581	0x00000012	[ 15] literal string: compile_decorated
0x10004B593	0x00000035	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)
0x10004B5C8	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_ID(name_nodes[j])
0x10004B5EB	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns_body->nodes[0])
0x10004B617	0x00000033	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef
0x10004B64A	0x0000001E	[ 15] literal string: invalid micropython decorator
0x10004B668	0x0000000D	[ 15] literal string: invalid arch
0x10004B675	0x0000001E	[ 15] literal string: compile_funcdef_lambdef_param
0x10004B693	0x0000001F	[ 15] literal string: pn_kind == PN_varargslist_name
0x10004B6B2	0x0000002E	[ 15] literal string: non-default argument follows default argument
0x10004B6E0	0x0000000F	[ 15] literal string: * arg after **
0x10004B6EF	0x0000000E	[ 15] literal string: too many args
0x10004B6FD	0x00000021	[ 15] literal string: LHS of keyword arg must be an id
0x10004B71E	0x00000018	[ 15] literal string: positional arg after **
0x10004B736	0x00000021	[ 15] literal string: positional arg after keyword arg
0x10004B757	0x0000001B	[ 15] literal string: can't assign to expression
0x10004B772	0x0000001F	[ 15] literal string: identifier redefined as global
0x10004B791	0x0000001E	[ 15] literal string: no binding for nonlocal found
0x10004B7AF	0x00000021	[ 15] literal string: identifier redefined as nonlocal
0x10004B7D0	0x00000016	[ 15] literal string: compile_comprehension
0x10004B7E6	0x00000012	[ 15] literal string: compile_expr_stmt
0x10004B7F8	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0])
0x10004B81F	0x00000009	[ 15] literal string: c_assign
0x10004B828	0x0000001B	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn)
0x10004B843	0x0000003E	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)
0x10004B881	0x00000013	[ 15] literal string: c_assign_atom_expr
0x10004B894	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1])
0x10004B8C0	0x0000001A	[ 15] literal string: multiple *x in assignment
0x10004B8DA	0x0000000B	[ 15] literal string: c_del_stmt
0x10004B8E5	0x00000033	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp)
0x10004B918	0x00000018	[ 15] literal string: can't delete expression
0x10004B930	0x00000020	[ 15] literal string: 'break'/'continue' outside loop
0x10004B950	0x00000018	[ 15] literal string: compile_break_cont_stmt
0x10004B968	0x0000003C	[ 15] literal string: comp->cur_except_level >= comp->break_continue_except_level
0x10004B9A4	0x0000001A	[ 15] literal string: 'return' outside function
0x10004B9BE	0x0000000F	[ 15] literal string: do_import_name
0x10004B9CD	0x00000031	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)
0x10004B9FE	0x00000014	[ 15] literal string: compile_import_from
0x10004BA12	0x00000029	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn_import_source)
0x10004BA3B	0x0000001D	[ 15] literal string: import * not at module level
0x10004BA58	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name)
0x10004BA95	0x00000025	[ 15] literal string: can't declare nonlocal in outer code
0x10004BABA	0x00000013	[ 15] literal string: compile_async_stmt
0x10004BACD	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[0])
0x10004BAF4	0x00000026	[ 15] literal string: async for/with outside async function
0x10004BB1A	0x00000030	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns0) == PN_with_stmt
0x10004BB4A	0x0000001E	[ 15] literal string: compile_decrease_except_level
0x10004BB68	0x0000001B	[ 15] literal string: comp->cur_except_level > 0
0x10004BB83	0x00000018	[ 15] literal string: compile_async_with_stmt
0x10004BB9B	0x00000006	[ 15] literal string: n > 0
0x10004BBA1	0x00000010	[ 15] literal string: compile_if_stmt
0x10004BBB1	0x0000003A	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)
0x10004BBEB	0x00000021	[ 15] literal string: compile_for_stmt_optimised_range
0x10004BC0C	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_SMALL_INT(pn_step)
0x10004BC30	0x00000011	[ 15] literal string: compile_try_stmt
0x10004BC41	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
0x10004BC68	0x00000014	[ 15] literal string: compile_try_finally
0x10004BC7C	0x0000001F	[ 15] literal string: MP_PARSE_NODE_IS_NULL(pn_else)
0x10004BC9B	0x00000013	[ 15] literal string: compile_try_except
0x10004BCAE	0x00000040	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)
0x10004BCEE	0x0000001E	[ 15] literal string: default 'except' must be last
0x10004BD0C	0x00000012	[ 15] literal string: compile_with_stmt
0x10004BD1E	0x00000015	[ 15] literal string: compile_test_if_expr
0x10004BD33	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else)
0x10004BD70	0x00000013	[ 15] literal string: compile_comparison
0x10004BD83	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])
0x10004BDAA	0x00000016	[ 15] literal string: kind == PN_comp_op_is
0x10004BDC0	0x0000001D	[ 15] literal string: *x must be assignment target
0x10004BDDD	0x00000011	[ 15] literal string: compile_factor_2
0x10004BDEE	0x00000019	[ 15] literal string: 'await' outside function
0x10004BE07	0x00000018	[ 15] literal string: super() can't find self
0x10004BE1F	0x00000013	[ 15] literal string: compile_atom_paren
0x10004BE32	0x0000001A	[ 15] literal string: compile_atom_brace_helper
0x10004BE4C	0x0000001D	[ 15] literal string: expecting key:value for dict
0x10004BE69	0x0000001F	[ 15] literal string: expecting just a value for set
0x10004BE88	0x0000002F	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for
0x10004BEB7	0x00000012	[ 15] literal string: compile_subscript
0x10004BEC9	0x00000031	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_subscript_3
0x10004BEFA	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_sliceop
0x10004BF27	0x00000019	[ 15] literal string: 'yield' outside function
0x10004BF40	0x00000020	[ 15] literal string: compile_scope_func_lambda_param
0x10004BF60	0x00000037	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)
0x10004BF97	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star
0x10004BFC5	0x00000015	[ 15] literal string: argument name reused
0x10004BFDA	0x00000012	[ 15] literal string: unknown type '%q'
0x10004BFEC	0x00000021	[ 15] literal string: annotation must be an identifier
0x10004C00D	0x00000018	[ 15] literal string: compile_scope_comp_iter
0x10004C025	0x0000004C	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t *)pn_iter) == PN_comp_for
0x10004C071	0x00000015	[ 15] literal string: scope_compute_things
0x10004C086	0x00000021	[ 15] literal string: !(id2->flags & ID_FLAG_IS_PARAM)
0x10004C0A7	0x00000015	[ 16] literal string: mp_emit_common_id_op
0x10004C0BC	0x0000000D	[ 16] literal string: emitcommon.c
0x10004C0C9	0x0000003F	[ 16] literal string: id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE
0x10004C108	0x00000014	[ 17] literal string: mp_emit_bc_end_pass
0x10004C11C	0x00000009	[ 17] literal string: emitbc.c
0x10004C125	0x00000016	[ 17] literal string: emit->stack_size == 0
0x10004C13B	0x00000015	[ 17] literal string: id->local_num <= 255
0x10004C150	0x0000002F	[ 17] literal string: emit->code_info_offset <= emit->code_info_size
0x10004C17F	0x0000002D	[ 17] literal string: emit->bytecode_offset <= emit->bytecode_size
0x10004C1AC	0x00000012	[ 17] literal string: bytecode overflow
0x10004C1BE	0x0000001D	[ 17] literal string: mp_emit_bc_adjust_stack_size
0x10004C1DB	0x00000028	[ 17] literal string: (mp_int_t)emit->stack_size + delta >= 0
0x10004C203	0x00000018	[ 17] literal string: mp_emit_bc_label_assign
0x10004C21B	0x00000019	[ 17] literal string: l < emit->max_num_labels
0x10004C234	0x00000054	[ 17] literal string: emit->pass == MP_PASS_STACK_SIZE || emit->bytecode_offset <= emit->label_offsets[l]
0x10004C288	0x00000020	[ 17] literal string: mp_emit_bc_load_const_small_int
0x10004C2A8	0x00000017	[ 17] literal string: MP_SMALL_INT_FITS(arg)
0x10004C2BF	0x00000018	[ 17] literal string: mp_emit_bc_make_closure
0x10004C2D7	0x00000015	[ 17] literal string: n_closed_over <= 255
0x10004C2EC	0x00000019	[ 17] literal string: mp_emit_bc_raise_varargs
0x10004C305	0x0000000C	[ 17] literal string: n_args <= 2
0x10004C311	0x00000020	[ 17] literal string: emit_get_cur_to_write_code_info
0x10004C331	0x00000044	[ 17] literal string: emit->code_info_offset + num_bytes_to_write <= emit->code_info_size
0x10004C375	0x00000021	[ 17] literal string: emit_write_code_info_bytes_lines
0x10004C396	0x00000027	[ 17] literal string: bytes_to_skip > 0 || lines_to_skip > 0
0x10004C3BD	0x0000001F	[ 17] literal string: emit_get_cur_to_write_bytecode
0x10004C3DC	0x00000042	[ 17] literal string: emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size
0x10004C41E	0x0000001F	[ 17] literal string: emit_write_bytecode_byte_label
0x10004C43D	0x00000022	[ 17] literal string: is_signed || bytecode_offset >= 0
0x10004C45F	0x00000030	[ 17] literal string: 0 <= bytecode_offset && bytecode_offset <= 0x7f
0x10004C48F	0x00000017	[ 18] literal string: mp_asm_base_start_pass
0x10004C4A6	0x0000000A	[ 18] literal string: asmbase.c
0x10004C4B0	0x00000016	[ 18] literal string: as->code_base != NULL
0x10004C4C6	0x00000023	[ 18] literal string: mp_asm_base_get_cur_to_write_bytes
0x10004C4E9	0x00000036	[ 18] literal string: as->code_offset + num_bytes_to_write <= as->code_size
0x10004C51F	0x00000019	[ 18] literal string: mp_asm_base_label_assign
0x10004C538	0x0000001B	[ 18] literal string: label < as->max_num_labels
0x10004C553	0x00000027	[ 18] literal string: as->label_offsets[label] == (size_t)-1
0x10004C57A	0x0000002C	[ 18] literal string: as->label_offsets[label] == as->code_offset
0x10004C5A6	0x00000018	[ 19] literal string: asm_x64_test_r8_with_r8
0x10004C5BE	0x00000009	[ 19] literal string: asmx64.c
0x10004C5C7	0x0000000E	[ 19] literal string: src_r64_a < 8
0x10004C5D5	0x0000000E	[ 19] literal string: src_r64_b < 8
0x10004C5E3	0x00000011	[ 19] literal string: asm_x64_setcc_r8
0x10004C5F4	0x0000000C	[ 19] literal string: dest_r8 < 8
0x10004C600	0x00000010	[ 19] literal string: asm_x64_jmp_reg
0x10004C610	0x0000000C	[ 19] literal string: src_r64 < 8
0x10004C61C	0x0000000E	[ 19] literal string: asm_x64_entry
0x10004C62A	0x00000010	[ 19] literal string: num_locals >= 0
0x10004C63A	0x00000011	[ 19] literal string: asm_x64_call_ind
0x10004C64B	0x0000000D	[ 19] literal string: temp_r64 < 8
0x10004C658	0x0000000F	[ 19] literal string: get_label_dest
0x10004C667	0x00000020	[ 19] literal string: label < as->base.max_num_labels
0x10004C687	0x00000017	[ 20] literal string: emit_native_start_pass
0x10004C69E	0x0000000D	[ 20] literal string: emitnative.c
0x10004C6AB	0x00000028	[ 20] literal string: id->local_num < emit->local_vtype_alloc
0x10004C6D3	0x00000015	[ 20] literal string: emit_native_end_pass
0x10004C6E8	0x0000001A	[ 20] literal string: emit->exc_stack_size == 0
0x10004C702	0x0000003B	[ 20] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
0x10004C73D	0x0000000D	[ 20] literal string: adjust_stack
0x10004C74A	0x00000033	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
0x10004C77D	0x00000052	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
0x10004C7CF	0x00000022	[ 20] literal string: local '%q' used before type known
0x10004C7F1	0x00000015	[ 20] literal string: conversion to object
0x10004C806	0x0000002C	[ 20] literal string: local '%q' has type '%q' but source is '%q'
0x10004C832	0x00000019	[ 20] literal string: emit_native_store_global
0x10004C84B	0x00000015	[ 20] literal string: vtype == VTYPE_PYOBJ
0x10004C860	0x0000001C	[ 20] literal string: emit_native_leave_exc_stack
0x10004C87C	0x00000019	[ 20] literal string: emit->exc_stack_size > 0
0x10004C895	0x00000018	[ 20] literal string: emit_native_import_name
0x10004C8AD	0x0000001E	[ 20] literal string: vtype_fromlist == VTYPE_PYOBJ
0x10004C8CB	0x0000001B	[ 20] literal string: vtype_level == VTYPE_PYOBJ
0x10004C8E6	0x00000018	[ 20] literal string: emit_native_import_from
0x10004C8FE	0x0000001C	[ 20] literal string: vtype_module == VTYPE_PYOBJ
0x10004C91A	0x00000018	[ 20] literal string: emit_native_import_star
0x10004C932	0x00000018	[ 20] literal string: emit_native_load_method
0x10004C94A	0x0000001A	[ 20] literal string: vtype_base == VTYPE_PYOBJ
0x10004C964	0x00000026	[ 20] literal string: emit_get_stack_pointer_to_reg_for_pop
0x10004C98A	0x00000018	[ 20] literal string: si->kind == STACK_VALUE
0x10004C9A2	0x00000015	[ 20] literal string: can't load from '%q'
0x10004C9B7	0x0000001B	[ 20] literal string: can't load with '%q' index
0x10004C9D2	0x00000011	[ 20] literal string: can't store '%q'
0x10004C9E3	0x00000014	[ 20] literal string: can't store to '%q'
0x10004C9F7	0x0000001C	[ 20] literal string: can't store with '%q' index
0x10004CA13	0x0000001A	[ 20] literal string: emit_native_delete_subscr
0x10004CA2D	0x0000001B	[ 20] literal string: vtype_index == VTYPE_PYOBJ
0x10004CA48	0x00000016	[ 20] literal string: emit_native_load_attr
0x10004CA5E	0x00000017	[ 20] literal string: emit_native_store_attr
0x10004CA75	0x00000018	[ 20] literal string: emit_native_delete_attr
0x10004CA8D	0x00000028	[ 20] literal string: can't implicitly convert '%q' to 'bool'
0x10004CAB5	0x00000017	[ 20] literal string: emit_native_setup_with
0x10004CACC	0x0000001A	[ 20] literal string: emit_native_pop_exc_stack
0x10004CAE6	0x00000016	[ 20] literal string: e->is_active == false
0x10004CAFC	0x00000015	[ 20] literal string: emit_native_get_iter
0x10004CB11	0x0000001C	[ 20] literal string: unary op %q not implemented
0x10004CB2D	0x00000021	[ 20] literal string: div/mod not implemented for uint
0x10004CB4E	0x0000001B	[ 20] literal string: comparison of int and uint
0x10004CB69	0x0000001D	[ 20] literal string: binary op %q not implemented
0x10004CB86	0x00000029	[ 20] literal string: can't do binary op between '%q' and '%q'
0x10004CBAF	0x00000018	[ 20] literal string: emit_native_build_slice
0x10004CBC7	0x0000001B	[ 20] literal string: vtype_start == VTYPE_PYOBJ
0x10004CBE2	0x0000001A	[ 20] literal string: vtype_stop == VTYPE_PYOBJ
0x10004CBFC	0x0000000C	[ 20] literal string: n_args == 3
0x10004CC08	0x0000001A	[ 20] literal string: vtype_step == VTYPE_PYOBJ
0x10004CC22	0x00000016	[ 20] literal string: emit_native_store_map
0x10004CC38	0x00000019	[ 20] literal string: vtype_key == VTYPE_PYOBJ
0x10004CC51	0x0000001B	[ 20] literal string: vtype_value == VTYPE_PYOBJ
0x10004CC6C	0x00000019	[ 20] literal string: vtype_map == VTYPE_PYOBJ
0x10004CC85	0x00000017	[ 20] literal string: emit_native_store_comp
0x10004CC9C	0x0000001A	[ 20] literal string: vtype_item == VTYPE_PYOBJ
0x10004CCB6	0x00000020	[ 20] literal string: vtype_collection == VTYPE_PYOBJ
0x10004CCD6	0x0000001C	[ 20] literal string: emit_native_unpack_sequence
0x10004CCF2	0x00000016	[ 20] literal string: emit_native_unpack_ex
0x10004CD08	0x0000001A	[ 20] literal string: emit_native_call_function
0x10004CD22	0x00000024	[ 20] literal string: n_positional == 1 && n_keyword == 0
0x10004CD46	0x0000000C	[ 20] literal string: !star_flags
0x10004CD52	0x00000008	[ 20] literal string: casting
0x10004CD5A	0x00000019	[ 20] literal string: vtype_fun == VTYPE_PYOBJ
0x10004CD73	0x00000022	[ 20] literal string: return expected '%q' but got '%q'
0x10004CD95	0x00000019	[ 20] literal string: emit_native_return_value
0x10004CDAE	0x0000001A	[ 20] literal string: emit_native_raise_varargs
0x10004CDC8	0x0000000C	[ 20] literal string: n_args == 1
0x10004CDD4	0x00000015	[ 20] literal string: must raise an object
0x10004CDE9	0x0000000D	[ 20] literal string: native yield
0x10004CDF6	0x0000000E	[ 21] literal string: asm_x86_entry
0x10004CE04	0x00000009	[ 21] literal string: asmx86.c
0x10004CE0D	0x00000011	[ 21] literal string: asm_x86_call_ind
0x10004CE1E	0x0000000C	[ 21] literal string: n_args <= 4
0x10004CE2A	0x00000010	[ 23] literal string: asm_thumb_entry
0x10004CE3A	0x0000000B	[ 23] literal string: asmthumb.c
0x10004CE45	0x00000013	[ 23] literal string: asm_thumb_format_4
0x10004CE58	0x0000001C	[ 23] literal string: rlo_dest < ASM_THUMB_REG_R8
0x10004CE74	0x0000001B	[ 23] literal string: rlo_src < ASM_THUMB_REG_R8
0x10004CE8F	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i16
0x10004CEA5	0x0000001D	[ 23] literal string: reg_dest < ASM_THUMB_REG_R15
0x10004CEC2	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i32
0x10004CED8	0x0000001C	[ 23] literal string: reg_dest < ASM_THUMB_REG_R8
0x10004CEF4	0x0000003D	[ 23] literal string: !as->base.code_base || !(3u & (uintptr_t)as->base.code_base)
0x10004CF31	0x00000020	[ 23] literal string: asm_thumb_mov_reg_i32_optimised
0x10004CF51	0x00000010	[ 23] literal string: clz + ctz <= 32
0x10004CF61	0x00000018	[ 23] literal string: asm_thumb_mov_local_reg
0x10004CF79	0x00000018	[ 23] literal string: asm_thumb_mov_reg_local
0x10004CF91	0x0000001D	[ 23] literal string: asm_thumb_mov_reg_local_addr
0x10004CFAE	0x00000035	[ 23] literal string: as->base.pass < MP_ASM_PASS_EMIT || word_offset >= 0
0x10004CFE3	0x00000016	[ 23] literal string: native method too big
0x10004CFF9	0x00000013	[ 23] literal string: asm_thumb_bcc_rel9
0x10004D00C	0x00000011	[ 23] literal string: SIGNED_FIT9(rel)
0x10004D01D	0x00000012	[ 23] literal string: asm_thumb_b_rel12
0x10004D02F	0x00000012	[ 23] literal string: SIGNED_FIT12(rel)
0x10004D041	0x00000013	[ 23] literal string: asm_thumb_format_3
0x10004D054	0x0000000B	[ 23] literal string: asmthumb.h
0x10004D05F	0x00000017	[ 23] literal string: rlo < ASM_THUMB_REG_R8
0x10004D076	0x0000001A	[ 23] literal string: asm_thumb_mov_local_check
0x10004D090	0x00000011	[ 23] literal string: word_offset >= 0
0x10004D0A1	0x00000022	[ 23] literal string: too many locals for native method
0x10004D0C3	0x00000014	[ 23] literal string: asm_thumb_format_11
0x10004D0D7	0x0000001D	[ 23] literal string: asm_thumb_add_reg_reg_offset
0x10004D0F4	0x00000002	[ 23] literal string: 0
0x10004D0F6	0x00000033	[ 25] literal string: can only have up to 4 parameters to Thumb assembly
0x10004D129	0x00000032	[ 25] literal string: parameters must be registers in sequence r0 to r3
0x10004D15B	0x00000018	[ 25] literal string: emit_inline_thumb_label
0x10004D173	0x00000012	[ 25] literal string: emitinlinethumb.c
0x10004D185	0x00000021	[ 25] literal string: label_num < emit->max_num_labels
0x10004D1A6	0x0000000A	[ 25] literal string: APSR_nzcv
0x10004D1B0	0x00000006	[ 25] literal string: FPSCR
0x10004D1B6	0x00000035	[ 25] literal string: unsupported Thumb instruction '%s' with %d arguments
0x10004D1EB	0x00000014	[ 25] literal string: branch not in range
0x10004D1FF	0x00000019	[ 25] literal string: '%s' expects at most r%d
0x10004D218	0x0000001D	[ 25] literal string: '%s' expects an FPU register
0x10004D235	0x00000018	[ 25] literal string: '%s' expects a register
0x10004D24D	0x0000002B	[ 25] literal string: '%s' expects an address of the form [a, b]
0x10004D278	0x00000018	[ 25] literal string: '%s' expects an integer
0x10004D290	0x0000002B	[ 25] literal string: '%s' integer 0x%x doesn't fit in mask 0x%x
0x10004D2BB	0x00000015	[ 25] literal string: '%s' expects a label
0x10004D2D0	0x00000017	[ 25] literal string: label '%q' not defined
0x10004D2E7	0x00000010	[ 25] literal string: get_arg_reglist
0x10004D2F7	0x00000029	[ 25] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 1
0x10004D320	0x0000001B	[ 25] literal string: '%s' expects {r0, r1, ...}
0x10004D33B	0x00000020	[ 25] literal string: '%s' expects a special register
0x10004D35B	0x00000013	[ 25] literal string: asm_thumb_format_1
0x10004D36E	0x00000013	[ 25] literal string: asm_thumb_format_2
0x10004D381	0x0000000E	[ 26] literal string: asm_arm_entry
0x10004D38F	0x00000009	[ 26] literal string: asmarm.c
0x10004D398	0x00000016	[ 26] literal string: asm_arm_mov_reg_pcrel
0x10004D3AE	0x00000012	[ 26] literal string: asm_arm_bcc_label
0x10004D3C0	0x0000000F	[ 26] literal string: asm_arm_bl_ind
0x10004D3CF	0x00000016	[ 26] literal string: fun_id < (0x1000 / 4)
0x10004D3E5	0x00000013	[ 26] literal string: asm_arm_op_mul_reg
0x10004D3F8	0x00000009	[ 26] literal string: rd != rm
0x10004D401	0x0000002C	[ 26] literal string: asm_arm_bcc: branch does not fit in 24 bits
0x10004D42D	0x0000000D	[ 28] literal string: asm overflow
0x10004D43A	0x0000000C	[ 28] literal string: asmxtensa.c
0x10004D446	0x00000020	[ 28] literal string: ERROR: xtensa bccz out of range
0x10004D466	0x0000001F	[ 28] literal string: ERROR: xtensa bcc out of range
0x10004D485	0x00000034	[ 30] literal string: can only have up to 4 parameters to Xtensa assembly
0x10004D4B9	0x00000032	[ 30] literal string: parameters must be registers in sequence a2 to a5
0x10004D4EB	0x00000019	[ 30] literal string: emit_inline_xtensa_label
0x10004D504	0x00000013	[ 30] literal string: emitinlinextensa.c
0x10004D517	0x00000036	[ 30] literal string: unsupported Xtensa instruction '%s' with %d arguments
0x10004D54D	0x0000002A	[ 30] literal string: '%s' integer %d isn't within range %d..%d
0x10004D577	0x00000010	[ 32] literal string: mp_format_float
0x10004D587	0x0000000E	[ 32] literal string: formatfloat.c
0x10004D595	0x00000022	[ 32] literal string: (size_t)(s + 1 - buf) <= buf_size
0x10004D5B7	0x00000023	[ 34] literal string: int() arg 2 must be >= 2 and <= 36
0x10004D5DA	0x0000002A	[ 34] literal string: invalid syntax for integer with base %d: 
0x10004D604	0x0000001A	[ 34] literal string: invalid syntax for number
0x10004D61E	0x0000001A	[ 34] literal string: mp_obj_new_exception_arg1
0x10004D638	0x00000006	[ 34] literal string: obj.h
0x10004D63E	0x0000004E	[ 34] literal string: MP_OBJ_TYPE_GET_SLOT_OR_NULL(exc_type, make_new) == mp_obj_exception_make_new
0x10004D68C	0x0000001B	[ 35] literal string: mp_emit_glue_assign_native
0x10004D6A7	0x0000000B	[ 35] literal string: emitglue.c
0x10004D6B2	0x00000058	[ 35] literal string: kind == MP_CODE_NATIVE_PY || kind == MP_CODE_NATIVE_VIPER || kind == MP_CODE_NATIVE_ASM
0x10004D70A	0x00000009	[ 36] literal string: save_obj
0x10004D713	0x00000011	[ 36] literal string: persistentcode.c
0x10004D724	0x00000013	[ 36] literal string: mp_obj_is_float(o)
0x10004D737	0x0000000C	[ 37] literal string: mp_unary_op
0x10004D743	0x0000000A	[ 37] literal string: runtime.c
0x10004D74D	0x00000019	[ 37] literal string: op == MP_UNARY_OP_INVERT
0x10004D766	0x00000018	[ 37] literal string: can't convert %s to int
0x10004D77E	0x0000001E	[ 37] literal string: unsupported type for %q: '%s'
0x10004D79C	0x00000015	[ 37] literal string: negative shift count
0x10004D7B1	0x00000025	[ 37] literal string: unsupported types for %q: '%s', '%s'
0x10004D7D6	0x0000000F	[ 37] literal string: divide by zero
0x10004D7E5	0x0000001B	[ 37] literal string: '%s' object isn't callable
0x10004D800	0x00000015	[ 37] literal string: mp_load_method_maybe
0x10004D815	0x00000044	[ 37] literal string: MP_OBJ_TYPE_GET_SLOT(type, locals_dict)->base.type == &mp_type_dict
0x10004D859	0x0000000B	[ 37] literal string: mp_getiter
0x10004D864	0x00000005	[ 37] literal string: o_in
0x10004D869	0x0000001B	[ 37] literal string: '%s' object isn't iterable
0x10004D884	0x0000001E	[ 37] literal string: '%s' object isn't an iterator
0x10004D8A2	0x00000029	[ 37] literal string: memory allocation failed, heap is locked
0x10004D8CB	0x0000002E	[ 37] literal string: memory allocation failed, allocating %u bytes
0x10004D8F9	0x0000000E	[ 37] literal string: can't open %s
0x10004D907	0x00000025	[ 37] literal string: argument should be a '%q' not a '%q'
0x10004D92C	0x00000016	[ 37] literal string: mp_map_slot_is_filled
0x10004D942	0x00000011	[ 37] literal string: pos < map->alloc
0x10004D953	0x00000028	[ 40] literal string: function doesn't take keyword arguments
0x10004D97B	0x00000039	[ 40] literal string: function takes %d positional arguments but %d were given
0x10004D9B4	0x00000032	[ 40] literal string: function missing %d required positional arguments
0x10004D9E6	0x0000002F	[ 40] literal string: function expected at most %d arguments, got %d
0x10004DA15	0x00000017	[ 40] literal string: '%q' argument required
0x10004DA2C	0x00000011	[ 40] literal string: mp_arg_parse_all
0x10004DA3D	0x0000000B	[ 40] literal string: argcheck.c
0x10004DA48	0x00000034	[ 40] literal string: (allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ
0x10004DA7C	0x00000021	[ 40] literal string: extra positional arguments given
0x10004DA9D	0x0000001E	[ 40] literal string: extra keyword arguments given
0x10004DABB	0x0000003E	[ 40] literal string: keyword argument(s) not implemented - use normal args instead
0x10004DAF9	0x00000003	[ 41] literal string: : 
0x10004DAFC	0x0000000E	[ 42] literal string: mp_map_lookup
0x10004DB0A	0x00000006	[ 42] literal string: map.c
0x10004DB10	0x0000002F	[ 42] literal string: !map->is_fixed || lookup_kind == MP_MAP_LOOKUP
0x10004DB3F	0x00000006	[ 43] literal string: (nil)
0x10004DB45	0x00000005	[ 43] literal string: <%q>
0x10004DB4A	0x00000017	[ 43] literal string: mp_obj_print_exception
0x10004DB61	0x00000006	[ 43] literal string: obj.c
0x10004DB67	0x0000000B	[ 43] literal string: n % 3 == 0
0x10004DB72	0x00000024	[ 43] literal string: Traceback (most recent call last):\n
0x10004DB96	0x00000015	[ 43] literal string:   File "%q", line %d
0x10004DBAB	0x00000009	[ 43] literal string: , in %q\n
0x10004DBB4	0x0000001A	[ 43] literal string: can't convert %s to float
0x10004DBCE	0x0000001C	[ 43] literal string: can't convert %s to complex
0x10004DBEA	0x00000022	[ 43] literal string: object '%s' isn't a tuple or list
0x10004DC0C	0x00000024	[ 43] literal string: %q indices must be integers, not %s
0x10004DC30	0x00000016	[ 43] literal string: %q index out of range
0x10004DC46	0x0000002A	[ 43] literal string: '%s' object doesn't support item deletion
0x10004DC70	0x00000020	[ 43] literal string: '%s' object isn't subscriptable
0x10004DC90	0x0000002C	[ 43] literal string: '%s' object doesn't support item assignment
0x10004DCBC	0x00000025	[ 43] literal string: object with buffer protocol required
0x10004DCE1	0x0000000D	[ 44] literal string: array_append
0x10004DCEE	0x0000000B	[ 44] literal string: objarray.c
0x10004DCF9	0x00000090	[ 44] literal string: (MICROPY_PY_BUILTINS_BYTEARRAY && mp_obj_is_type(self_in, &mp_type_bytearray)) || (MICROPY_PY_ARRAY && mp_obj_is_type(self_in, &mp_type_array))
0x10004DD89	0x0000000D	[ 44] literal string: array_extend
0x10004DD96	0x00000024	[ 44] literal string: string argument without an encoding
0x10004DDBA	0x0000000C	[ 44] literal string: bytearray(b
0x10004DDC6	0x0000000B	[ 44] literal string: array('%c'
0x10004DDD1	0x00000004	[ 44] literal string: , [
0x10004DDD5	0x00000003	[ 44] literal string: , 
0x10004DDD8	0x00000002	[ 44] literal string: ]
0x10004DDDA	0x00000002	[ 44] literal string: )
0x10004DDDC	0x00000031	[ 44] literal string: only slices with step=1 (aka None) are supported
0x10004DE0D	0x0000000D	[ 44] literal string: array_subscr
0x10004DE1A	0x00000007	[ 44] literal string: sz > 0
0x10004DE21	0x00000013	[ 47] literal string: mp_obj_complex_get
0x10004DE34	0x0000000D	[ 47] literal string: objcomplex.c
0x10004DE41	0x0000002A	[ 47] literal string: mp_obj_is_type(self_in, &mp_type_complex)
0x10004DE6B	0x00000027	[ 47] literal string: can't truncate-divide a complex number
0x10004DE92	0x00000017	[ 47] literal string: complex divide by zero
0x10004DEA9	0x00000017	[ 47] literal string: 0.0 to a complex power
0x10004DEC0	0x00000004	[ 47] literal string: %sj
0x10004DEC4	0x00000004	[ 47] literal string: (%s
0x10004DEC8	0x00000002	[ 47] literal string: +
0x10004DECA	0x00000005	[ 47] literal string: %sj)
0x10004DECF	0x00000026	[ 48] literal string: dict update sequence has wrong length
0x10004DEF5	0x0000000F	[ 48] literal string: dict_iter_next
0x10004DF04	0x0000000A	[ 48] literal string: objdict.c
0x10004DF0E	0x0000001B	[ 48] literal string: map->used == 0 || i == max
0x10004DF29	0x00000002	[ 48] literal string: {
0x10004DF2B	0x00000002	[ 48] literal string: }
0x10004DF2D	0x00000003	[ 48] literal string: ([
0x10004DF30	0x00000003	[ 48] literal string: ])
0x10004DF33	0x0000000B	[ 48] literal string: dict_items
0x10004DF3E	0x0000000A	[ 48] literal string: dict_keys
0x10004DF48	0x0000000C	[ 48] literal string: dict_values
0x10004DF54	0x0000001F	[ 48] literal string: popitem(): dictionary is empty
0x10004DF73	0x0000000D	[ 48] literal string: dict_popitem
0x10004DF80	0x00000015	[ 50] literal string: mp_obj_new_exception
0x10004DF95	0x0000000C	[ 50] literal string: objexcept.c
0x10004DFA1	0x00000019	[ 50] literal string: mp_obj_new_exception_msg
0x10004DFBA	0x0000001F	[ 50] literal string: mp_obj_new_exception_msg_vlist
0x10004DFD9	0x0000000C	[ 50] literal string: fmt != NULL
0x10004DFE5	0x00000015	[ 50] literal string: get_native_exception
0x10004DFFA	0x00000026	[ 50] literal string: mp_obj_is_exception_instance(self_in)
0x10004E020	0x00000011	[ 52] literal string: mp_obj_float_get
0x10004E031	0x0000000B	[ 52] literal string: objfloat.c
0x10004E03C	0x00000019	[ 52] literal string: mp_obj_is_float(self_in)
0x10004E055	0x00000003	[ 52] literal string: .0
0x10004E058	0x00000009	[ 53] literal string: objfun.c
0x10004E061	0x00000013	[ 53] literal string: fun_builtin_1_call
0x10004E074	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
0x10004E0A4	0x00000013	[ 53] literal string: fun_builtin_2_call
0x10004E0B7	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
0x10004E0E7	0x00000013	[ 53] literal string: fun_builtin_3_call
0x10004E0FA	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
0x10004E12A	0x00000015	[ 53] literal string: fun_builtin_var_call
0x10004E13F	0x00000032	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
0x10004E171	0x00000019	[ 56] literal string: can't convert inf to int
0x10004E18A	0x00000019	[ 56] literal string: can't convert NaN to int
0x10004E1A3	0x00000013	[ 56] literal string: mp_int_format_size
0x10004E1B6	0x00000009	[ 56] literal string: objint.c
0x10004E1BF	0x00000018	[ 56] literal string: 2 <= base && base <= 16
0x10004E1D7	0x00000015	[ 56] literal string: mp_obj_int_formatted
0x10004E1EC	0x0000002C	[ 56] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
0x10004E218	0x0000001A	[ 58] literal string: mp_obj_int_formatted_impl
0x10004E232	0x0000000D	[ 58] literal string: objint_mpz.c
0x10004E23F	0x00000019	[ 58] literal string: mp_obj_int_to_bytes_impl
0x10004E258	0x00000015	[ 58] literal string: mp_obj_int_binary_op
0x10004E26D	0x0000002B	[ 58] literal string: mp_obj_is_exact_type(lhs_in, &mp_type_int)
0x10004E298	0x0000002D	[ 58] literal string: overflow converting long int to machine word
0x10004E2C5	0x00000019	[ 58] literal string: mp_obj_int_as_float_impl
0x10004E2DE	0x00000014	[ 59] literal string: pop from empty list
0x10004E2F2	0x00000002	[ 59] literal string: [
0x10004E2F4	0x0000000C	[ 59] literal string: list_subscr
0x10004E300	0x0000000A	[ 59] literal string: objlist.c
0x10004E30A	0x0000000D	[ 59] literal string: len_adj <= 0
0x10004E317	0x00000016	[ 62] literal string: arg must be user-type
0x10004E32D	0x00000003	[ 70] literal string: %q
0x10004E330	0x00000019	[ 71] literal string: slice step can't be zero
0x10004E349	0x00000007	[ 71] literal string: slice(
0x10004E350	0x00000004	[ 72] literal string: \%c
0x10004E354	0x00000003	[ 72] literal string: \\
0x10004E357	0x00000003	[ 72] literal string: \n
0x10004E35A	0x00000003	[ 72] literal string: \r
0x10004E35D	0x00000003	[ 72] literal string: \t
0x10004E360	0x00000007	[ 72] literal string: \x%02x
0x10004E367	0x00000010	[ 72] literal string: empty separator
0x10004E377	0x00000045	[ 72] literal string: join expects a list of str/bytes objects consistent with self object
0x10004E3BC	0x0000000F	[ 72] literal string: rsplit(None,n)
0x10004E3CB	0x00000014	[ 72] literal string: substring not found
0x10004E3DF	0x00000012	[ 72] literal string: start/end indices
0x10004E3F1	0x00000007	[ 72] literal string:  	\n
0x10004E3F8	0x0000000E	[ 72] literal string: str_uni_strip
0x10004E406	0x00000009	[ 72] literal string: objstr.c
0x10004E40F	0x0000002A	[ 72] literal string: last_good_char_pos >= first_good_char_pos
0x10004E439	0x00000019	[ 72] literal string: first_good_char_pos == 0
0x10004E452	0x00000028	[ 72] literal string: single '}' encountered in format string
0x10004E47A	0x00000035	[ 72] literal string: end of format while looking for conversion specifier
0x10004E4AF	0x00000020	[ 72] literal string: unknown conversion specifier %c
0x10004E4CF	0x00000018	[ 72] literal string: unmatched '{' in format
0x10004E4E7	0x00000024	[ 72] literal string: expected ':' after format specifier
0x10004E50B	0x0000004A	[ 72] literal string: can't switch from automatic field numbering to manual field specification
0x10004E555	0x00000019	[ 72] literal string: tuple index out of range
0x10004E56E	0x00000019	[ 72] literal string: attributes not supported
0x10004E587	0x0000004A	[ 72] literal string: can't switch from manual field specification to automatic field numbering
0x10004E5D1	0x00000019	[ 72] literal string: mp_obj_str_format_helper
0x10004E5EA	0x00000012	[ 72] literal string: conversion == 'r'
0x10004E5FC	0x00000019	[ 72] literal string: invalid format specifier
0x10004E615	0x0000002C	[ 72] literal string: sign not allowed in string format specifier
0x10004E641	0x00000033	[ 72] literal string: sign not allowed with integer format specifier 'c'
0x10004E674	0x00000031	[ 72] literal string: unknown format code '%c' for object of type '%s'
0x10004E6A5	0x00000035	[ 72] literal string: '=' alignment not allowed in string format specifier
0x10004E6DA	0x00000005	[ 72] literal string: <>=^
0x10004E6DF	0x00000010	[ 72] literal string: bcdeEfFgGnosxX%
0x10004E6EF	0x00000014	[ 72] literal string: format needs a dict
0x10004E703	0x00000016	[ 72] literal string: incomplete format key
0x10004E719	0x00000012	[ 72] literal string: incomplete format
0x10004E72B	0x00000023	[ 72] literal string: format string needs more arguments
0x10004E74E	0x00000015	[ 72] literal string: %c needs int or char
0x10004E763	0x0000000F	[ 72] literal string: integer needed
0x10004E772	0x00000035	[ 72] literal string: unsupported format character '%c' (0x%x) at index %d
0x10004E7A7	0x0000002B	[ 72] literal string: format string didn't convert all arguments
0x10004E7D2	0x0000000C	[ 72] literal string: str_replace
0x10004E7DE	0x0000000D	[ 72] literal string: data != NULL
0x10004E7EB	0x00000019	[ 72] literal string: bytes value out of range
0x10004E804	0x0000001A	[ 72] literal string: wrong number of arguments
0x10004E81E	0x0000002B	[ 72] literal string: can't convert '%q' object to %q implicitly
0x10004E849	0x00000028	[ 73] literal string: string indices must be integers, not %s
0x10004E871	0x0000001A	[ 73] literal string: string index out of range
0x10004E88B	0x00000007	[ 73] literal string: \u%04x
0x10004E892	0x00000007	[ 73] literal string: \U%08x
0x10004E899	0x0000000B	[ 73] literal string: str_subscr
0x10004E8A4	0x00000010	[ 73] literal string: objstrunicode.c
0x10004E8B4	0x00000015	[ 73] literal string: type == &mp_type_str
0x10004E8C9	0x00000002	[ 75] literal string: (
0x10004E8CB	0x00000002	[ 75] literal string: ,
0x10004E8CD	0x00000011	[ 75] literal string: mp_obj_tuple_get
0x10004E8DE	0x0000000B	[ 75] literal string: objtuple.c
0x10004E8E9	0x00000024	[ 75] literal string: mp_obj_is_tuple_compatible(self_in)
0x10004E90D	0x00000014	[ 76] literal string: mp_obj_new_instance
0x10004E921	0x0000000A	[ 76] literal string: objtype.c
0x10004E92B	0x00000015	[ 76] literal string: num_native_bases < 2
0x10004E940	0x00000028	[ 76] literal string: type '%q' isn't an acceptable base type
0x10004E968	0x0000002E	[ 76] literal string: multiple bases have instance lay-out conflict
0x10004E996	0x0000001C	[ 76] literal string: instance_count_native_bases
0x10004E9B2	0x00000025	[ 76] literal string: mp_obj_is_type(*item, &mp_type_type)
0x10004E9D7	0x00000014	[ 76] literal string: mp_obj_class_lookup
0x10004E9EB	0x0000001F	[ 76] literal string: lookup->dest[0] == MP_OBJ_NULL
0x10004EA0A	0x0000001F	[ 76] literal string: lookup->dest[1] == MP_OBJ_NULL
0x10004EA29	0x00000058	[ 76] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(MP_OBJ_TYPE_GET_SLOT(type, locals_dict)))
0x10004EA81	0x0000001C	[ 76] literal string: type takes 1 or 3 arguments
0x10004EA9D	0x0000000D	[ 76] literal string: <class '%q'>
0x10004EAAA	0x0000001C	[ 76] literal string: can't create '%q' instances
0x10004EAC6	0x0000000A	[ 76] literal string: type_attr
0x10004EAD0	0x00000027	[ 76] literal string: mp_obj_is_type(self_in, &mp_type_type)
0x10004EAF7	0x00000058	[ 76] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(MP_OBJ_TYPE_GET_SLOT(self, locals_dict)))
0x10004EB4F	0x00000035	[ 76] literal string: can't add special method to already-subclassed class
0x10004EB84	0x00000019	[ 76] literal string: mp_obj_instance_make_new
0x10004EB9D	0x0000001E	[ 76] literal string: mp_obj_is_instance_type(self)
0x10004EBBB	0x00000028	[ 76] literal string: __init__() should return None, not '%s'
0x10004EBE3	0x00000012	[ 76] literal string: <%s object at %p>
0x10004EBF5	0x0000001A	[ 76] literal string: mp_obj_instance_load_attr
0x10004EC0F	0x00000032	[ 76] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
0x10004EC41	0x00000015	[ 76] literal string: unreadable attribute
0x10004EC56	0x0000001D	[ 76] literal string: static_class_method_make_new
0x10004EC73	0x0000003E	[ 76] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
0x10004ECB1	0x00000017	[ 79] literal string: object not in sequence
0x10004ECC8	0x0000000D	[ 81] literal string: bad typecode
0x10004ECD5	0x00000003	[103] literal string: -X
0x10004ECD8	0x0000000A	[103] literal string: --version
0x10004ECE2	0x00000003	[103] literal string: -v
0x10004ECE5	0x00000003	[103] literal string: -O
0x10004ECE8	0x00000003	[103] literal string: -o
0x10004ECEB	0x00000003	[103] literal string: -s
0x10004ECEE	0x00000012	[103] literal string: -msmall-int-bits=
0x10004ED00	0x00000008	[103] literal string: -march=
0x10004ED08	0x00000004	[103] literal string: x86
0x10004ED0C	0x00000004	[103] literal string: x64
0x10004ED10	0x00000006	[103] literal string: armv6
0x10004ED16	0x00000007	[103] literal string: armv6m
0x10004ED1D	0x00000007	[103] literal string: armv7m
0x10004ED24	0x00000008	[103] literal string: armv7em
0x10004ED2C	0x0000000A	[103] literal string: armv7emsp
0x10004ED36	0x0000000A	[103] literal string: armv7emdp
0x10004ED40	0x00000007	[103] literal string: xtensa
0x10004ED47	0x0000000A	[103] literal string: xtensawin
0x10004ED51	0x00000005	[103] literal string: host
0x10004ED56	0x00000037	[103] literal string: unable to determine host architecture for -march=host\n
0x10004ED8D	0x00000016	[103] literal string: multiple input files\n
0x10004EDA3	0x0000000F	[103] literal string: no input file\n
0x10004EDB2	0x00000018	[103] literal string: FATAL: uncaught NLR %p\n
0x10004EDCA	0x0000000E	[103] literal string: emit=bytecode
0x10004EDD8	0x0000000C	[103] literal string: emit=native
0x10004EDE4	0x0000000B	[103] literal string: emit=viper
0x10004EDEF	0x0000000A	[103] literal string: heapsize=
0x10004EDF9	0x00000277	[103] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
0x10004F070	0x0000003E	[103] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
0x10004F0AE	0x00000004	[103] literal string: mpy
0x10004F0B2	0x0000004E	[103] literal string: MicroPython v1.20.0-117-ged7a3b11d on 2023-05-25; mpy-cross emitting mpy v6.1
0x10004F100	0x0000003F	[103] literal string:   emit={bytecode,native,viper} -- set the default code emitter
0x10004F140	0x00000EBC	[  0] compact unwind info
0x100050000	0x00000008	[106] non-lazy-pointer-to-local: ___assert_rtn
0x100050008	0x00000008	[  0] non-lazy-pointer-to-local: ___chkstk_darwin
0x100050010	0x00000008	[106] non-lazy-pointer-to-local: ___error
0x100050018	0x00000008	[106] non-lazy-pointer-to-local: ___exp10
0x100050020	0x00000008	[106] non-lazy-pointer-to-local: ___sincos_stret
0x100050028	0x00000008	[106] non-lazy-pointer-to-local: ___stack_chk_fail
0x100050030	0x00000008	[  0] non-lazy-pointer-to-local: ___stack_chk_guard
0x100050038	0x00000008	[  0] non-lazy-pointer-to-local: ___stderrp
0x100050040	0x00000008	[106] non-lazy-pointer-to-local: _atan2
0x100050048	0x00000008	[106] non-lazy-pointer-to-local: _bzero
0x100050050	0x00000008	[106] non-lazy-pointer-to-local: _close
0x100050058	0x00000008	[106] non-lazy-pointer-to-local: _exit
0x100050060	0x00000008	[106] non-lazy-pointer-to-local: _exp
0x100050068	0x00000008	[106] non-lazy-pointer-to-local: _fmod
0x100050070	0x00000008	[106] non-lazy-pointer-to-local: _fprintf
0x100050078	0x00000008	[106] non-lazy-pointer-to-local: _log
0x100050080	0x00000008	[106] non-lazy-pointer-to-local: _malloc
0x100050088	0x00000008	[106] non-lazy-pointer-to-local: _memchr
0x100050090	0x00000008	[106] non-lazy-pointer-to-local: _memcmp
0x100050098	0x00000008	[106] non-lazy-pointer-to-local: _memcpy
0x1000500A0	0x00000008	[106] non-lazy-pointer-to-local: _memmove
0x1000500A8	0x00000008	[106] non-lazy-pointer-to-local: _memset
0x1000500B0	0x00000008	[106] non-lazy-pointer-to-local: _nan
0x1000500B8	0x00000008	[106] non-lazy-pointer-to-local: _open
0x1000500C0	0x00000008	[106] non-lazy-pointer-to-local: _pow
0x1000500C8	0x00000008	[106] non-lazy-pointer-to-local: _printf
0x1000500D0	0x00000008	[106] non-lazy-pointer-to-local: _puts
0x1000500D8	0x00000008	[106] non-lazy-pointer-to-local: _read
0x1000500E0	0x00000008	[106] non-lazy-pointer-to-local: _setjmp
0x1000500E8	0x00000008	[106] non-lazy-pointer-to-local: _strchr
0x1000500F0	0x00000008	[106] non-lazy-pointer-to-local: _strcmp
0x1000500F8	0x00000008	[106] non-lazy-pointer-to-local: _strlen
0x100050100	0x00000008	[106] non-lazy-pointer-to-local: _strncmp
0x100050108	0x00000008	[106] non-lazy-pointer-to-local: _strtol
0x100050110	0x00000008	[106] non-lazy-pointer-to-local: _write
0x100050118	0x00000AE0	[  6] _mp_qstr_const_pool
0x100050BF8	0x00000120	[ 12] _tok_kw
0x100050D18	0x00000018	[ 13] _mp_constants_map
0x100050D30	0x00000030	[ 13] l_switch.table.mp_parse
0x100050D60	0x00000030	[ 13] l_switch.table.mp_parse.31
0x100050D90	0x00000058	[ 15] _emit_asm_table
0x100050DE8	0x00000058	[ 15] _emit_native_table
0x100050E40	0x000001D8	[ 15] _compile_function
0x100051018	0x000001B8	[ 17] _emit_bc_method_table
0x1000511D0	0x000001B8	[ 20] _emit_native_x64_method_table
0x100051388	0x000001B8	[ 22] _emit_native_x86_method_table
0x100051540	0x000001B8	[ 24] _emit_native_thumb_method_table
0x1000516F8	0x00000038	[ 25] _emit_inline_thumb_method_table
0x100051730	0x000001B8	[ 27] _emit_native_arm_method_table
0x1000518E8	0x000001B8	[ 29] _emit_native_xtensa_method_table
0x100051AA0	0x00000038	[ 30] _emit_inline_xtensa_method_table
0x100051AD8	0x000001B8	[ 31] _emit_native_xtensawin_method_table
0x100051C90	0x00000020	[ 37] _mp_type_checked_fun
0x100051CB0	0x00000080	[ 43] _mp_obj_get_type.types
0x100051D30	0x00000010	[ 44] _mp_obj_array_append_obj
0x100051D40	0x00000010	[ 44] _mp_obj_array_extend_obj
0x100051D50	0x00000058	[ 44] _mp_type_bytearray
0x100051DA8	0x00000020	[ 44] _mp_type_array_it
0x100051DC8	0x00000038	[ 45] _mp_type_bool
0x100051E00	0x00000040	[ 47] _mp_type_complex
0x100051E40	0x00000020	[ 48] _mp_const_empty_dict_obj
0x100051E60	0x00000050	[ 48] _mp_type_dict
0x100051EB0	0x00000020	[ 48] _mp_type_dict_view_it
0x100051ED0	0x000000E0	[ 48] _dict_locals_dict_table
0x100051FB0	0x00000020	[ 48] _dict_locals_dict
0x100051FD0	0x00000010	[ 48] _dict_fromkeys_obj
0x100051FE0	0x00000018	[ 48] _dict_get_obj
0x100051FF8	0x00000018	[ 48] _dict_pop_obj
0x100052010	0x00000018	[ 48] _dict_setdefault_obj
0x100052028	0x00000010	[ 48] _dict_clear_obj
0x100052038	0x00000010	[ 48] _dict_copy_obj
0x100052048	0x00000018	[ 48] _dict_fromkeys_fun_obj
0x100052060	0x00000010	[ 48] _dict_items_obj
0x100052070	0x00000038	[ 48] _mp_type_dict_view
0x1000520A8	0x00000018	[ 48] _mp_dict_view_names
0x1000520C0	0x00000010	[ 48] _dict_keys_obj
0x1000520D0	0x00000010	[ 48] _dict_popitem_obj
0x1000520E0	0x00000018	[ 48] _dict_update_obj
0x1000520F8	0x00000010	[ 48] _dict_values_obj
0x100052108	0x00000030	[ 50] _mp_type_BaseException
0x100052138	0x00000038	[ 50] _mp_type_Exception
0x100052170	0x00000038	[ 50] _mp_type_StopIteration
0x1000521A8	0x00000038	[ 50] _mp_type_ArithmeticError
0x1000521E0	0x00000038	[ 50] _mp_type_OverflowError
0x100052218	0x00000038	[ 50] _mp_type_ZeroDivisionError
0x100052250	0x00000038	[ 50] _mp_type_AttributeError
0x100052288	0x00000038	[ 50] _mp_type_LookupError
0x1000522C0	0x00000038	[ 50] _mp_type_IndexError
0x1000522F8	0x00000038	[ 50] _mp_type_KeyError
0x100052330	0x00000038	[ 50] _mp_type_MemoryError
0x100052368	0x00000038	[ 50] _mp_type_OSError
0x1000523A0	0x00000038	[ 50] _mp_type_RuntimeError
0x1000523D8	0x00000038	[ 50] _mp_type_NotImplementedError
0x100052410	0x00000038	[ 50] _mp_type_SyntaxError
0x100052448	0x00000038	[ 50] _mp_type_IndentationError
0x100052480	0x00000038	[ 50] _mp_type_TypeError
0x1000524B8	0x00000038	[ 50] _mp_type_ViperTypeError
0x1000524F0	0x00000038	[ 50] _mp_type_ValueError
0x100052528	0x00000038	[ 50] _mp_type_UnicodeError
0x100052560	0x00000038	[ 52] _mp_type_float
0x100052598	0x00000020	[ 53] _mp_type_fun_builtin_1
0x1000525B8	0x00000020	[ 53] _mp_type_fun_builtin_2
0x1000525D8	0x00000020	[ 53] _mp_type_fun_builtin_3
0x1000525F8	0x00000020	[ 53] _mp_type_fun_builtin_var
0x100052618	0x00000020	[ 55] _mp_type_it
0x100052638	0x00000040	[ 56] _mp_type_int
0x100052678	0x00000020	[ 56] _int_locals_dict_table
0x100052698	0x00000020	[ 56] _int_locals_dict
0x1000526B8	0x00000010	[ 56] _int_from_bytes_obj
0x1000526C8	0x00000018	[ 56] _int_to_bytes_obj
0x1000526E0	0x00000018	[ 56] _int_from_bytes_fun_obj
0x1000526F8	0x00000050	[ 59] _mp_type_list
0x100052748	0x000000B0	[ 59] _list_locals_dict_table
0x1000527F8	0x00000020	[ 59] _list_locals_dict
0x100052818	0x00000018	[ 59] _list_index_obj
0x100052830	0x00000018	[ 59] _list_pop_obj
0x100052848	0x00000010	[ 59] _list_append_obj
0x100052858	0x00000010	[ 59] _list_clear_obj
0x100052868	0x00000010	[ 59] _list_copy_obj
0x100052878	0x00000010	[ 59] _list_count_obj
0x100052888	0x00000010	[ 59] _list_extend_obj
0x100052898	0x00000010	[ 59] _list_insert_obj
0x1000528A8	0x00000010	[ 59] _list_remove_obj
0x1000528B8	0x00000010	[ 59] _list_reverse_obj
0x1000528C8	0x00000018	[ 59] _list_sort_obj
0x1000528E0	0x00000028	[ 62] _mp_type_object
0x100052908	0x00000020	[ 62] _object_locals_dict_table
0x100052928	0x00000020	[ 62] _object_locals_dict
0x100052948	0x00000010	[ 62] _object___new___obj
0x100052958	0x00000010	[ 62] _object___init___obj
0x100052968	0x00000010	[ 62] _object___new___fun_obj
0x100052978	0x00000020	[ 63] _mp_type_polymorph_iter
0x100052998	0x00000028	[ 64] _mp_type_property
0x1000529C0	0x00000030	[ 64] _property_locals_dict_table
0x1000529F0	0x00000020	[ 64] _property_locals_dict
0x100052A10	0x00000010	[ 64] _property_getter_obj
0x100052A20	0x00000010	[ 64] _property_setter_obj
0x100052A30	0x00000010	[ 64] _property_deleter_obj
0x100052A40	0x00000020	[ 65] _mp_type_NoneType
0x100052A60	0x00000020	[ 70] _mp_type_singleton
0x100052A80	0x00000010	[ 70] _mp_const_ellipsis_obj
0x100052A90	0x00000028	[ 71] _mp_type_slice
0x100052AB8	0x00000020	[ 72] _mp_const_empty_bytes_obj
0x100052AD8	0x00000010	[ 72] _str_join_obj
0x100052AE8	0x00000018	[ 72] _str_split_obj
0x100052B00	0x00000018	[ 72] _str_rsplit_obj
0x100052B18	0x00000018	[ 72] _str_find_obj
0x100052B30	0x00000018	[ 72] _str_rfind_obj
0x100052B48	0x00000018	[ 72] _str_index_obj
0x100052B60	0x00000018	[ 72] _str_rindex_obj
0x100052B78	0x00000018	[ 72] _str_startswith_obj
0x100052B90	0x00000018	[ 72] _str_endswith_obj
0x100052BA8	0x00000018	[ 72] _str_strip_obj
0x100052BC0	0x00000018	[ 72] _str_lstrip_obj
0x100052BD8	0x00000018	[ 72] _str_rstrip_obj
0x100052BF0	0x00000018	[ 72] _str_format_obj
0x100052C08	0x00000018	[ 72] _str_replace_obj
0x100052C20	0x00000018	[ 72] _str_count_obj
0x100052C38	0x00000010	[ 72] _str_lower_obj
0x100052C48	0x00000010	[ 72] _str_upper_obj
0x100052C58	0x00000010	[ 72] _str_isspace_obj
0x100052C68	0x00000010	[ 72] _str_isalpha_obj
0x100052C78	0x00000010	[ 72] _str_isdigit_obj
0x100052C88	0x00000010	[ 72] _str_isupper_obj
0x100052C98	0x00000010	[ 72] _str_islower_obj
0x100052CA8	0x00000018	[ 72] _bytes_decode_obj
0x100052CC0	0x00000018	[ 72] _str_encode_obj
0x100052CD8	0x000001A0	[ 72] _array_bytearray_str_bytes_locals_table
0x100052E78	0x00000020	[ 72] _mp_obj_str_locals_dict
0x100052E98	0x00000020	[ 72] _mp_obj_bytes_locals_dict
0x100052EB8	0x00000020	[ 72] _mp_obj_bytearray_locals_dict
0x100052ED8	0x00000050	[ 72] _mp_type_bytes
0x100052F28	0x00000058	[ 73] _mp_type_str
0x100052F80	0x00000010	[ 75] _mp_const_empty_tuple_obj
0x100052F90	0x00000050	[ 75] _mp_type_tuple
0x100052FE0	0x00000020	[ 75] _tuple_locals_dict_table
0x100053000	0x00000020	[ 75] _tuple_locals_dict
0x100053020	0x00000018	[ 75] _tuple_index_obj
0x100053038	0x00000010	[ 75] _tuple_count_obj
0x100053048	0x00000018	[ 76] _native_base_init_wrapper_obj
0x100053060	0x00000038	[ 76] _mp_type_type
0x100053098	0x00000020	[ 76] _mp_type_staticmethod
0x1000530B8	0x00000020	[ 76] _mp_type_classmethod
0x1000530D8	0x00000010	[ 78] _mp_op_getitem_obj
0x1000530E8	0x00000010	[ 78] _mp_op_setitem_obj
0x1000530F8	0x00000010	[ 78] _mp_op_delitem_obj
0x100053108	0x00000010	[ 86] _mp_builtin_next_obj
0x100053118	0x00000010	[103] _mp_stderr_print
0x100054000	0x00000008	[103] _heap_size
0x100054008	0x00000003	[  1] _mp_dynamic_compiler
0x100054010	0x00000008	[103] _mp_verbose_flag
0x100054018	0x00000320	[  1] _mp_state_ctx
0x100054338	0x00000004	[ 38] _mp_fun_table
0x10005433C	0x00000004	[103] _emit_opt

# Dead Stripped Symbols:
#        	Size    	File  Name
<<dead>> 	0x0000000A	[ 48] literal string: dict_keys
<<dead>> 	0x0000000C	[ 48] literal string: dict_values
<<dead>> 	0x0000001F	[ 48] literal string: popitem(): dictionary is empty
<<dead>> 	0x0000000D	[ 48] literal string: dict_popitem
<<dead>> 	0x00000005	[ 48] literal string: next
<<dead>> 	0x00000070	[ 49] _enumerate_make_new
<<dead>> 	0x000000A0	[ 49] _enumerate_iternext
<<dead>> 	0x00000028	[ 49] _enumerate_iternext.cold.1
<<dead>> 	0x00000028	[ 49] _mp_type_enumerate
<<dead>> 	0x00000020	[ 49] _enumerate_make_new.allowed_args
<<dead>> 	0x00000013	[ 49] literal string: enumerate_iternext
<<dead>> 	0x0000000F	[ 49] literal string: objenumerate.c
<<dead>> 	0x0000002C	[ 49] literal string: mp_obj_is_type(self_in, &mp_type_enumerate)
<<dead>> 	0x00000060	[ 50] _mp_obj_is_native_exception_instance
<<dead>> 	0x000000AC	[ 50] _mp_obj_exception_make_new
<<dead>> 	0x000000D8	[ 50] _mp_obj_exception_print
<<dead>> 	0x0000002C	[ 50] _mp_obj_exception_get_value
<<dead>> 	0x00000040	[ 50] _get_native_exception
<<dead>> 	0x00000088	[ 50] _mp_obj_exception_attr
<<dead>> 	0x00000080	[ 50] _mp_obj_new_exception
<<dead>> 	0x00000040	[ 50] _mp_obj_new_exception_args
<<dead>> 	0x000000E4	[ 50] _mp_obj_new_exception_msg
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception_msg_varg
<<dead>> 	0x00000164	[ 50] _mp_obj_new_exception_msg_vlist
<<dead>> 	0x000000A0	[ 50] _exc_add_strn
<<dead>> 	0x00000054	[ 50] _mp_obj_is_exception_type
<<dead>> 	0x00000014	[ 50] _mp_obj_is_exception_instance
<<dead>> 	0x00000040	[ 50] _mp_obj_exception_match
<<dead>> 	0x00000018	[ 50] _mp_obj_exception_clear_traceback
<<dead>> 	0x000000B4	[ 50] _mp_obj_exception_add_traceback
<<dead>> 	0x00000040	[ 50] _mp_obj_exception_get_traceback
<<dead>> 	0x00000028	[ 50] _get_native_exception.cold.1
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception.cold.1
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception_args.cold.1
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception_msg.cold.1
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception_msg_vlist.cold.1
<<dead>> 	0x00000028	[ 50] _mp_obj_new_exception_msg_vlist.cold.2
<<dead>> 	0x00000003	[ 50] literal string: : 
<<dead>> 	0x00000001	[ 50] literal string: 
<<dead>> 	0x00000015	[ 50] literal string: mp_obj_new_exception
<<dead>> 	0x0000000C	[ 50] literal string: objexcept.c
<<dead>> 	0x0000004E	[ 50] literal string: MP_OBJ_TYPE_GET_SLOT_OR_NULL(exc_type, make_new) == mp_obj_exception_make_new
<<dead>> 	0x0000001A	[ 50] literal string: mp_obj_new_exception_args
<<dead>> 	0x00000019	[ 50] literal string: mp_obj_new_exception_msg
<<dead>> 	0x0000001F	[ 50] literal string: mp_obj_new_exception_msg_vlist
<<dead>> 	0x0000000C	[ 50] literal string: fmt != NULL
<<dead>> 	0x00000015	[ 50] literal string: get_native_exception
<<dead>> 	0x00000026	[ 50] literal string: mp_obj_is_exception_instance(self_in)
<<dead>> 	0x00000030	[ 50] _mp_type_BaseException
<<dead>> 	0x00000038	[ 50] _mp_type_SystemExit
<<dead>> 	0x00000038	[ 50] _mp_type_KeyboardInterrupt
<<dead>> 	0x00000038	[ 50] _mp_type_GeneratorExit
<<dead>> 	0x00000038	[ 50] _mp_type_Exception
<<dead>> 	0x00000038	[ 50] _mp_type_StopAsyncIteration
<<dead>> 	0x00000038	[ 50] _mp_type_StopIteration
<<dead>> 	0x00000038	[ 50] _mp_type_ArithmeticError
<<dead>> 	0x00000038	[ 50] _mp_type_OverflowError
<<dead>> 	0x00000038	[ 50] _mp_type_ZeroDivisionError
<<dead>> 	0x00000038	[ 50] _mp_type_AssertionError
<<dead>> 	0x00000038	[ 50] _mp_type_AttributeError
<<dead>> 	0x00000038	[ 50] _mp_type_EOFError
<<dead>> 	0x00000038	[ 50] _mp_type_ImportError
<<dead>> 	0x00000038	[ 50] _mp_type_LookupError
<<dead>> 	0x00000038	[ 50] _mp_type_IndexError
<<dead>> 	0x00000038	[ 50] _mp_type_KeyError
<<dead>> 	0x00000038	[ 50] _mp_type_MemoryError
<<dead>> 	0x00000038	[ 50] _mp_type_NameError
<<dead>> 	0x00000038	[ 50] _mp_type_OSError
<<dead>> 	0x00000038	[ 50] _mp_type_RuntimeError
<<dead>> 	0x00000038	[ 50] _mp_type_NotImplementedError
<<dead>> 	0x00000038	[ 50] _mp_type_SyntaxError
<<dead>> 	0x00000038	[ 50] _mp_type_IndentationError
<<dead>> 	0x00000038	[ 50] _mp_type_TypeError
<<dead>> 	0x00000038	[ 50] _mp_type_ViperTypeError
<<dead>> 	0x00000038	[ 50] _mp_type_ValueError
<<dead>> 	0x00000038	[ 50] _mp_type_UnicodeError
<<dead>> 	0x0000005C	[ 51] _filter_make_new
<<dead>> 	0x00000060	[ 51] _filter_iternext
<<dead>> 	0x00000028	[ 51] _mp_type_filter
<<dead>> 	0x000000C0	[ 52] _float_make_new
<<dead>> 	0x000000BC	[ 52] _float_print
<<dead>> 	0x000000AC	[ 52] _float_unary_op
<<dead>> 	0x00000064	[ 52] _float_binary_op
<<dead>> 	0x00000034	[ 52] _mp_obj_new_float
<<dead>> 	0x00000034	[ 52] _mp_obj_float_get
<<dead>> 	0x000002C0	[ 52] _mp_obj_float_binary_op
<<dead>> 	0x000000D8	[ 52] _mp_obj_float_divmod
<<dead>> 	0x00000028	[ 52] _mp_obj_float_get.cold.1
<<dead>> 	0x00000008	[ 52] lJTI2_0
<<dead>> 	0x00000024	[ 52] lJTI6_0
<<dead>> 	0x00000010	[ 52] _mp_const_float_e_obj
<<dead>> 	0x00000010	[ 52] _mp_const_float_pi_obj
<<dead>> 	0x00000038	[ 52] _mp_type_float
<<dead>> 	0x00000011	[ 52] literal string: mp_obj_float_get
<<dead>> 	0x0000000B	[ 52] literal string: objfloat.c
<<dead>> 	0x00000019	[ 52] literal string: mp_obj_is_float(self_in)
<<dead>> 	0x0000000F	[ 52] literal string: divide by zero
<<dead>> 	0x00000003	[ 52] literal string: .0
<<dead>> 	0x00000050	[ 53] _fun_builtin_0_call
<<dead>> 	0x00000058	[ 53] _fun_builtin_1_call
<<dead>> 	0x00000058	[ 53] _fun_builtin_2_call
<<dead>> 	0x0000005C	[ 53] _fun_builtin_3_call
<<dead>> 	0x000000B4	[ 53] _fun_builtin_var_call
<<dead>> 	0x00000068	[ 53] _mp_obj_fun_get_name
<<dead>> 	0x00000044	[ 53] _fun_bc_print
<<dead>> 	0x000001B4	[ 53] _fun_bc_call
<<dead>> 	0x00000100	[ 53] _mp_obj_new_fun_bc
<<dead>> 	0x00000020	[ 53] _mp_obj_new_fun_native
<<dead>> 	0x00000044	[ 53] _mp_obj_new_fun_asm
<<dead>> 	0x00000048	[ 53] _fun_native_call
<<dead>> 	0x0000012C	[ 53] _fun_asm_call
<<dead>> 	0x00000138	[ 53] _convert_obj_for_inline_asm
<<dead>> 	0x00000028	[ 53] _fun_builtin_0_call.cold.1
<<dead>> 	0x00000028	[ 53] _fun_builtin_1_call.cold.1
<<dead>> 	0x00000028	[ 53] _fun_builtin_2_call.cold.1
<<dead>> 	0x00000028	[ 53] _fun_builtin_3_call.cold.1
<<dead>> 	0x00000028	[ 53] _fun_builtin_var_call.cold.1
<<dead>> 	0x00000028	[ 53] _fun_bc_call.cold.1
<<dead>> 	0x00000028	[ 53] _mp_obj_new_fun_bc.cold.1
<<dead>> 	0x00000028	[ 53] _mp_obj_new_fun_bc.cold.2
<<dead>> 	0x00000028	[ 53] _fun_asm_call.cold.1
<<dead>> 	0x00000005	[ 53] lJTI12_0
<<dead>> 	0x00000020	[ 53] _mp_type_fun_builtin_0
<<dead>> 	0x00000020	[ 53] _mp_type_fun_builtin_1
<<dead>> 	0x00000020	[ 53] _mp_type_fun_builtin_2
<<dead>> 	0x00000020	[ 53] _mp_type_fun_builtin_3
<<dead>> 	0x00000020	[ 53] _mp_type_fun_builtin_var
<<dead>> 	0x00000028	[ 53] _mp_type_fun_bc
<<dead>> 	0x00000028	[ 53] _mp_type_fun_native
<<dead>> 	0x00000020	[ 53] _mp_type_fun_asm
<<dead>> 	0x00000012	[ 53] literal string: mp_obj_new_fun_bc
<<dead>> 	0x00000009	[ 53] literal string: objfun.c
<<dead>> 	0x0000002C	[ 53] literal string: mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000002B	[ 53] literal string: mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_0_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_0)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_1_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_2_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_3_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
<<dead>> 	0x00000015	[ 53] literal string: fun_builtin_var_call
<<dead>> 	0x00000032	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
<<dead>> 	0x00000016	[ 53] literal string: <function %q at 0x%p>
<<dead>> 	0x0000000C	[ 53] literal string: fun_bc_call
<<dead>> 	0x00000029	[ 53] literal string: vm_return_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000000D	[ 53] literal string: fun_asm_call
<<dead>> 	0x0000000C	[ 53] literal string: n_args == 4
<<dead>> 	0x000000D4	[ 54] _gen_wrap_call
<<dead>> 	0x000000EC	[ 54] _native_gen_wrap_call
<<dead>> 	0x00000178	[ 54] _mp_obj_gen_resume
<<dead>> 	0x00000044	[ 54] _gen_instance_print
<<dead>> 	0x00000010	[ 54] _gen_instance_iternext
<<dead>> 	0x00000074	[ 54] _gen_resume_and_raise
<<dead>> 	0x00000080	[ 54] _gen_instance_close
<<dead>> 	0x0000000C	[ 54] _gen_instance_send
<<dead>> 	0x00000028	[ 54] _gen_instance_throw
<<dead>> 	0x0000002C	[ 54] _gen_instance_pend_throw
<<dead>> 	0x00000020	[ 54] _mp_const_GeneratorExit_obj
<<dead>> 	0x00000020	[ 54] _mp_type_gen_wrap
<<dead>> 	0x00000020	[ 54] _mp_type_native_gen_wrap
<<dead>> 	0x00000030	[ 54] _mp_type_gen_instance
<<dead>> 	0x00000040	[ 54] _gen_instance_locals_dict_table
<<dead>> 	0x00000020	[ 54] _gen_instance_locals_dict
<<dead>> 	0x00000018	[ 54] _gen_instance_throw_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_close_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_send_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_pend_throw_obj
<<dead>> 	0x0000001C	[ 54] literal string: generator already executing
<<dead>> 	0x00000036	[ 54] literal string: can't send non-None value to a just-started generator
<<dead>> 	0x0000001F	[ 54] literal string: generator raised StopIteration
<<dead>> 	0x0000001E	[ 54] literal string: <generator object '%q' at %p>
<<dead>> 	0x00000020	[ 54] literal string: generator ignored GeneratorExit
<<dead>> 	0x00000028	[ 55] _mp_obj_new_getitem_iter
<<dead>> 	0x0000008C	[ 55] _it_iternext
<<dead>> 	0x00000020	[ 55] _mp_type_it
<<dead>> 	0x000000BC	[ 56] _mp_obj_new_int_from_float
<<dead>> 	0x0000009C	[ 56] _mp_obj_int_print
<<dead>> 	0x0000020C	[ 56] _mp_obj_int_formatted
<<dead>> 	0x00000088	[ 56] _mp_int_format_size
<<dead>> 	0x000000C8	[ 56] _mp_obj_int_binary_op_extra_cases
<<dead>> 	0x0000014C	[ 56] _mp_obj_int_make_new
<<dead>> 	0x000000A0	[ 56] _int_from_bytes
<<dead>> 	0x000000B8	[ 56] _int_to_bytes
<<dead>> 	0x00000028	[ 56] _mp_obj_int_formatted.cold.1
<<dead>> 	0x00000028	[ 56] _mp_int_format_size.cold.1
<<dead>> 	0x00000019	[ 56] literal string: can't convert inf to int
<<dead>> 	0x00000019	[ 56] literal string: can't convert NaN to int
<<dead>> 	0x00000013	[ 56] literal string: mp_int_format_size
<<dead>> 	0x00000009	[ 56] literal string: objint.c
<<dead>> 	0x00000018	[ 56] literal string: 2 <= base && base <= 16
<<dead>> 	0x00000015	[ 56] literal string: mp_obj_int_formatted
<<dead>> 	0x0000002C	[ 56] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
<<dead>> 	0x00000010	[ 56] _log_base2_floor
<<dead>> 	0x00000040	[ 56] _mp_type_int
<<dead>> 	0x00000020	[ 56] _int_locals_dict_table
<<dead>> 	0x00000020	[ 56] _int_locals_dict
<<dead>> 	0x00000010	[ 56] _int_from_bytes_obj
<<dead>> 	0x00000018	[ 56] _int_to_bytes_obj
<<dead>> 	0x00000018	[ 56] _int_from_bytes_fun_obj
<<dead>> 	0x00000038	[ 58] _mp_obj_int_new_mpz
<<dead>> 	0x000000DC	[ 58] _mp_obj_int_formatted_impl
<<dead>> 	0x0000006C	[ 58] _mp_obj_int_from_bytes_impl
<<dead>> 	0x00000034	[ 58] _mp_obj_int_to_bytes_impl
<<dead>> 	0x0000003C	[ 58] _mp_obj_int_sign
<<dead>> 	0x0000011C	[ 58] _mp_obj_int_unary_op
<<dead>> 	0x00000404	[ 58] _mp_obj_int_binary_op
<<dead>> 	0x0000004C	[ 58] _mp_obj_int_get_checked
<<dead>> 	0x00000018	[ 58] _mp_obj_new_int
<<dead>> 	0x00000058	[ 58] _mp_obj_new_int_from_ll
<<dead>> 	0x00000058	[ 58] _mp_obj_new_int_from_ull
<<dead>> 	0x0000001C	[ 58] _mp_obj_new_int_from_uint
<<dead>> 	0x00000080	[ 58] _mp_obj_new_int_from_str_len
<<dead>> 	0x00000014	[ 58] _mp_obj_int_get_truncated
<<dead>> 	0x00000050	[ 58] _mp_obj_int_get_uint_checked
<<dead>> 	0x00000034	[ 58] _mp_obj_int_as_float_impl
<<dead>> 	0x00000028	[ 58] _mp_obj_int_formatted_impl.cold.1
<<dead>> 	0x00000028	[ 58] _mp_obj_int_to_bytes_impl.cold.1
<<dead>> 	0x00000028	[ 58] _mp_obj_int_binary_op.cold.1
<<dead>> 	0x00000028	[ 58] _mp_obj_int_as_float_impl.cold.1
<<dead>> 	0x00000008	[ 58] lJTI5_0
<<dead>> 	0x00000005	[ 58] lJTI6_0
<<dead>> 	0x0000001B	[ 58] lJTI6_1
<<dead>> 	0x0000001A	[ 58] literal string: mp_obj_int_formatted_impl
<<dead>> 	0x0000000D	[ 58] literal string: objint_mpz.c
<<dead>> 	0x0000002C	[ 58] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
<<dead>> 	0x00000019	[ 58] literal string: mp_obj_int_to_bytes_impl
<<dead>> 	0x00000015	[ 58] literal string: mp_obj_int_binary_op
<<dead>> 	0x0000002B	[ 58] literal string: mp_obj_is_exact_type(lhs_in, &mp_type_int)
<<dead>> 	0x0000000F	[ 58] literal string: divide by zero
<<dead>> 	0x00000015	[ 58] literal string: negative shift count
<<dead>> 	0x0000002D	[ 58] literal string: overflow converting long int to machine word
<<dead>> 	0x00000019	[ 58] literal string: mp_obj_int_as_float_impl
<<dead>> 	0x00000060	[ 59] _mp_obj_list_make_new
<<dead>> 	0x00000064	[ 59] _mp_obj_new_list
<<dead>> 	0x00000054	[ 59] _list_extend_from_iter
<<dead>> 	0x00000074	[ 59] _mp_obj_list_append
<<dead>> 	0x00000084	[ 59] _mp_obj_list_sort
<<dead>> 	0x00000184	[ 59] _mp_quicksort
<<dead>> 	0x00000070	[ 59] _mp_obj_list_remove
<<dead>> 	0x00000014	[ 59] _list_index
<<dead>> 	0x000000C8	[ 59] _list_pop
<<dead>> 	0x00000088	[ 59] _list_print
<<dead>> 	0x00000040	[ 59] _list_unary_op
<<dead>> 	0x00000184	[ 59] _list_binary_op
<<dead>> 	0x000002C4	[ 59] _list_subscr
<<dead>> 	0x00000020	[ 59] _list_getiter
<<dead>> 	0x0000005C	[ 59] _mp_obj_list_init
<<dead>> 	0x00000010	[ 59] _mp_obj_list_get
<<dead>> 	0x00000008	[ 59] _mp_obj_list_set_len
<<dead>> 	0x0000003C	[ 59] _mp_obj_list_store
<<dead>> 	0x000000C4	[ 59] _list_extend
<<dead>> 	0x00000030	[ 59] _list_it_iternext
<<dead>> 	0x00000044	[ 59] _list_clear
<<dead>> 	0x0000000C	[ 59] _list_copy
<<dead>> 	0x00000010	[ 59] _list_count
<<dead>> 	0x00000084	[ 59] _list_insert
<<dead>> 	0x00000054	[ 59] _list_reverse
<<dead>> 	0x00000028	[ 59] _list_subscr.cold.1
<<dead>> 	0x00000020	[ 59] _mp_obj_list_sort.allowed_args
<<dead>> 	0x00000050	[ 59] _mp_type_list
<<dead>> 	0x000000B0	[ 59] _list_locals_dict_table
<<dead>> 	0x00000020	[ 59] _list_locals_dict
<<dead>> 	0x00000018	[ 59] _list_index_obj
<<dead>> 	0x00000018	[ 59] _list_pop_obj
<<dead>> 	0x00000010	[ 59] _list_append_obj
<<dead>> 	0x00000010	[ 59] _list_clear_obj
<<dead>> 	0x00000010	[ 59] _list_copy_obj
<<dead>> 	0x00000010	[ 59] _list_count_obj
<<dead>> 	0x00000010	[ 59] _list_extend_obj
<<dead>> 	0x00000010	[ 59] _list_insert_obj
<<dead>> 	0x00000010	[ 59] _list_remove_obj
<<dead>> 	0x00000010	[ 59] _list_reverse_obj
<<dead>> 	0x00000018	[ 59] _list_sort_obj
<<dead>> 	0x00000014	[ 59] literal string: pop from empty list
<<dead>> 	0x00000003	[ 59] literal string: , 
<<dead>> 	0x00000002	[ 59] literal string: [
<<dead>> 	0x00000002	[ 59] literal string: ]
<<dead>> 	0x0000000C	[ 59] literal string: list_subscr
<<dead>> 	0x0000000A	[ 59] literal string: objlist.c
<<dead>> 	0x0000000D	[ 59] literal string: len_adj <= 0
<<dead>> 	0x00000088	[ 60] _map_make_new
<<dead>> 	0x00000094	[ 60] _map_iternext
<<dead>> 	0x00000028	[ 60] _mp_type_map
<<dead>> 	0x00000064	[ 61] _module_print
<<dead>> 	0x000000C8	[ 61] _module_attr
<<dead>> 	0x00000084	[ 61] _mp_obj_new_module
<<dead>> 	0x00000058	[ 61] _mp_module_get_loaded_or_builtin
<<dead>> 	0x00000048	[ 61] _mp_module_generic_attr
<<dead>> 	0x00000028	[ 61] _mp_type_module
<<dead>> 	0x00000040	[ 61] _mp_builtin_module_table
<<dead>> 	0x00000018	[ 61] _mp_builtin_module_map
<<dead>> 	0x00000001	[ 61] literal string: 
<<dead>> 	0x0000000E	[ 61] literal string: <module '%s'>
<<dead>> 	0x00000034	[ 62] _object_make_new
<<dead>> 	0x00000008	[ 62] _object___init__
<<dead>> 	0x00000050	[ 62] _object___new__
<<dead>> 	0x00000028	[ 62] _mp_type_object
<<dead>> 	0x00000020	[ 62] _object_locals_dict_table
<<dead>> 	0x00000020	[ 62] _object_locals_dict
<<dead>> 	0x00000010	[ 62] _object___new___obj
<<dead>> 	0x00000010	[ 62] _object___init___obj
<<dead>> 	0x00000010	[ 62] _object___new___fun_obj
<<dead>> 	0x00000016	[ 62] literal string: arg must be user-type
<<dead>> 	0x00000008	[ 63] _polymorph_it_iternext
<<dead>> 	0x00000020	[ 63] _mp_type_polymorph_iter
<<dead>> 	0x00000094	[ 64] _property_make_new
<<dead>> 	0x00000008	[ 64] _mp_obj_property_get
<<dead>> 	0x00000034	[ 64] _property_getter
<<dead>> 	0x00000034	[ 64] _property_setter
<<dead>> 	0x00000038	[ 64] _property_deleter
<<dead>> 	0x00000028	[ 64] _mp_type_property
<<dead>> 	0x00000030	[ 64] _property_locals_dict_table
<<dead>> 	0x00000020	[ 64] _property_locals_dict
<<dead>> 	0x00000010	[ 64] _property_getter_obj
<<dead>> 	0x00000010	[ 64] _property_setter_obj
<<dead>> 	0x00000010	[ 64] _property_deleter_obj
<<dead>> 	0x00000040	[ 64] _property_make_new.allowed_args
<<dead>> 	0x0000000C	[ 65] _none_print
<<dead>> 	0x00000020	[ 65] _mp_type_NoneType
<<dead>> 	0x00000005	[ 65] literal string: None
<<dead>> 	0x000000AC	[ 67] _range_make_new
<<dead>> 	0x0000005C	[ 67] _range_attr
<<dead>> 	0x00000078	[ 67] _range_print
<<dead>> 	0x00000060	[ 67] _range_unary_op
<<dead>> 	0x00000104	[ 67] _range_subscr
<<dead>> 	0x00000024	[ 67] _range_getiter
<<dead>> 	0x0000004C	[ 67] _range_it_iternext
<<dead>> 	0x00000048	[ 67] _mp_type_range
<<dead>> 	0x00000020	[ 67] _mp_type_range_it
<<dead>> 	0x0000000A	[ 67] literal string: zero step
<<dead>> 	0x0000000F	[ 67] literal string: range(%ld, %ld
<<dead>> 	0x00000002	[ 67] literal string: )
<<dead>> 	0x00000007	[ 67] literal string: , %ld)
<<dead>> 	0x000000C0	[ 68] _reversed_make_new
<<dead>> 	0x0000002C	[ 68] _reversed_iternext
<<dead>> 	0x00000028	[ 68] _mp_type_reversed
<<dead>> 	0x000000AC	[ 69] _set_make_new
<<dead>> 	0x000000D4	[ 69] _set_print
<<dead>> 	0x00000040	[ 69] _set_unary_op
<<dead>> 	0x0000027C	[ 69] _set_binary_op
<<dead>> 	0x00000020	[ 69] _set_getiter
<<dead>> 	0x0000006C	[ 69] _mp_obj_new_set
<<dead>> 	0x0000000C	[ 69] _mp_obj_set_store
<<dead>> 	0x00000030	[ 69] _set_union
<<dead>> 	0x00000030	[ 69] _set_symmetric_difference
<<dead>> 	0x00000008	[ 69] _set_intersect
<<dead>> 	0x00000008	[ 69] _set_diff
<<dead>> 	0x0000004C	[ 69] _set_update
<<dead>> 	0x0000005C	[ 69] _set_symmetric_difference_update
<<dead>> 	0x00000104	[ 69] _set_intersect_int
<<dead>> 	0x000000B0	[ 69] _set_diff_int
<<dead>> 	0x00000050	[ 69] _set_equal
<<dead>> 	0x00000008	[ 69] _set_issubset
<<dead>> 	0x00000014	[ 69] _set_issuperset
<<dead>> 	0x00000054	[ 69] _set_copy
<<dead>> 	0x00000058	[ 69] _set_update_int
<<dead>> 	0x00000020	[ 69] _set_add
<<dead>> 	0x0000001C	[ 69] _set_clear
<<dead>> 	0x0000014C	[ 69] _set_issubset_internal
<<dead>> 	0x00000044	[ 69] _set_it_iternext
<<dead>> 	0x00000020	[ 69] _set_discard
<<dead>> 	0x0000001C	[ 69] _set_diff_update
<<dead>> 	0x00000008	[ 69] _set_intersect_update
<<dead>> 	0x00000070	[ 69] _set_isdisjoint
<<dead>> 	0x00000030	[ 69] _set_pop
<<dead>> 	0x00000040	[ 69] _set_remove
<<dead>> 	0x00000028	[ 69] _set_equal.cold.1
<<dead>> 	0x0000001D	[ 69] lJTI3_0
<<dead>> 	0x00000048	[ 69] _mp_type_set
<<dead>> 	0x00000120	[ 69] _set_locals_dict_table
<<dead>> 	0x00000020	[ 69] _set_locals_dict
<<dead>> 	0x00000018	[ 69] _set_diff_obj
<<dead>> 	0x00000018	[ 69] _set_diff_update_obj
<<dead>> 	0x00000018	[ 69] _set_update_obj
<<dead>> 	0x00000010	[ 69] _set_add_obj
<<dead>> 	0x00000010	[ 69] _set_clear_obj
<<dead>> 	0x00000010	[ 69] _set_copy_obj
<<dead>> 	0x00000010	[ 69] _set_discard_obj
<<dead>> 	0x00000010	[ 69] _set_intersect_obj
<<dead>> 	0x00000010	[ 69] _set_intersect_update_obj
<<dead>> 	0x00000010	[ 69] _set_isdisjoint_obj
<<dead>> 	0x00000010	[ 69] _set_issubset_obj
<<dead>> 	0x00000010	[ 69] _set_issuperset_obj
<<dead>> 	0x00000010	[ 69] _set_pop_obj
<<dead>> 	0x00000010	[ 69] _set_remove_obj
<<dead>> 	0x00000010	[ 69] _set_symmetric_difference_obj
<<dead>> 	0x00000010	[ 69] _set_symmetric_difference_update_obj
<<dead>> 	0x00000010	[ 69] _set_union_obj
<<dead>> 	0x00000006	[ 69] literal string: set()
<<dead>> 	0x00000002	[ 69] literal string: {
<<dead>> 	0x00000003	[ 69] literal string: , 
<<dead>> 	0x00000002	[ 69] literal string: }
<<dead>> 	0x0000000A	[ 69] literal string: set_equal
<<dead>> 	0x00000009	[ 69] literal string: objset.c
<<dead>> 	0x0000001E	[ 69] literal string: is_set_or_frozenset(other_in)
<<dead>> 	0x00000016	[ 69] literal string: pop from an empty set
<<dead>> 	0x0000002C	[ 70] _singleton_print
<<dead>> 	0x00000020	[ 70] _mp_type_singleton
<<dead>> 	0x00000010	[ 70] _mp_const_ellipsis_obj
<<dead>> 	0x00000003	[ 70] literal string: %q
<<dead>> 	0x00000008	[ 71] _slice_unary_op
<<dead>> 	0x00000090	[ 71] _slice_print
<<dead>> 	0x00000044	[ 71] _mp_obj_new_slice
<<dead>> 	0x00000130	[ 71] _mp_obj_slice_indices
<<dead>> 	0x00000028	[ 71] _mp_type_slice
<<dead>> 	0x00000019	[ 71] literal string: slice step can't be zero
<<dead>> 	0x00000007	[ 71] literal string: slice(
<<dead>> 	0x00000003	[ 71] literal string: , 
<<dead>> 	0x00000002	[ 71] literal string: )
<<dead>> 	0x000001E0	[ 72] _mp_str_print_quoted
<<dead>> 	0x00000180	[ 72] _mp_obj_str_make_new
<<dead>> 	0x000000E4	[ 72] _mp_obj_new_str_type_from_vstr
<<dead>> 	0x00000074	[ 72] _mp_obj_new_str_copy
<<dead>> 	0x00000070	[ 72] _mp_obj_new_str
<<dead>> 	0x00000084	[ 72] _find_subbytes
<<dead>> 	0x00000988	[ 72] _mp_obj_str_binary_op
<<dead>> 	0x0000003C	[ 72] _bad_implicit_conversion
<<dead>> 	0x00000204	[ 72] _str_join
<<dead>> 	0x000002C8	[ 72] _mp_obj_str_split
<<dead>> 	0x00000040	[ 72] _mp_obj_new_str_of_type
<<dead>> 	0x00000058	[ 72] _str_check_arg_type
<<dead>> 	0x00000088	[ 72] _mp_obj_str_get_data
<<dead>> 	0x000001E4	[ 72] _str_rsplit
<<dead>> 	0x0000000C	[ 72] _str_find
<<dead>> 	0x0000000C	[ 72] _str_rfind
<<dead>> 	0x0000000C	[ 72] _str_index
<<dead>> 	0x0000000C	[ 72] _str_rindex
<<dead>> 	0x000000D8	[ 72] _str_startswith
<<dead>> 	0x000000AC	[ 72] _str_endswith
<<dead>> 	0x00000010	[ 72] _str_strip
<<dead>> 	0x00000010	[ 72] _str_lstrip
<<dead>> 	0x00000010	[ 72] _str_rstrip
<<dead>> 	0x00000090	[ 72] _mp_obj_str_format
<<dead>> 	0x00000AA4	[ 72] _mp_obj_str_format_helper
<<dead>> 	0x000002FC	[ 72] _str_replace
<<dead>> 	0x000001A4	[ 72] _str_count
<<dead>> 	0x00000010	[ 72] _str_lower
<<dead>> 	0x00000010	[ 72] _str_upper
<<dead>> 	0x0000008C	[ 72] _str_isspace
<<dead>> 	0x0000008C	[ 72] _str_isalpha
<<dead>> 	0x0000008C	[ 72] _str_isdigit
<<dead>> 	0x000000C8	[ 72] _str_isupper
<<dead>> 	0x000000C8	[ 72] _str_islower
<<dead>> 	0x0000007C	[ 72] _bytes_decode
<<dead>> 	0x00000078	[ 72] _str_encode
<<dead>> 	0x00000074	[ 72] _mp_obj_str_get_buffer
<<dead>> 	0x00000030	[ 72] _mp_obj_str_set_data
<<dead>> 	0x00000210	[ 72] _bytes_make_new
<<dead>> 	0x00000098	[ 72] _str_print
<<dead>> 	0x000000E8	[ 72] _bytes_subscr
<<dead>> 	0x00000020	[ 72] _mp_obj_new_bytes_iterator
<<dead>> 	0x00000014	[ 72] _mp_obj_new_bytes
<<dead>> 	0x00000020	[ 72] _mp_obj_new_str_via_qstr
<<dead>> 	0x00000048	[ 72] _mp_obj_new_str_from_vstr
<<dead>> 	0x00000010	[ 72] _mp_obj_new_str_from_utf8_vstr
<<dead>> 	0x00000010	[ 72] _mp_obj_new_bytes_from_vstr
<<dead>> 	0x00000050	[ 72] _mp_obj_str_intern
<<dead>> 	0x00000034	[ 72] _mp_obj_str_intern_checked
<<dead>> 	0x00000108	[ 72] _mp_obj_str_equal
<<dead>> 	0x00000050	[ 72] _mp_obj_str_get_qstr
<<dead>> 	0x0000006C	[ 72] _mp_obj_str_get_str
<<dead>> 	0x0000018C	[ 72] _str_finder
<<dead>> 	0x000001D4	[ 72] _str_uni_strip
<<dead>> 	0x000000A8	[ 72] _str_caseconv
<<dead>> 	0x00000078	[ 72] _bytes_it_iternext
<<dead>> 	0x00000028	[ 72] _mp_obj_str_format_helper.cold.1
<<dead>> 	0x00000028	[ 72] _str_replace.cold.1
<<dead>> 	0x00000028	[ 72] _str_uni_strip.cold.1
<<dead>> 	0x00000028	[ 72] _str_uni_strip.cold.2
<<dead>> 	0x00000008	[ 72] lJTI6_0
<<dead>> 	0x0000002C	[ 72] lJTI6_1
<<dead>> 	0x0000000E	[ 72] lJTI24_0
<<dead>> 	0x00000003	[ 72] literal string: %c
<<dead>> 	0x00000004	[ 72] literal string: \%c
<<dead>> 	0x00000003	[ 72] literal string: \\
<<dead>> 	0x00000003	[ 72] literal string: \n
<<dead>> 	0x00000003	[ 72] literal string: \r
<<dead>> 	0x00000003	[ 72] literal string: \t
<<dead>> 	0x00000007	[ 72] literal string: \x%02x
<<dead>> 	0x00000010	[ 72] literal string: empty separator
<<dead>> 	0x00000001	[ 72] literal string: 
<<dead>> 	0x00000045	[ 72] literal string: join expects a list of str/bytes objects consistent with self object
<<dead>> 	0x0000000F	[ 72] literal string: rsplit(None,n)
<<dead>> 	0x00000014	[ 72] literal string: substring not found
<<dead>> 	0x00000012	[ 72] literal string: start/end indices
<<dead>> 	0x00000007	[ 72] literal string:  	\n
<<dead>> 	0x0000000E	[ 72] literal string: str_uni_strip
<<dead>> 	0x00000009	[ 72] literal string: objstr.c
<<dead>> 	0x0000002A	[ 72] literal string: last_good_char_pos >= first_good_char_pos
<<dead>> 	0x00000019	[ 72] literal string: first_good_char_pos == 0
<<dead>> 	0x00000028	[ 72] literal string: single '}' encountered in format string
<<dead>> 	0x00000035	[ 72] literal string: end of format while looking for conversion specifier
<<dead>> 	0x00000020	[ 72] literal string: unknown conversion specifier %c
<<dead>> 	0x00000018	[ 72] literal string: unmatched '{' in format
<<dead>> 	0x00000024	[ 72] literal string: expected ':' after format specifier
<<dead>> 	0x0000004A	[ 72] literal string: can't switch from automatic field numbering to manual field specification
<<dead>> 	0x00000019	[ 72] literal string: tuple index out of range
<<dead>> 	0x00000019	[ 72] literal string: attributes not supported
<<dead>> 	0x0000004A	[ 72] literal string: can't switch from manual field specification to automatic field numbering
<<dead>> 	0x00000019	[ 72] literal string: mp_obj_str_format_helper
<<dead>> 	0x00000012	[ 72] literal string: conversion == 'r'
<<dead>> 	0x00000019	[ 72] literal string: invalid format specifier
<<dead>> 	0x0000002C	[ 72] literal string: sign not allowed in string format specifier
<<dead>> 	0x00000033	[ 72] literal string: sign not allowed with integer format specifier 'c'
<<dead>> 	0x00000031	[ 72] literal string: unknown format code '%c' for object of type '%s'
<<dead>> 	0x00000035	[ 72] literal string: '=' alignment not allowed in string format specifier
<<dead>> 	0x00000005	[ 72] literal string: <>=^
<<dead>> 	0x00000010	[ 72] literal string: bcdeEfFgGnosxX%
<<dead>> 	0x00000014	[ 72] literal string: format needs a dict
<<dead>> 	0x00000016	[ 72] literal string: incomplete format key
<<dead>> 	0x00000012	[ 72] literal string: incomplete format
<<dead>> 	0x00000023	[ 72] literal string: format string needs more arguments
<<dead>> 	0x00000015	[ 72] literal string: %c needs int or char
<<dead>> 	0x0000000F	[ 72] literal string: integer needed
<<dead>> 	0x00000035	[ 72] literal string: unsupported format character '%c' (0x%x) at index %d
<<dead>> 	0x0000002B	[ 72] literal string: format string didn't convert all arguments
<<dead>> 	0x0000000C	[ 72] literal string: str_replace
<<dead>> 	0x0000000D	[ 72] literal string: data != NULL
<<dead>> 	0x00000024	[ 72] literal string: string argument without an encoding
<<dead>> 	0x00000019	[ 72] literal string: bytes value out of range
<<dead>> 	0x0000001A	[ 72] literal string: wrong number of arguments
<<dead>> 	0x00000002	[ 72] literal string: b
<<dead>> 	0x00000031	[ 72] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x0000002B	[ 72] literal string: can't convert '%q' object to %q implicitly
<<dead>> 	0x00000020	[ 72] _mp_const_empty_bytes_obj
<<dead>> 	0x00000010	[ 72] _str_join_obj
<<dead>> 	0x00000018	[ 72] _str_split_obj
<<dead>> 	0x00000018	[ 72] _str_rsplit_obj
<<dead>> 	0x00000018	[ 72] _str_find_obj
<<dead>> 	0x00000018	[ 72] _str_rfind_obj
<<dead>> 	0x00000018	[ 72] _str_index_obj
<<dead>> 	0x00000018	[ 72] _str_rindex_obj
<<dead>> 	0x00000018	[ 72] _str_startswith_obj
<<dead>> 	0x00000018	[ 72] _str_endswith_obj
<<dead>> 	0x00000018	[ 72] _str_strip_obj
<<dead>> 	0x00000018	[ 72] _str_lstrip_obj
<<dead>> 	0x00000018	[ 72] _str_rstrip_obj
<<dead>> 	0x00000018	[ 72] _str_format_obj
<<dead>> 	0x00000018	[ 72] _str_replace_obj
<<dead>> 	0x00000018	[ 72] _str_count_obj
<<dead>> 	0x00000010	[ 72] _str_lower_obj
<<dead>> 	0x00000010	[ 72] _str_upper_obj
<<dead>> 	0x00000010	[ 72] _str_isspace_obj
<<dead>> 	0x00000010	[ 72] _str_isalpha_obj
<<dead>> 	0x00000010	[ 72] _str_isdigit_obj
<<dead>> 	0x00000010	[ 72] _str_isupper_obj
<<dead>> 	0x00000010	[ 72] _str_islower_obj
<<dead>> 	0x00000018	[ 72] _bytes_decode_obj
<<dead>> 	0x00000018	[ 72] _str_encode_obj
<<dead>> 	0x000001A0	[ 72] _array_bytearray_str_bytes_locals_table
<<dead>> 	0x00000020	[ 72] _mp_obj_str_locals_dict
<<dead>> 	0x00000020	[ 72] _mp_obj_bytes_locals_dict
<<dead>> 	0x00000020	[ 72] _mp_obj_bytearray_locals_dict
<<dead>> 	0x00000050	[ 72] _mp_type_bytes
<<dead>> 	0x00000140	[ 73] _str_index_to_ptr
<<dead>> 	0x00000248	[ 73] _uni_print
<<dead>> 	0x0000008C	[ 73] _uni_unary_op
<<dead>> 	0x00000188	[ 73] _str_subscr
<<dead>> 	0x00000020	[ 73] _mp_obj_new_str_iterator
<<dead>> 	0x00000094	[ 73] _str_it_iternext
<<dead>> 	0x00000028	[ 73] _str_subscr.cold.1
<<dead>> 	0x00000028	[ 73] literal string: string indices must be integers, not %s
<<dead>> 	0x0000001A	[ 73] literal string: string index out of range
<<dead>> 	0x00000003	[ 73] literal string: %c
<<dead>> 	0x00000004	[ 73] literal string: \%c
<<dead>> 	0x00000003	[ 73] literal string: \\
<<dead>> 	0x00000003	[ 73] literal string: \n
<<dead>> 	0x00000003	[ 73] literal string: \r
<<dead>> 	0x00000003	[ 73] literal string: \t
<<dead>> 	0x00000007	[ 73] literal string: \x%02x
<<dead>> 	0x00000007	[ 73] literal string: \u%04x
<<dead>> 	0x00000007	[ 73] literal string: \U%08x
<<dead>> 	0x0000000B	[ 73] literal string: str_subscr
<<dead>> 	0x00000010	[ 73] literal string: objstrunicode.c
<<dead>> 	0x00000015	[ 73] literal string: type == &mp_type_str
<<dead>> 	0x00000031	[ 73] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000058	[ 73] _mp_type_str
<<dead>> 	0x000000A8	[ 75] _mp_obj_tuple_print
<<dead>> 	0x000000B8	[ 75] _mp_obj_tuple_unary_op
<<dead>> 	0x000001E8	[ 75] _mp_obj_tuple_binary_op
<<dead>> 	0x00000068	[ 75] _mp_obj_new_tuple
<<dead>> 	0x000000EC	[ 75] _mp_obj_tuple_subscr
<<dead>> 	0x00000100	[ 75] _mp_obj_tuple_make_new
<<dead>> 	0x00000020	[ 75] _mp_obj_tuple_getiter
<<dead>> 	0x0000007C	[ 75] _mp_obj_tuple_get
<<dead>> 	0x00000030	[ 75] _mp_obj_tuple_del
<<dead>> 	0x00000030	[ 75] _tuple_it_iternext
<<dead>> 	0x00000014	[ 75] _tuple_count
<<dead>> 	0x00000018	[ 75] _tuple_index
<<dead>> 	0x00000028	[ 75] _mp_obj_tuple_get.cold.1
<<dead>> 	0x00000028	[ 75] _mp_obj_tuple_del.cold.1
<<dead>> 	0x00000003	[ 75] literal string: , 
<<dead>> 	0x00000002	[ 75] literal string: (
<<dead>> 	0x00000002	[ 75] literal string: ,
<<dead>> 	0x00000002	[ 75] literal string: )
<<dead>> 	0x00000031	[ 75] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000011	[ 75] literal string: mp_obj_tuple_get
<<dead>> 	0x0000000B	[ 75] literal string: objtuple.c
<<dead>> 	0x00000024	[ 75] literal string: mp_obj_is_tuple_compatible(self_in)
<<dead>> 	0x00000011	[ 75] literal string: mp_obj_tuple_del
<<dead>> 	0x00000028	[ 75] literal string: mp_obj_is_type(self_in, &mp_type_tuple)
<<dead>> 	0x00000010	[ 75] _mp_const_empty_tuple_obj
<<dead>> 	0x00000050	[ 75] _mp_type_tuple
<<dead>> 	0x00000020	[ 75] _tuple_locals_dict_table
<<dead>> 	0x00000020	[ 75] _tuple_locals_dict
<<dead>> 	0x00000018	[ 75] _tuple_index_obj
<<dead>> 	0x00000010	[ 75] _tuple_count_obj
<<dead>> 	0x00000068	[ 76] _mp_obj_new_instance
<<dead>> 	0x000000E4	[ 76] _instance_count_native_bases
<<dead>> 	0x0000007C	[ 76] _mp_obj_instance_is_callable
<<dead>> 	0x000000EC	[ 76] _mp_obj_instance_call
<<dead>> 	0x000000F8	[ 76] _mp_obj_instance_getiter
<<dead>> 	0x00000218	[ 76] _mp_obj_class_lookup
<<dead>> 	0x0000006C	[ 76] _type_make_new
<<dead>> 	0x0000002C	[ 76] _type_print
<<dead>> 	0x00000048	[ 76] _type_call
<<dead>> 	0x00000214	[ 76] _type_attr
<<dead>> 	0x0000030C	[ 76] _mp_obj_new_type
<<dead>> 	0x00000248	[ 76] _mp_obj_instance_make_new
<<dead>> 	0x00000148	[ 76] _instance_print
<<dead>> 	0x00000134	[ 76] _instance_unary_op
<<dead>> 	0x000000F0	[ 76] _instance_binary_op
<<dead>> 	0x00000274	[ 76] _mp_obj_instance_attr
<<dead>> 	0x000000F8	[ 76] _instance_subscr
<<dead>> 	0x000000C4	[ 76] _instance_get_buffer
<<dead>> 	0x00000060	[ 76] _static_class_method_make_new
<<dead>> 	0x0000006C	[ 76] _super_make_new
<<dead>> 	0x00000068	[ 76] _super_print
<<dead>> 	0x000001A8	[ 76] _super_attr
<<dead>> 	0x0000003C	[ 76] _mp_load_super_method
<<dead>> 	0x000000C0	[ 76] _mp_obj_is_subclass_fast
<<dead>> 	0x00000038	[ 76] _mp_builtin_issubclass
<<dead>> 	0x00000024	[ 76] _mp_builtin_isinstance
<<dead>> 	0x00000048	[ 76] _mp_obj_cast_to_native_base
<<dead>> 	0x0000006C	[ 76] _native_base_init_wrapper
<<dead>> 	0x000000E0	[ 76] _mp_obj_is_subclass
<<dead>> 	0x00000028	[ 76] _mp_obj_new_instance.cold.1
<<dead>> 	0x00000028	[ 76] _instance_count_native_bases.cold.1
<<dead>> 	0x00000028	[ 76] _mp_obj_class_lookup.cold.1
<<dead>> 	0x00000028	[ 76] _mp_obj_class_lookup.cold.2
<<dead>> 	0x00000028	[ 76] _mp_obj_class_lookup.cold.3
<<dead>> 	0x00000028	[ 76] _mp_obj_class_lookup.cold.4
<<dead>> 	0x00000028	[ 76] _mp_obj_class_lookup.cold.5
<<dead>> 	0x00000028	[ 76] _type_attr.cold.1
<<dead>> 	0x00000028	[ 76] _type_attr.cold.2
<<dead>> 	0x00000028	[ 76] _mp_obj_new_type.cold.1
<<dead>> 	0x00000028	[ 76] _mp_obj_instance_make_new.cold.1
<<dead>> 	0x00000028	[ 76] _mp_obj_instance_attr.cold.1
<<dead>> 	0x00000028	[ 76] _static_class_method_make_new.cold.1
<<dead>> 	0x00000028	[ 76] _super_attr.cold.1
<<dead>> 	0x00000028	[ 76] _super_attr.cold.2
<<dead>> 	0x00000028	[ 76] _super_attr.cold.3
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000010	[ 76] 16-byte-literal
<<dead>> 	0x00000008	[ 76] 8-byte-literal
<<dead>> 	0x00000014	[ 76] literal string: mp_obj_new_instance
<<dead>> 	0x0000000A	[ 76] literal string: objtype.c
<<dead>> 	0x00000015	[ 76] literal string: num_native_bases < 2
<<dead>> 	0x0000001B	[ 76] literal string: '%s' object isn't callable
<<dead>> 	0x00000028	[ 76] literal string: type '%q' isn't an acceptable base type
<<dead>> 	0x0000002E	[ 76] literal string: multiple bases have instance lay-out conflict
<<dead>> 	0x0000001C	[ 76] literal string: instance_count_native_bases
<<dead>> 	0x00000025	[ 76] literal string: mp_obj_is_type(*item, &mp_type_type)
<<dead>> 	0x00000014	[ 76] literal string: mp_obj_class_lookup
<<dead>> 	0x0000001F	[ 76] literal string: lookup->dest[0] == MP_OBJ_NULL
<<dead>> 	0x0000001F	[ 76] literal string: lookup->dest[1] == MP_OBJ_NULL
<<dead>> 	0x00000058	[ 76] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(MP_OBJ_TYPE_GET_SLOT(type, locals_dict)))
<<dead>> 	0x0000001C	[ 76] literal string: type takes 1 or 3 arguments
<<dead>> 	0x0000000D	[ 76] literal string: <class '%q'>
<<dead>> 	0x0000001C	[ 76] literal string: can't create '%q' instances
<<dead>> 	0x0000000A	[ 76] literal string: type_attr
<<dead>> 	0x00000027	[ 76] literal string: mp_obj_is_type(self_in, &mp_type_type)
<<dead>> 	0x00000058	[ 76] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(MP_OBJ_TYPE_GET_SLOT(self, locals_dict)))
<<dead>> 	0x00000035	[ 76] literal string: can't add special method to already-subclassed class
<<dead>> 	0x00000019	[ 76] literal string: mp_obj_instance_make_new
<<dead>> 	0x0000001E	[ 76] literal string: mp_obj_is_instance_type(self)
<<dead>> 	0x00000028	[ 76] literal string: __init__() should return None, not '%s'
<<dead>> 	0x00000012	[ 76] literal string: <%s object at %p>
<<dead>> 	0x0000001A	[ 76] literal string: mp_obj_instance_load_attr
<<dead>> 	0x00000032	[ 76] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
<<dead>> 	0x00000015	[ 76] literal string: unreadable attribute
<<dead>> 	0x00000016	[ 76] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 76] literal string: obj.h
<<dead>> 	0x00000011	[ 76] literal string: pos < map->alloc
<<dead>> 	0x00000009	[ 76] literal string: <super: 
<<dead>> 	0x00000003	[ 76] literal string: , 
<<dead>> 	0x00000002	[ 76] literal string: >
<<dead>> 	0x0000000B	[ 76] literal string: super_attr
<<dead>> 	0x00000028	[ 76] literal string: mp_obj_is_type(self_in, &mp_type_super)
<<dead>> 	0x0000002A	[ 76] literal string: mp_obj_is_type(self->type, &mp_type_type)
<<dead>> 	0x00000028	[ 76] literal string: mp_obj_is_type(items[i], &mp_type_type)
<<dead>> 	0x00000023	[ 76] literal string: issubclass() arg 1 must be a class
<<dead>> 	0x00000039	[ 76] literal string: issubclass() arg 2 must be a class or a tuple of classes
<<dead>> 	0x0000001D	[ 76] literal string: static_class_method_make_new
<<dead>> 	0x0000003E	[ 76] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
<<dead>> 	0x00000018	[ 76] _native_base_init_wrapper_obj
<<dead>> 	0x00000038	[ 76] _mp_type_type
<<dead>> 	0x00000030	[ 76] _mp_type_super
<<dead>> 	0x00000010	[ 76] _mp_builtin_issubclass_obj
<<dead>> 	0x00000010	[ 76] _mp_builtin_isinstance_obj
<<dead>> 	0x00000020	[ 76] _mp_type_staticmethod
<<dead>> 	0x00000020	[ 76] _mp_type_classmethod
<<dead>> 	0x0000000C	[ 76] _mp_unary_op_method_name
<<dead>> 	0x00000025	[ 76] _mp_binary_op_method_name
<<dead>> 	0x00000078	[ 77] _zip_make_new
<<dead>> 	0x0000007C	[ 77] _zip_iternext
<<dead>> 	0x00000028	[ 77] _mp_type_zip
<<dead>> 	0x0000003C	[ 78] _op_getitem
<<dead>> 	0x00000048	[ 78] _op_setitem
<<dead>> 	0x0000003C	[ 78] _op_delitem
<<dead>> 	0x0000003C	[ 78] _op_contains
<<dead>> 	0x00000010	[ 78] _mp_op_getitem_obj
<<dead>> 	0x00000010	[ 78] _mp_op_setitem_obj
<<dead>> 	0x00000010	[ 78] _mp_op_delitem_obj
<<dead>> 	0x00000010	[ 78] _mp_op_contains_obj
<<dead>> 	0x00000050	[ 79] _mp_seq_multiply
<<dead>> 	0x0000006C	[ 79] _mp_seq_get_fast_slice_indexes
<<dead>> 	0x0000008C	[ 79] _mp_seq_extract_slice
<<dead>> 	0x000000B8	[ 79] _mp_seq_cmp_bytes
<<dead>> 	0x000000E4	[ 79] _mp_seq_cmp_objs
<<dead>> 	0x000000DC	[ 79] _mp_seq_index_obj
<<dead>> 	0x0000005C	[ 79] _mp_seq_count_obj
<<dead>> 	0x00000017	[ 79] literal string: object not in sequence
<<dead>> 	0x000000B0	[ 80] _mp_stream_rw
<<dead>> 	0x0000006C	[ 80] _mp_get_stream_raise
<<dead>> 	0x00000008	[ 80] _stream_read
<<dead>> 	0x00000008	[ 80] _stream_read1
<<dead>> 	0x00000040	[ 80] _mp_stream_write
<<dead>> 	0x00000008	[ 80] _mp_stream_write_adaptor
<<dead>> 	0x000000AC	[ 80] _stream_write_method
<<dead>> 	0x00000048	[ 80] _stream_write1_method
<<dead>> 	0x0000008C	[ 80] _stream_readinto
<<dead>> 	0x000000F0	[ 80] _stream_unbuffered_readline
<<dead>> 	0x00000074	[ 80] _stream_unbuffered_readlines
<<dead>> 	0x00000040	[ 80] _mp_stream_unbuffered_iter
<<dead>> 	0x00000050	[ 80] _mp_stream_close
<<dead>> 	0x000000BC	[ 80] _stream_seek
<<dead>> 	0x00000060	[ 80] _stream_tell
<<dead>> 	0x00000050	[ 80] _stream_flush
<<dead>> 	0x000000A8	[ 80] _stream_ioctl
<<dead>> 	0x00000248	[ 80] _stream_read_generic
<<dead>> 	0x0000001F	[ 80] literal string: stream operation not supported
<<dead>> 	0x00000018	[ 80] _mp_stream_read_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_read1_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_write_obj
<<dead>> 	0x00000010	[ 80] _mp_stream_write1_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_readinto_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_unbuffered_readline_obj
<<dead>> 	0x00000010	[ 80] _mp_stream_unbuffered_readlines_obj
<<dead>> 	0x00000010	[ 80] _mp_stream_close_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_seek_obj
<<dead>> 	0x00000010	[ 80] _mp_stream_tell_obj
<<dead>> 	0x00000010	[ 80] _mp_stream_flush_obj
<<dead>> 	0x00000018	[ 80] _mp_stream_ioctl_obj
<<dead>> 	0x00000138	[ 81] _mp_binary_get_size
<<dead>> 	0x000000C8	[ 81] _mp_binary_get_val_array
<<dead>> 	0x00000060	[ 81] _mp_binary_get_int
<<dead>> 	0x00000174	[ 81] _mp_binary_get_val
<<dead>> 	0x00000054	[ 81] _mp_binary_set_int
<<dead>> 	0x0000012C	[ 81] _mp_binary_set_val
<<dead>> 	0x000000E4	[ 81] _mp_binary_set_val_array
<<dead>> 	0x00000098	[ 81] _mp_binary_set_val_array_from_int
<<dead>> 	0x00000012	[ 81] lJTI0_0
<<dead>> 	0x00000010	[ 81] lJTI0_1
<<dead>> 	0x00000012	[ 81] lJTI0_2
<<dead>> 	0x00000010	[ 81] lJTI0_3
<<dead>> 	0x00000010	[ 81] lJTI1_0
<<dead>> 	0x00000010	[ 81] lJTI1_1
<<dead>> 	0x0000000A	[ 81] lJTI7_0
<<dead>> 	0x00000010	[ 81] lJTI7_1
<<dead>> 	0x0000000D	[ 81] literal string: bad typecode
<<dead>> 	0x0000005C	[ 82] _mp_obj_is_package
<<dead>> 	0x00000264	[ 82] _mp_builtin___import___default
<<dead>> 	0x000001A0	[ 82] _evaluate_relative_import
<<dead>> 	0x00000054	[ 82] _stat_dir_or_file
<<dead>> 	0x00000034	[ 82] _do_load
<<dead>> 	0x00000028	[ 82] _evaluate_relative_import.cold.1
<<dead>> 	0x00000018	[ 82] _mp_builtin___import___obj
<<dead>> 	0x00000019	[ 82] literal string: evaluate_relative_import
<<dead>> 	0x00000010	[ 82] literal string: builtinimport.c
<<dead>> 	0x00000027	[ 82] literal string: current_module_name_obj != MP_OBJ_NULL
<<dead>> 	0x0000001E	[ 82] literal string: can't perform relative import
<<dead>> 	0x00000015	[ 82] literal string: no module named '%q'
<<dead>> 	0x0000000D	[ 82] literal string: /__init__.py
<<dead>> 	0x00000004	[ 82] literal string: .py
<<dead>> 	0x00000008	[ 83] _mp_builtin_eval
<<dead>> 	0x00000008	[ 83] _mp_builtin_exec
<<dead>> 	0x000000CC	[ 83] _eval_exec_helper
<<dead>> 	0x00000018	[ 83] _mp_builtin_eval_obj
<<dead>> 	0x00000018	[ 83] _mp_builtin_exec_obj
<<dead>> 	0x000000F4	[ 86] _mp_builtin___build_class__
<<dead>> 	0x0000000C	[ 86] _mp_builtin_abs
<<dead>> 	0x0000004C	[ 86] _mp_builtin_all
<<dead>> 	0x0000004C	[ 86] _mp_builtin_any
<<dead>> 	0x0000005C	[ 86] _mp_builtin_bin
<<dead>> 	0x00000024	[ 86] _mp_builtin_callable
<<dead>> 	0x000000DC	[ 86] _mp_builtin_chr
<<dead>> 	0x00000130	[ 86] _mp_builtin_dir
<<dead>> 	0x00000010	[ 86] _mp_builtin_divmod
<<dead>> 	0x0000000C	[ 86] _mp_builtin_hash
<<dead>> 	0x00000010	[ 86] _mp_builtin_hex
<<dead>> 	0x00000008	[ 86] _mp_builtin_iter
<<dead>> 	0x00000008	[ 86] _mp_builtin_max
<<dead>> 	0x00000008	[ 86] _mp_builtin_min
<<dead>> 	0x00000028	[ 86] _mp_builtin_next
<<dead>> 	0x00000010	[ 86] _mp_builtin_oct
<<dead>> 	0x000000B0	[ 86] _mp_builtin_ord
<<dead>> 	0x00000030	[ 86] _mp_builtin_pow
<<dead>> 	0x000000EC	[ 86] _mp_builtin_print
<<dead>> 	0x0000004C	[ 86] _mp_builtin___repl_print__
<<dead>> 	0x0000004C	[ 86] _mp_builtin_repr
<<dead>> 	0x000000AC	[ 86] _mp_builtin_round
<<dead>> 	0x00000074	[ 86] _mp_builtin_sum
<<dead>> 	0x00000068	[ 86] _mp_builtin_sorted
<<dead>> 	0x000000A4	[ 86] _mp_builtin_getattr
<<dead>> 	0x0000003C	[ 86] _mp_builtin_setattr
<<dead>> 	0x00000038	[ 86] _mp_builtin_delattr
<<dead>> 	0x00000080	[ 86] _mp_builtin_hasattr
<<dead>> 	0x00000010	[ 86] _mp_builtin_globals
<<dead>> 	0x00000010	[ 86] _mp_builtin_locals
<<dead>> 	0x0000016C	[ 86] _mp_builtin_min_max
<<dead>> 	0x00000028	[ 86] _mp_builtin___build_class__.cold.1
<<dead>> 	0x00000028	[ 86] _mp_builtin_dir.cold.1
<<dead>> 	0x00000018	[ 86] _mp_builtin___build_class___obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_abs_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_all_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_any_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_bin_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_callable_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_chr_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_dir_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_divmod_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_hash_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_hex_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_iter_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_max_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_min_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_next_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_oct_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_ord_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_pow_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_print_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin___repl_print___obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_repr_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_round_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_sum_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_sorted_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_getattr_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_setattr_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_delattr_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_hasattr_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_globals_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_locals_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_id_obj
<<dead>> 	0x00000010	[ 86] _mp_builtin_len_obj
<<dead>> 	0x000005B0	[ 86] _mp_module_builtins_globals_table
<<dead>> 	0x00000020	[ 86] _mp_module_builtins_globals
<<dead>> 	0x00000010	[ 86] _mp_module_builtins
<<dead>> 	0x0000001B	[ 86] literal string: mp_builtin___build_class__
<<dead>> 	0x0000000E	[ 86] literal string: modbuiltins.c
<<dead>> 	0x0000000C	[ 86] literal string: 2 <= n_args
<<dead>> 	0x00000021	[ 86] literal string: chr() arg not in range(0x110000)
<<dead>> 	0x00000016	[ 86] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 86] literal string: obj.h
<<dead>> 	0x00000011	[ 86] literal string: pos < map->alloc
<<dead>> 	0x00000019	[ 86] literal string: arg is an empty sequence
<<dead>> 	0x0000003A	[ 86] literal string: ord() expected a character, but string of length %d found
<<dead>> 	0x0000001A	[ 86] literal string: 3-arg pow() not supported
<<dead>> 	0x00000002	[ 86] literal string: \n
<<dead>> 	0x0000002B	[ 86] literal string: must use keyword argument for key function
<<dead>> 	0x00000020	[ 86] _mp_builtin_print.allowed_args
<<dead>> 	0x00000044	[ 92] _mp_micropython_opt_level
<<dead>> 	0x00000018	[ 92] _mp_micropython_heap_lock
<<dead>> 	0x00000028	[ 92] _mp_micropython_heap_unlock
<<dead>> 	0x00000010	[ 92] _mp_module_micropython
<<dead>> 	0x00000050	[ 92] _mp_module_micropython_globals_table
<<dead>> 	0x00000020	[ 92] _mp_module_micropython_globals
<<dead>> 	0x00000018	[ 92] _mp_micropython_opt_level_obj
<<dead>> 	0x00000010	[ 92] _mp_micropython_heap_lock_obj
<<dead>> 	0x00000010	[ 92] _mp_micropython_heap_unlock_obj
<<dead>> 	0x00000030	[ 93] _struct_calcsize
<<dead>> 	0x000001E4	[ 93] _struct_unpack_from
<<dead>> 	0x00000080	[ 93] _struct_pack
<<dead>> 	0x000000AC	[ 93] _struct_pack_into
<<dead>> 	0x00000128	[ 93] _calc_size_items
<<dead>> 	0x00000060	[ 93] _get_fmt_num
<<dead>> 	0x000001A0	[ 93] _struct_pack_into_internal
<<dead>> 	0x00000010	[ 93] _struct_calcsize_obj
<<dead>> 	0x00000018	[ 93] _struct_unpack_from_obj
<<dead>> 	0x00000018	[ 93] _struct_pack_obj
<<dead>> 	0x00000018	[ 93] _struct_pack_into_obj
<<dead>> 	0x00000010	[ 93] _mp_module_ustruct
<<dead>> 	0x00000060	[ 93] _mp_module_struct_globals_table
<<dead>> 	0x00000020	[ 93] _mp_module_struct_globals
<<dead>> 	0x00000011	[ 93] literal string: buffer too small
<<dead>> 	0x00001450	[ 97] _mp_execute_bytecode
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.1
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.2
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.3
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.4
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.5
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.6
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.7
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.8
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.9
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.10
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.11
<<dead>> 	0x00000028	[ 97] _mp_execute_bytecode.cold.12
<<dead>> 	0x000000B4	[ 97] lJTI0_0
<<dead>> 	0x0000002C	[ 97] literal string: local variable referenced before assignment
<<dead>> 	0x00000014	[ 97] literal string: mp_execute_bytecode
<<dead>> 	0x00000005	[ 97] literal string: vm.c
<<dead>> 	0x00000024	[ 97] literal string: mp_obj_is_exception_instance(TOP())
<<dead>> 	0x00000014	[ 97] literal string: exc_sp >= exc_stack
<<dead>> 	0x00000029	[ 97] literal string: &sp[-1] == MP_TAGPTR_PTR(exc_sp->val_sp)
<<dead>> 	0x00000040	[ 97] literal string: sp[-1] == mp_const_none || mp_obj_is_exception_instance(sp[-1])
<<dead>> 	0x00000018	[ 97] literal string: exc_sp == exc_stack - 1
<<dead>> 	0x0000001F	[ 97] literal string: no active exception to reraise
<<dead>> 	0x00000021	[ 97] literal string: exception chaining not supported
<<dead>> 	0x00000023	[ 97] literal string: ret_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000004C	[ 97] literal string: !mp_obj_exception_match(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))
<<dead>> 	0x00000007	[ 97] literal string: opcode
<<dead>> 	0x000000C8	[ 98] _mp_encode_uint
<<dead>> 	0x00000028	[ 98] _mp_decode_uint
<<dead>> 	0x00000020	[ 98] _mp_decode_uint_value
<<dead>> 	0x0000000C	[ 98] _mp_decode_uint_skip
<<dead>> 	0x00000014	[ 98] _mp_setup_code_state
<<dead>> 	0x00000550	[ 98] _mp_setup_code_state_helper
<<dead>> 	0x0000000C	[ 98] _mp_setup_code_state_native
<<dead>> 	0x00000038	[ 98] _fun_pos_args_mismatch
<<dead>> 	0x0000002F	[ 98] literal string: function got multiple values for argument '%q'
<<dead>> 	0x00000021	[ 98] literal string: unexpected keyword argument '%q'
<<dead>> 	0x00000032	[ 98] literal string: function missing required positional argument #%d
<<dead>> 	0x00000030	[ 98] literal string: function missing required keyword argument '%q'
<<dead>> 	0x00000027	[ 98] literal string: function missing keyword-only argument
<<dead>> 	0x00000035	[ 98] literal string: %q() takes %d positional arguments but %d were given
<<dead>> 	0x0000007C	[101] _mp_small_int_mul_overflow
<<dead>> 	0x00000028	[101] _mp_small_int_modulo
<<dead>> 	0x00000028	[101] _mp_small_int_floor_divide
<<dead>> 	0x000006B8	[103] _main_
<<dead>> 	0x00000050	[103] _usage
<<dead>> 	0x0000002C	[103] _main
<<dead>> 	0x00000008	[103] _mp_import_stat
<<dead>> 	0x00000034	[103] _nlr_jump_fail
<<dead>> 	0x00000008	[103] _stderr_print_strn
<<dead>> 	0x00000008	[103] _heap_size
<<dead>> 	0x00000003	[103] literal string: -X
<<dead>> 	0x0000000A	[103] literal string: --version
<<dead>> 	0x00000003	[103] literal string: -v
<<dead>> 	0x00000003	[103] literal string: -O
<<dead>> 	0x00000003	[103] literal string: -o
<<dead>> 	0x00000003	[103] literal string: -s
<<dead>> 	0x00000012	[103] literal string: -msmall-int-bits=
<<dead>> 	0x00000008	[103] literal string: -march=
<<dead>> 	0x00000004	[103] literal string: x86
<<dead>> 	0x00000004	[103] literal string: x64
<<dead>> 	0x00000006	[103] literal string: armv6
<<dead>> 	0x00000007	[103] literal string: armv6m
<<dead>> 	0x00000007	[103] literal string: armv7m
<<dead>> 	0x00000008	[103] literal string: armv7em
<<dead>> 	0x0000000A	[103] literal string: armv7emsp
<<dead>> 	0x0000000A	[103] literal string: armv7emdp
<<dead>> 	0x00000007	[103] literal string: xtensa
<<dead>> 	0x0000000A	[103] literal string: xtensawin
<<dead>> 	0x00000005	[103] literal string: host
<<dead>> 	0x00000037	[103] literal string: unable to determine host architecture for -march=host\n
<<dead>> 	0x00000016	[103] literal string: multiple input files\n
<<dead>> 	0x0000000F	[103] literal string: no input file\n
<<dead>> 	0x00000018	[103] literal string: FATAL: uncaught NLR %p\n
<<dead>> 	0x0000000E	[103] literal string: emit=bytecode
<<dead>> 	0x0000000C	[103] literal string: emit=native
<<dead>> 	0x0000000B	[103] literal string: emit=viper
<<dead>> 	0x0000000A	[103] literal string: heapsize=
<<dead>> 	0x00000277	[103] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
<<dead>> 	0x0000003E	[103] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
<<dead>> 	0x00000004	[103] literal string: mpy
<<dead>> 	0x0000004E	[103] literal string: MicroPython v1.20.0-117-ged7a3b11d on 2023-05-25; mpy-cross emitting mpy v6.1
<<dead>> 	0x0000003F	[103] literal string:   emit={bytecode,native,viper} -- set the default code emitter
<<dead>> 	0x00000010	[103] _mp_stderr_print
<<dead>> 	0x00000008	[103] _mp_verbose_flag
<<dead>> 	0x00000004	[103] _emit_opt
<<dead>> 	0x00000018	[104] _gc_collect
<<dead>> 	0x00000074	[105] _gc_helper_collect_regs_and_stack
<<dead>> 	0x00000014	[105] _gc_helper_get_regs
<<dead>> 	0x00000000	[  0] __mh_execute_header
<<dead>> 	0x00000000	[  0] ___dso_handle
<<dead>> 	0x100000000	[  0] page zero
<<dead>> 	0x00000000	[106] ___assert_rtn
<<dead>> 	0x00000000	[106] ___chkstk_darwin
<<dead>> 	0x00000000	[106] ___error
<<dead>> 	0x00000000	[106] ___exp10
<<dead>> 	0x00000000	[106] ___memcpy_chk
<<dead>> 	0x00000000	[106] ___sincos_stret
<<dead>> 	0x00000000	[106] ___stack_chk_fail
<<dead>> 	0x00000000	[106] ___stack_chk_guard
<<dead>> 	0x00000000	[106] ___stderrp
<<dead>> 	0x00000000	[106] _atan2
<<dead>> 	0x00000000	[106] _bzero
<<dead>> 	0x00000000	[106] _close
<<dead>> 	0x00000000	[106] _exit
<<dead>> 	0x00000000	[106] _exp
<<dead>> 	0x00000000	[106] _fmod
<<dead>> 	0x00000000	[106] _fprintf
<<dead>> 	0x00000000	[106] _log
<<dead>> 	0x00000000	[106] _malloc
<<dead>> 	0x00000000	[106] _memchr
<<dead>> 	0x00000000	[106] _memcmp
<<dead>> 	0x00000000	[106] _memcpy
<<dead>> 	0x00000000	[106] _memmove
<<dead>> 	0x00000000	[106] _memset
<<dead>> 	0x00000000	[106] _nan
<<dead>> 	0x00000000	[106] _open
<<dead>> 	0x00000000	[106] _pow
<<dead>> 	0x00000000	[106] _printf
<<dead>> 	0x00000000	[106] _puts
<<dead>> 	0x00000000	[106] _read
<<dead>> 	0x00000000	[106] _setjmp
<<dead>> 	0x00000000	[106] _strchr
<<dead>> 	0x00000000	[106] _strcmp
<<dead>> 	0x00000000	[106] _strlen
<<dead>> 	0x00000000	[106] _strncmp
<<dead>> 	0x00000000	[106] _strtol
<<dead>> 	0x00000000	[106] _write
